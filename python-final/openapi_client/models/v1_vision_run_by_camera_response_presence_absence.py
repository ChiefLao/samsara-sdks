# coding: utf-8

"""
    Samsara API

    <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).   # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1VisionRunByCameraResponsePresenceAbsence(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'blue_range': 'V1VisionRunByCameraResponsePresenceAbsenceBlueRange',
        'check_for_absence': 'bool',
        'grayscale_range': 'V1VisionRunByCameraResponsePresenceAbsenceGrayscaleRange',
        'green_range': 'V1VisionRunByCameraResponsePresenceAbsenceBlueRange',
        'hue_range': 'V1VisionRunByCameraResponsePresenceAbsenceGrayscaleRange',
        'red_range': 'V1VisionRunByCameraResponsePresenceAbsenceBlueRange',
        'saturation_range': 'V1VisionRunByCameraResponsePresenceAbsenceSaturationRange',
        'score': 'int',
        'threshold': 'int',
        'value_range': 'V1VisionRunByCameraResponsePresenceAbsenceSaturationRange'
    }

    attribute_map = {
        'blue_range': 'blueRange',
        'check_for_absence': 'checkForAbsence',
        'grayscale_range': 'grayscaleRange',
        'green_range': 'greenRange',
        'hue_range': 'hueRange',
        'red_range': 'redRange',
        'saturation_range': 'saturationRange',
        'score': 'score',
        'threshold': 'threshold',
        'value_range': 'valueRange'
    }

    def __init__(self, blue_range=None, check_for_absence=None, grayscale_range=None, green_range=None, hue_range=None, red_range=None, saturation_range=None, score=None, threshold=None, value_range=None, local_vars_configuration=None):  # noqa: E501
        """V1VisionRunByCameraResponsePresenceAbsence - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._blue_range = None
        self._check_for_absence = None
        self._grayscale_range = None
        self._green_range = None
        self._hue_range = None
        self._red_range = None
        self._saturation_range = None
        self._score = None
        self._threshold = None
        self._value_range = None
        self.discriminator = None

        if blue_range is not None:
            self.blue_range = blue_range
        if check_for_absence is not None:
            self.check_for_absence = check_for_absence
        if grayscale_range is not None:
            self.grayscale_range = grayscale_range
        if green_range is not None:
            self.green_range = green_range
        if hue_range is not None:
            self.hue_range = hue_range
        if red_range is not None:
            self.red_range = red_range
        if saturation_range is not None:
            self.saturation_range = saturation_range
        if score is not None:
            self.score = score
        if threshold is not None:
            self.threshold = threshold
        if value_range is not None:
            self.value_range = value_range

    @property
    def blue_range(self):
        """Gets the blue_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The blue_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: V1VisionRunByCameraResponsePresenceAbsenceBlueRange
        """
        return self._blue_range

    @blue_range.setter
    def blue_range(self, blue_range):
        """Sets the blue_range of this V1VisionRunByCameraResponsePresenceAbsence.


        :param blue_range: The blue_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: V1VisionRunByCameraResponsePresenceAbsenceBlueRange
        """

        self._blue_range = blue_range

    @property
    def check_for_absence(self):
        """Gets the check_for_absence of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The check_for_absence of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: bool
        """
        return self._check_for_absence

    @check_for_absence.setter
    def check_for_absence(self, check_for_absence):
        """Sets the check_for_absence of this V1VisionRunByCameraResponsePresenceAbsence.


        :param check_for_absence: The check_for_absence of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: bool
        """

        self._check_for_absence = check_for_absence

    @property
    def grayscale_range(self):
        """Gets the grayscale_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The grayscale_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: V1VisionRunByCameraResponsePresenceAbsenceGrayscaleRange
        """
        return self._grayscale_range

    @grayscale_range.setter
    def grayscale_range(self, grayscale_range):
        """Sets the grayscale_range of this V1VisionRunByCameraResponsePresenceAbsence.


        :param grayscale_range: The grayscale_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: V1VisionRunByCameraResponsePresenceAbsenceGrayscaleRange
        """

        self._grayscale_range = grayscale_range

    @property
    def green_range(self):
        """Gets the green_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The green_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: V1VisionRunByCameraResponsePresenceAbsenceBlueRange
        """
        return self._green_range

    @green_range.setter
    def green_range(self, green_range):
        """Sets the green_range of this V1VisionRunByCameraResponsePresenceAbsence.


        :param green_range: The green_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: V1VisionRunByCameraResponsePresenceAbsenceBlueRange
        """

        self._green_range = green_range

    @property
    def hue_range(self):
        """Gets the hue_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The hue_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: V1VisionRunByCameraResponsePresenceAbsenceGrayscaleRange
        """
        return self._hue_range

    @hue_range.setter
    def hue_range(self, hue_range):
        """Sets the hue_range of this V1VisionRunByCameraResponsePresenceAbsence.


        :param hue_range: The hue_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: V1VisionRunByCameraResponsePresenceAbsenceGrayscaleRange
        """

        self._hue_range = hue_range

    @property
    def red_range(self):
        """Gets the red_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The red_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: V1VisionRunByCameraResponsePresenceAbsenceBlueRange
        """
        return self._red_range

    @red_range.setter
    def red_range(self, red_range):
        """Sets the red_range of this V1VisionRunByCameraResponsePresenceAbsence.


        :param red_range: The red_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: V1VisionRunByCameraResponsePresenceAbsenceBlueRange
        """

        self._red_range = red_range

    @property
    def saturation_range(self):
        """Gets the saturation_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The saturation_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: V1VisionRunByCameraResponsePresenceAbsenceSaturationRange
        """
        return self._saturation_range

    @saturation_range.setter
    def saturation_range(self, saturation_range):
        """Sets the saturation_range of this V1VisionRunByCameraResponsePresenceAbsence.


        :param saturation_range: The saturation_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: V1VisionRunByCameraResponsePresenceAbsenceSaturationRange
        """

        self._saturation_range = saturation_range

    @property
    def score(self):
        """Gets the score of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The score of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this V1VisionRunByCameraResponsePresenceAbsence.


        :param score: The score of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def threshold(self):
        """Gets the threshold of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The threshold of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this V1VisionRunByCameraResponsePresenceAbsence.


        :param threshold: The threshold of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: int
        """

        self._threshold = threshold

    @property
    def value_range(self):
        """Gets the value_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501


        :return: The value_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :rtype: V1VisionRunByCameraResponsePresenceAbsenceSaturationRange
        """
        return self._value_range

    @value_range.setter
    def value_range(self, value_range):
        """Sets the value_range of this V1VisionRunByCameraResponsePresenceAbsence.


        :param value_range: The value_range of this V1VisionRunByCameraResponsePresenceAbsence.  # noqa: E501
        :type: V1VisionRunByCameraResponsePresenceAbsenceSaturationRange
        """

        self._value_range = value_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VisionRunByCameraResponsePresenceAbsence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VisionRunByCameraResponsePresenceAbsence):
            return True

        return self.to_dict() != other.to_dict()
