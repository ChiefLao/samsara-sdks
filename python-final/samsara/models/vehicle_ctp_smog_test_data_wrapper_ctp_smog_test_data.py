# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class VehicleCtpSmogTestDataWrapperCtpSmogTestData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comm_protocol': 'str',
        'device_firmware': 'str',
        'dlc_pin_voltage_milli_volts': 'int',
        'dlc_pin_voltage_milli_volts_valid': 'bool',
        'link_id': 'str',
        'remote_obd_test_records': 'list[VehicleCtpSmogTestDataRemoteObdTestRecords]',
        'test_date_time': 'str'
    }

    attribute_map = {
        'comm_protocol': 'commProtocol',
        'device_firmware': 'deviceFirmware',
        'dlc_pin_voltage_milli_volts': 'dlcPinVoltageMilliVolts',
        'dlc_pin_voltage_milli_volts_valid': 'dlcPinVoltageMilliVoltsValid',
        'link_id': 'linkId',
        'remote_obd_test_records': 'remoteObdTestRecords',
        'test_date_time': 'testDateTime'
    }

    def __init__(self, comm_protocol=None, device_firmware=None, dlc_pin_voltage_milli_volts=None, dlc_pin_voltage_milli_volts_valid=None, link_id=None, remote_obd_test_records=None, test_date_time=None, local_vars_configuration=None):  # noqa: E501
        """VehicleCtpSmogTestDataWrapperCtpSmogTestData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._comm_protocol = None
        self._device_firmware = None
        self._dlc_pin_voltage_milli_volts = None
        self._dlc_pin_voltage_milli_volts_valid = None
        self._link_id = None
        self._remote_obd_test_records = None
        self._test_date_time = None
        self.discriminator = None

        if comm_protocol is not None:
            self.comm_protocol = comm_protocol
        if device_firmware is not None:
            self.device_firmware = device_firmware
        if dlc_pin_voltage_milli_volts is not None:
            self.dlc_pin_voltage_milli_volts = dlc_pin_voltage_milli_volts
        if dlc_pin_voltage_milli_volts_valid is not None:
            self.dlc_pin_voltage_milli_volts_valid = dlc_pin_voltage_milli_volts_valid
        if link_id is not None:
            self.link_id = link_id
        if remote_obd_test_records is not None:
            self.remote_obd_test_records = remote_obd_test_records
        if test_date_time is not None:
            self.test_date_time = test_date_time

    @property
    def comm_protocol(self):
        """Gets the comm_protocol of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501

        CAN bus communication protocol as detected by the vehicle gateway.  # noqa: E501

        :return: The comm_protocol of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :rtype: str
        """
        return self._comm_protocol

    @comm_protocol.setter
    def comm_protocol(self, comm_protocol):
        """Sets the comm_protocol of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.

        CAN bus communication protocol as detected by the vehicle gateway.  # noqa: E501

        :param comm_protocol: The comm_protocol of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :type: str
        """
        allowed_values = ["V", "P", "I", "Kf", "Ks", "C11", "C29", "C11s", "C29s"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and comm_protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `comm_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(comm_protocol, allowed_values)
            )

        self._comm_protocol = comm_protocol

    @property
    def device_firmware(self):
        """Gets the device_firmware of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501

        CTP firmware version as reported by the vehicle gateway.  # noqa: E501

        :return: The device_firmware of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :rtype: str
        """
        return self._device_firmware

    @device_firmware.setter
    def device_firmware(self, device_firmware):
        """Sets the device_firmware of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.

        CTP firmware version as reported by the vehicle gateway.  # noqa: E501

        :param device_firmware: The device_firmware of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :type: str
        """

        self._device_firmware = device_firmware

    @property
    def dlc_pin_voltage_milli_volts(self):
        """Gets the dlc_pin_voltage_milli_volts of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501

        Positive battery voltage as detected by the vehicle gateway reported in millivolts.  # noqa: E501

        :return: The dlc_pin_voltage_milli_volts of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :rtype: int
        """
        return self._dlc_pin_voltage_milli_volts

    @dlc_pin_voltage_milli_volts.setter
    def dlc_pin_voltage_milli_volts(self, dlc_pin_voltage_milli_volts):
        """Sets the dlc_pin_voltage_milli_volts of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.

        Positive battery voltage as detected by the vehicle gateway reported in millivolts.  # noqa: E501

        :param dlc_pin_voltage_milli_volts: The dlc_pin_voltage_milli_volts of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :type: int
        """

        self._dlc_pin_voltage_milli_volts = dlc_pin_voltage_milli_volts

    @property
    def dlc_pin_voltage_milli_volts_valid(self):
        """Gets the dlc_pin_voltage_milli_volts_valid of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501

        Indicates DlcPinVoltageMilliVolts was successfully read from the CAN bus.  # noqa: E501

        :return: The dlc_pin_voltage_milli_volts_valid of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :rtype: bool
        """
        return self._dlc_pin_voltage_milli_volts_valid

    @dlc_pin_voltage_milli_volts_valid.setter
    def dlc_pin_voltage_milli_volts_valid(self, dlc_pin_voltage_milli_volts_valid):
        """Sets the dlc_pin_voltage_milli_volts_valid of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.

        Indicates DlcPinVoltageMilliVolts was successfully read from the CAN bus.  # noqa: E501

        :param dlc_pin_voltage_milli_volts_valid: The dlc_pin_voltage_milli_volts_valid of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :type: bool
        """

        self._dlc_pin_voltage_milli_volts_valid = dlc_pin_voltage_milli_volts_valid

    @property
    def link_id(self):
        """Gets the link_id of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501

        Device serial number.  # noqa: E501

        :return: The link_id of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.

        Device serial number.  # noqa: E501

        :param link_id: The link_id of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :type: str
        """

        self._link_id = link_id

    @property
    def remote_obd_test_records(self):
        """Gets the remote_obd_test_records of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501

        Contains all of the specific OBD data collected for a single ECU present on a vehicle. There can can be multiple ECUs on a vehicle.  # noqa: E501

        :return: The remote_obd_test_records of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :rtype: list[VehicleCtpSmogTestDataRemoteObdTestRecords]
        """
        return self._remote_obd_test_records

    @remote_obd_test_records.setter
    def remote_obd_test_records(self, remote_obd_test_records):
        """Sets the remote_obd_test_records of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.

        Contains all of the specific OBD data collected for a single ECU present on a vehicle. There can can be multiple ECUs on a vehicle.  # noqa: E501

        :param remote_obd_test_records: The remote_obd_test_records of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :type: list[VehicleCtpSmogTestDataRemoteObdTestRecords]
        """

        self._remote_obd_test_records = remote_obd_test_records

    @property
    def test_date_time(self):
        """Gets the test_date_time of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501

        UTC timestamp in RFC 3339 milliseconds format.  # noqa: E501

        :return: The test_date_time of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :rtype: str
        """
        return self._test_date_time

    @test_date_time.setter
    def test_date_time(self, test_date_time):
        """Sets the test_date_time of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.

        UTC timestamp in RFC 3339 milliseconds format.  # noqa: E501

        :param test_date_time: The test_date_time of this VehicleCtpSmogTestDataWrapperCtpSmogTestData.  # noqa: E501
        :type: str
        """

        self._test_date_time = test_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleCtpSmogTestDataWrapperCtpSmogTestData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VehicleCtpSmogTestDataWrapperCtpSmogTestData):
            return True

        return self.to_dict() != other.to_dict()
