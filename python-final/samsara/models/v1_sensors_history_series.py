# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1SensorsHistorySeries(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'field': 'str',
        'widget_id': 'int'
    }

    attribute_map = {
        'field': 'field',
        'widget_id': 'widgetId'
    }

    def __init__(self, field=None, widget_id=None, local_vars_configuration=None):  # noqa: E501
        """V1SensorsHistorySeries - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._field = None
        self._widget_id = None
        self.discriminator = None

        self.field = field
        self.widget_id = widget_id

    @property
    def field(self):
        """Gets the field of this V1SensorsHistorySeries.  # noqa: E501

        Field to query.  # noqa: E501

        :return: The field of this V1SensorsHistorySeries.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this V1SensorsHistorySeries.

        Field to query.  # noqa: E501

        :param field: The field of this V1SensorsHistorySeries.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and field is None:  # noqa: E501
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501
        allowed_values = ["ambientTemperature", "cargoPercent", "currentLoop1Raw", "currentLoop1Mapped", "currentLoop2Raw", "currentLoop2Mapped", "doorClosed", "humidity", "pmPowerTotal", "pmPhase1Power", "pmPhase2Power", "pmPhase3Power", "pmPhase1PowerFactor", "pmPhase2PowerFactor", "pmPhase3PowerFactor", "probeTemperature"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and field not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"  # noqa: E501
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def widget_id(self):
        """Gets the widget_id of this V1SensorsHistorySeries.  # noqa: E501

        V1Sensor ID to query.  # noqa: E501

        :return: The widget_id of this V1SensorsHistorySeries.  # noqa: E501
        :rtype: int
        """
        return self._widget_id

    @widget_id.setter
    def widget_id(self, widget_id):
        """Sets the widget_id of this V1SensorsHistorySeries.

        V1Sensor ID to query.  # noqa: E501

        :param widget_id: The widget_id of this V1SensorsHistorySeries.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and widget_id is None:  # noqa: E501
            raise ValueError("Invalid value for `widget_id`, must not be `None`")  # noqa: E501

        self._widget_id = widget_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1SensorsHistorySeries):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1SensorsHistorySeries):
            return True

        return self.to_dict() != other.to_dict()
