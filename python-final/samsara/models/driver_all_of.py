# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DriverAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_vehicle': 'object',
        'id': 'str',
        'static_assigned_vehicle': 'object',
        'tags': 'list[AddressAllOfTags]',
        'vehicle_group_tag': 'object'
    }

    attribute_map = {
        'current_vehicle': 'currentVehicle',
        'id': 'id',
        'static_assigned_vehicle': 'staticAssignedVehicle',
        'tags': 'tags',
        'vehicle_group_tag': 'vehicleGroupTag'
    }

    def __init__(self, current_vehicle=None, id=None, static_assigned_vehicle=None, tags=None, vehicle_group_tag=None, local_vars_configuration=None):  # noqa: E501
        """DriverAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._current_vehicle = None
        self._id = None
        self._static_assigned_vehicle = None
        self._tags = None
        self._vehicle_group_tag = None
        self.discriminator = None

        if current_vehicle is not None:
            self.current_vehicle = current_vehicle
        if id is not None:
            self.id = id
        if static_assigned_vehicle is not None:
            self.static_assigned_vehicle = static_assigned_vehicle
        if tags is not None:
            self.tags = tags
        if vehicle_group_tag is not None:
            self.vehicle_group_tag = vehicle_group_tag

    @property
    def current_vehicle(self):
        """Gets the current_vehicle of this DriverAllOf.  # noqa: E501


        :return: The current_vehicle of this DriverAllOf.  # noqa: E501
        :rtype: object
        """
        return self._current_vehicle

    @current_vehicle.setter
    def current_vehicle(self, current_vehicle):
        """Sets the current_vehicle of this DriverAllOf.


        :param current_vehicle: The current_vehicle of this DriverAllOf.  # noqa: E501
        :type: object
        """

        self._current_vehicle = current_vehicle

    @property
    def id(self):
        """Gets the id of this DriverAllOf.  # noqa: E501

        Samsara ID for the driver.  # noqa: E501

        :return: The id of this DriverAllOf.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DriverAllOf.

        Samsara ID for the driver.  # noqa: E501

        :param id: The id of this DriverAllOf.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def static_assigned_vehicle(self):
        """Gets the static_assigned_vehicle of this DriverAllOf.  # noqa: E501


        :return: The static_assigned_vehicle of this DriverAllOf.  # noqa: E501
        :rtype: object
        """
        return self._static_assigned_vehicle

    @static_assigned_vehicle.setter
    def static_assigned_vehicle(self, static_assigned_vehicle):
        """Sets the static_assigned_vehicle of this DriverAllOf.


        :param static_assigned_vehicle: The static_assigned_vehicle of this DriverAllOf.  # noqa: E501
        :type: object
        """

        self._static_assigned_vehicle = static_assigned_vehicle

    @property
    def tags(self):
        """Gets the tags of this DriverAllOf.  # noqa: E501

        The tags this driver belongs to.  # noqa: E501

        :return: The tags of this DriverAllOf.  # noqa: E501
        :rtype: list[AddressAllOfTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DriverAllOf.

        The tags this driver belongs to.  # noqa: E501

        :param tags: The tags of this DriverAllOf.  # noqa: E501
        :type: list[AddressAllOfTags]
        """

        self._tags = tags

    @property
    def vehicle_group_tag(self):
        """Gets the vehicle_group_tag of this DriverAllOf.  # noqa: E501


        :return: The vehicle_group_tag of this DriverAllOf.  # noqa: E501
        :rtype: object
        """
        return self._vehicle_group_tag

    @vehicle_group_tag.setter
    def vehicle_group_tag(self, vehicle_group_tag):
        """Sets the vehicle_group_tag of this DriverAllOf.


        :param vehicle_group_tag: The vehicle_group_tag of this DriverAllOf.  # noqa: E501
        :type: object
        """

        self._vehicle_group_tag = vehicle_group_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriverAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriverAllOf):
            return True

        return self.to_dict() != other.to_dict()
