# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class UserCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth_type': 'str',
        'email': 'str',
        'name': 'str',
        'roles': 'list[UserCreateRoles]'
    }

    attribute_map = {
        'auth_type': 'authType',
        'email': 'email',
        'name': 'name',
        'roles': 'roles'
    }

    def __init__(self, auth_type=None, email=None, name=None, roles=None, local_vars_configuration=None):  # noqa: E501
        """UserCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auth_type = None
        self._email = None
        self._name = None
        self._roles = None
        self.discriminator = None

        self.auth_type = auth_type
        self.email = email
        self.name = name
        self.roles = roles

    @property
    def auth_type(self):
        """Gets the auth_type of this UserCreate.  # noqa: E501

        The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.  # noqa: E501

        :return: The auth_type of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this UserCreate.

        The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.  # noqa: E501

        :param auth_type: The auth_type of this UserCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and auth_type is None:  # noqa: E501
            raise ValueError("Invalid value for `auth_type`, must not be `None`")  # noqa: E501
        allowed_values = ["default", "saml"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and auth_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def email(self):
        """Gets the email of this UserCreate.  # noqa: E501

        The email address of this user. This cannot be changed after creation.  # noqa: E501

        :return: The email of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreate.

        The email address of this user. This cannot be changed after creation.  # noqa: E501

        :param email: The email of this UserCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 191):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `191`")  # noqa: E501

        self._email = email

    @property
    def name(self):
        """Gets the name of this UserCreate.  # noqa: E501

        The first and last name of the user.  # noqa: E501

        :return: The name of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserCreate.

        The first and last name of the user.  # noqa: E501

        :param name: The name of this UserCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this UserCreate.  # noqa: E501

        The roles for this user. Users must have at least a single role to be a part of an organization. Roles without an associated `tagId` are considered \"Organization Level\" roles and will apply to the user at the organization level. Each user can only have one \"Organization Level\" role. Roles with a `tagId` will be roles specific to that tag. Users can only have one role per tag. Users can have different roles at the organization and tag level, and users can have different roles for different tags.  # noqa: E501

        :return: The roles of this UserCreate.  # noqa: E501
        :rtype: list[UserCreateRoles]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserCreate.

        The roles for this user. Users must have at least a single role to be a part of an organization. Roles without an associated `tagId` are considered \"Organization Level\" roles and will apply to the user at the organization level. Each user can only have one \"Organization Level\" role. Roles with a `tagId` will be roles specific to that tag. Users can only have one role per tag. Users can have different roles at the organization and tag level, and users can have different roles for different tags.  # noqa: E501

        :param roles: The roles of this UserCreate.  # noqa: E501
        :type: list[UserCreateRoles]
        """
        if self.local_vars_configuration.client_side_validation and roles is None:  # noqa: E501
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501

        self._roles = roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserCreate):
            return True

        return self.to_dict() != other.to_dict()
