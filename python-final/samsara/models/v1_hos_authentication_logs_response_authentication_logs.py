# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1HosAuthenticationLogsResponseAuthenticationLogs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action_type': 'str',
        'address': 'str',
        'address_name': 'str',
        'city': 'str',
        'happened_at_ms': 'int',
        'state': 'str'
    }

    attribute_map = {
        'action_type': 'actionType',
        'address': 'address',
        'address_name': 'addressName',
        'city': 'city',
        'happened_at_ms': 'happenedAtMs',
        'state': 'state'
    }

    def __init__(self, action_type=None, address=None, address_name=None, city=None, happened_at_ms=None, state=None, local_vars_configuration=None):  # noqa: E501
        """V1HosAuthenticationLogsResponseAuthenticationLogs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action_type = None
        self._address = None
        self._address_name = None
        self._city = None
        self._happened_at_ms = None
        self._state = None
        self.discriminator = None

        if action_type is not None:
            self.action_type = action_type
        if address is not None:
            self.address = address
        if address_name is not None:
            self.address_name = address_name
        if city is not None:
            self.city = city
        if happened_at_ms is not None:
            self.happened_at_ms = happened_at_ms
        if state is not None:
            self.state = state

    @property
    def action_type(self):
        """Gets the action_type of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501

        The log type - one of 'signin' or 'signout'  # noqa: E501

        :return: The action_type of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this V1HosAuthenticationLogsResponseAuthenticationLogs.

        The log type - one of 'signin' or 'signout'  # noqa: E501

        :param action_type: The action_type of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def address(self):
        """Gets the address of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501

        DEPRECATED: THIS FIELD IS NOT POPULATED  # noqa: E501

        :return: The address of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this V1HosAuthenticationLogsResponseAuthenticationLogs.

        DEPRECATED: THIS FIELD IS NOT POPULATED  # noqa: E501

        :param address: The address of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address_name(self):
        """Gets the address_name of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501

        DEPRECATED: THIS FIELD IS NOT POPULATED  # noqa: E501

        :return: The address_name of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :rtype: str
        """
        return self._address_name

    @address_name.setter
    def address_name(self, address_name):
        """Sets the address_name of this V1HosAuthenticationLogsResponseAuthenticationLogs.

        DEPRECATED: THIS FIELD IS NOT POPULATED  # noqa: E501

        :param address_name: The address_name of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :type: str
        """

        self._address_name = address_name

    @property
    def city(self):
        """Gets the city of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501

        DEPRECATED: THIS FIELD IS NOT POPULATED  # noqa: E501

        :return: The city of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this V1HosAuthenticationLogsResponseAuthenticationLogs.

        DEPRECATED: THIS FIELD IS NOT POPULATED  # noqa: E501

        :param city: The city of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def happened_at_ms(self):
        """Gets the happened_at_ms of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501

        The time at which the event was recorded in UNIX milliseconds.  # noqa: E501

        :return: The happened_at_ms of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :rtype: int
        """
        return self._happened_at_ms

    @happened_at_ms.setter
    def happened_at_ms(self, happened_at_ms):
        """Sets the happened_at_ms of this V1HosAuthenticationLogsResponseAuthenticationLogs.

        The time at which the event was recorded in UNIX milliseconds.  # noqa: E501

        :param happened_at_ms: The happened_at_ms of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :type: int
        """

        self._happened_at_ms = happened_at_ms

    @property
    def state(self):
        """Gets the state of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501

        DEPRECATED: THIS FIELD IS NOT POPULATED  # noqa: E501

        :return: The state of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1HosAuthenticationLogsResponseAuthenticationLogs.

        DEPRECATED: THIS FIELD IS NOT POPULATED  # noqa: E501

        :param state: The state of this V1HosAuthenticationLogsResponseAuthenticationLogs.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1HosAuthenticationLogsResponseAuthenticationLogs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1HosAuthenticationLogsResponseAuthenticationLogs):
            return True

        return self.to_dict() != other.to_dict()
