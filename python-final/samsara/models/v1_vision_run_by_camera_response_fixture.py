# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VisionRunByCameraResponseFixture(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'coordinates': 'V1VisionRunByCameraResponseFixtureCoordinates',
        'found': 'bool',
        'rotation_degrees': 'int'
    }

    attribute_map = {
        'coordinates': 'coordinates',
        'found': 'found',
        'rotation_degrees': 'rotationDegrees'
    }

    def __init__(self, coordinates=None, found=None, rotation_degrees=None, local_vars_configuration=None):  # noqa: E501
        """V1VisionRunByCameraResponseFixture - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._coordinates = None
        self._found = None
        self._rotation_degrees = None
        self.discriminator = None

        if coordinates is not None:
            self.coordinates = coordinates
        if found is not None:
            self.found = found
        if rotation_degrees is not None:
            self.rotation_degrees = rotation_degrees

    @property
    def coordinates(self):
        """Gets the coordinates of this V1VisionRunByCameraResponseFixture.  # noqa: E501


        :return: The coordinates of this V1VisionRunByCameraResponseFixture.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseFixtureCoordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this V1VisionRunByCameraResponseFixture.


        :param coordinates: The coordinates of this V1VisionRunByCameraResponseFixture.  # noqa: E501
        :type: V1VisionRunByCameraResponseFixtureCoordinates
        """

        self._coordinates = coordinates

    @property
    def found(self):
        """Gets the found of this V1VisionRunByCameraResponseFixture.  # noqa: E501


        :return: The found of this V1VisionRunByCameraResponseFixture.  # noqa: E501
        :rtype: bool
        """
        return self._found

    @found.setter
    def found(self, found):
        """Sets the found of this V1VisionRunByCameraResponseFixture.


        :param found: The found of this V1VisionRunByCameraResponseFixture.  # noqa: E501
        :type: bool
        """

        self._found = found

    @property
    def rotation_degrees(self):
        """Gets the rotation_degrees of this V1VisionRunByCameraResponseFixture.  # noqa: E501


        :return: The rotation_degrees of this V1VisionRunByCameraResponseFixture.  # noqa: E501
        :rtype: int
        """
        return self._rotation_degrees

    @rotation_degrees.setter
    def rotation_degrees(self, rotation_degrees):
        """Sets the rotation_degrees of this V1VisionRunByCameraResponseFixture.


        :param rotation_degrees: The rotation_degrees of this V1VisionRunByCameraResponseFixture.  # noqa: E501
        :type: int
        """

        self._rotation_degrees = rotation_degrees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VisionRunByCameraResponseFixture):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VisionRunByCameraResponseFixture):
            return True

        return self.to_dict() != other.to_dict()
