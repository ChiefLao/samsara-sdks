# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VisionRunByCameraResponseFindEdge(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'angle_found': 'int',
        'angle_range': 'V1VisionRunByCameraResponseCaliperAngleRange',
        'contrast_percent': 'int',
        'contrast_range': 'V1VisionRunByCameraResponseCaliperContrastRange',
        'filter_polarity': 'str',
        'sharpness_percent': 'int',
        'sharpness_range': 'V1VisionRunByCameraResponseCaliperSharpnessRange',
        'straightness_found': 'int',
        'straightness_range': 'V1VisionRunByCameraResponseCaliperStraightnessRange'
    }

    attribute_map = {
        'angle_found': 'angleFound',
        'angle_range': 'angleRange',
        'contrast_percent': 'contrastPercent',
        'contrast_range': 'contrastRange',
        'filter_polarity': 'filterPolarity',
        'sharpness_percent': 'sharpnessPercent',
        'sharpness_range': 'sharpnessRange',
        'straightness_found': 'straightnessFound',
        'straightness_range': 'straightnessRange'
    }

    def __init__(self, angle_found=None, angle_range=None, contrast_percent=None, contrast_range=None, filter_polarity=None, sharpness_percent=None, sharpness_range=None, straightness_found=None, straightness_range=None, local_vars_configuration=None):  # noqa: E501
        """V1VisionRunByCameraResponseFindEdge - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._angle_found = None
        self._angle_range = None
        self._contrast_percent = None
        self._contrast_range = None
        self._filter_polarity = None
        self._sharpness_percent = None
        self._sharpness_range = None
        self._straightness_found = None
        self._straightness_range = None
        self.discriminator = None

        if angle_found is not None:
            self.angle_found = angle_found
        if angle_range is not None:
            self.angle_range = angle_range
        if contrast_percent is not None:
            self.contrast_percent = contrast_percent
        if contrast_range is not None:
            self.contrast_range = contrast_range
        if filter_polarity is not None:
            self.filter_polarity = filter_polarity
        if sharpness_percent is not None:
            self.sharpness_percent = sharpness_percent
        if sharpness_range is not None:
            self.sharpness_range = sharpness_range
        if straightness_found is not None:
            self.straightness_found = straightness_found
        if straightness_range is not None:
            self.straightness_range = straightness_range

    @property
    def angle_found(self):
        """Gets the angle_found of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501

        The detected angle in degrees  # noqa: E501

        :return: The angle_found of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :rtype: int
        """
        return self._angle_found

    @angle_found.setter
    def angle_found(self, angle_found):
        """Sets the angle_found of this V1VisionRunByCameraResponseFindEdge.

        The detected angle in degrees  # noqa: E501

        :param angle_found: The angle_found of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :type: int
        """

        self._angle_found = angle_found

    @property
    def angle_range(self):
        """Gets the angle_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501


        :return: The angle_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseCaliperAngleRange
        """
        return self._angle_range

    @angle_range.setter
    def angle_range(self, angle_range):
        """Sets the angle_range of this V1VisionRunByCameraResponseFindEdge.


        :param angle_range: The angle_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :type: V1VisionRunByCameraResponseCaliperAngleRange
        """

        self._angle_range = angle_range

    @property
    def contrast_percent(self):
        """Gets the contrast_percent of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501

        The detected contrast percentage  # noqa: E501

        :return: The contrast_percent of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :rtype: int
        """
        return self._contrast_percent

    @contrast_percent.setter
    def contrast_percent(self, contrast_percent):
        """Sets the contrast_percent of this V1VisionRunByCameraResponseFindEdge.

        The detected contrast percentage  # noqa: E501

        :param contrast_percent: The contrast_percent of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :type: int
        """

        self._contrast_percent = contrast_percent

    @property
    def contrast_range(self):
        """Gets the contrast_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501


        :return: The contrast_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseCaliperContrastRange
        """
        return self._contrast_range

    @contrast_range.setter
    def contrast_range(self, contrast_range):
        """Sets the contrast_range of this V1VisionRunByCameraResponseFindEdge.


        :param contrast_range: The contrast_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :type: V1VisionRunByCameraResponseCaliperContrastRange
        """

        self._contrast_range = contrast_range

    @property
    def filter_polarity(self):
        """Gets the filter_polarity of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501

        The configured polarity for finding edges  # noqa: E501

        :return: The filter_polarity of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :rtype: str
        """
        return self._filter_polarity

    @filter_polarity.setter
    def filter_polarity(self, filter_polarity):
        """Sets the filter_polarity of this V1VisionRunByCameraResponseFindEdge.

        The configured polarity for finding edges  # noqa: E501

        :param filter_polarity: The filter_polarity of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :type: str
        """

        self._filter_polarity = filter_polarity

    @property
    def sharpness_percent(self):
        """Gets the sharpness_percent of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501

        The detected sharpness percentage  # noqa: E501

        :return: The sharpness_percent of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :rtype: int
        """
        return self._sharpness_percent

    @sharpness_percent.setter
    def sharpness_percent(self, sharpness_percent):
        """Sets the sharpness_percent of this V1VisionRunByCameraResponseFindEdge.

        The detected sharpness percentage  # noqa: E501

        :param sharpness_percent: The sharpness_percent of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :type: int
        """

        self._sharpness_percent = sharpness_percent

    @property
    def sharpness_range(self):
        """Gets the sharpness_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501


        :return: The sharpness_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseCaliperSharpnessRange
        """
        return self._sharpness_range

    @sharpness_range.setter
    def sharpness_range(self, sharpness_range):
        """Sets the sharpness_range of this V1VisionRunByCameraResponseFindEdge.


        :param sharpness_range: The sharpness_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :type: V1VisionRunByCameraResponseCaliperSharpnessRange
        """

        self._sharpness_range = sharpness_range

    @property
    def straightness_found(self):
        """Gets the straightness_found of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501

        The detected straightness percentage  # noqa: E501

        :return: The straightness_found of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :rtype: int
        """
        return self._straightness_found

    @straightness_found.setter
    def straightness_found(self, straightness_found):
        """Sets the straightness_found of this V1VisionRunByCameraResponseFindEdge.

        The detected straightness percentage  # noqa: E501

        :param straightness_found: The straightness_found of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :type: int
        """

        self._straightness_found = straightness_found

    @property
    def straightness_range(self):
        """Gets the straightness_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501


        :return: The straightness_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseCaliperStraightnessRange
        """
        return self._straightness_range

    @straightness_range.setter
    def straightness_range(self, straightness_range):
        """Sets the straightness_range of this V1VisionRunByCameraResponseFindEdge.


        :param straightness_range: The straightness_range of this V1VisionRunByCameraResponseFindEdge.  # noqa: E501
        :type: V1VisionRunByCameraResponseCaliperStraightnessRange
        """

        self._straightness_range = straightness_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VisionRunByCameraResponseFindEdge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VisionRunByCameraResponseFindEdge):
            return True

        return self.to_dict() != other.to_dict()
