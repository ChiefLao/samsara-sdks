# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VisionRunByCameraResponseDistance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'distance_found': 'int',
        'end_step_name': 'str',
        'enforce_offset_angle_range': 'bool',
        'max_distance': 'int',
        'max_offset_angle': 'int',
        'min_distance': 'int',
        'min_offset_angle': 'int',
        'offset_angle_found': 'int',
        'start_step_name': 'str',
        'unit': 'str'
    }

    attribute_map = {
        'distance_found': 'distanceFound',
        'end_step_name': 'endStepName',
        'enforce_offset_angle_range': 'enforceOffsetAngleRange',
        'max_distance': 'maxDistance',
        'max_offset_angle': 'maxOffsetAngle',
        'min_distance': 'minDistance',
        'min_offset_angle': 'minOffsetAngle',
        'offset_angle_found': 'offsetAngleFound',
        'start_step_name': 'startStepName',
        'unit': 'unit'
    }

    def __init__(self, distance_found=None, end_step_name=None, enforce_offset_angle_range=None, max_distance=None, max_offset_angle=None, min_distance=None, min_offset_angle=None, offset_angle_found=None, start_step_name=None, unit=None, local_vars_configuration=None):  # noqa: E501
        """V1VisionRunByCameraResponseDistance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._distance_found = None
        self._end_step_name = None
        self._enforce_offset_angle_range = None
        self._max_distance = None
        self._max_offset_angle = None
        self._min_distance = None
        self._min_offset_angle = None
        self._offset_angle_found = None
        self._start_step_name = None
        self._unit = None
        self.discriminator = None

        if distance_found is not None:
            self.distance_found = distance_found
        if end_step_name is not None:
            self.end_step_name = end_step_name
        if enforce_offset_angle_range is not None:
            self.enforce_offset_angle_range = enforce_offset_angle_range
        if max_distance is not None:
            self.max_distance = max_distance
        if max_offset_angle is not None:
            self.max_offset_angle = max_offset_angle
        if min_distance is not None:
            self.min_distance = min_distance
        if min_offset_angle is not None:
            self.min_offset_angle = min_offset_angle
        if offset_angle_found is not None:
            self.offset_angle_found = offset_angle_found
        if start_step_name is not None:
            self.start_step_name = start_step_name
        if unit is not None:
            self.unit = unit

    @property
    def distance_found(self):
        """Gets the distance_found of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        The distance found between the start and end references  # noqa: E501

        :return: The distance_found of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: int
        """
        return self._distance_found

    @distance_found.setter
    def distance_found(self, distance_found):
        """Sets the distance_found of this V1VisionRunByCameraResponseDistance.

        The distance found between the start and end references  # noqa: E501

        :param distance_found: The distance_found of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: int
        """

        self._distance_found = distance_found

    @property
    def end_step_name(self):
        """Gets the end_step_name of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        The name of the second reference step that we're checking the distances between  # noqa: E501

        :return: The end_step_name of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: str
        """
        return self._end_step_name

    @end_step_name.setter
    def end_step_name(self, end_step_name):
        """Sets the end_step_name of this V1VisionRunByCameraResponseDistance.

        The name of the second reference step that we're checking the distances between  # noqa: E501

        :param end_step_name: The end_step_name of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: str
        """

        self._end_step_name = end_step_name

    @property
    def enforce_offset_angle_range(self):
        """Gets the enforce_offset_angle_range of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        Whether an offset angle range is enforced  # noqa: E501

        :return: The enforce_offset_angle_range of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_offset_angle_range

    @enforce_offset_angle_range.setter
    def enforce_offset_angle_range(self, enforce_offset_angle_range):
        """Sets the enforce_offset_angle_range of this V1VisionRunByCameraResponseDistance.

        Whether an offset angle range is enforced  # noqa: E501

        :param enforce_offset_angle_range: The enforce_offset_angle_range of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: bool
        """

        self._enforce_offset_angle_range = enforce_offset_angle_range

    @property
    def max_distance(self):
        """Gets the max_distance of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        The maximum allowed distance threshold  # noqa: E501

        :return: The max_distance of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: int
        """
        return self._max_distance

    @max_distance.setter
    def max_distance(self, max_distance):
        """Sets the max_distance of this V1VisionRunByCameraResponseDistance.

        The maximum allowed distance threshold  # noqa: E501

        :param max_distance: The max_distance of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: int
        """

        self._max_distance = max_distance

    @property
    def max_offset_angle(self):
        """Gets the max_offset_angle of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        The maximum angle allowance (in degrees) if enforceOffsetAngleRange is true  # noqa: E501

        :return: The max_offset_angle of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: int
        """
        return self._max_offset_angle

    @max_offset_angle.setter
    def max_offset_angle(self, max_offset_angle):
        """Sets the max_offset_angle of this V1VisionRunByCameraResponseDistance.

        The maximum angle allowance (in degrees) if enforceOffsetAngleRange is true  # noqa: E501

        :param max_offset_angle: The max_offset_angle of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: int
        """

        self._max_offset_angle = max_offset_angle

    @property
    def min_distance(self):
        """Gets the min_distance of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        The minumum allowed distance threshold  # noqa: E501

        :return: The min_distance of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: int
        """
        return self._min_distance

    @min_distance.setter
    def min_distance(self, min_distance):
        """Sets the min_distance of this V1VisionRunByCameraResponseDistance.

        The minumum allowed distance threshold  # noqa: E501

        :param min_distance: The min_distance of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: int
        """

        self._min_distance = min_distance

    @property
    def min_offset_angle(self):
        """Gets the min_offset_angle of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        The minimum angle allowance (in degrees) if enforceOffsetAngleRange is true  # noqa: E501

        :return: The min_offset_angle of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: int
        """
        return self._min_offset_angle

    @min_offset_angle.setter
    def min_offset_angle(self, min_offset_angle):
        """Sets the min_offset_angle of this V1VisionRunByCameraResponseDistance.

        The minimum angle allowance (in degrees) if enforceOffsetAngleRange is true  # noqa: E501

        :param min_offset_angle: The min_offset_angle of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: int
        """

        self._min_offset_angle = min_offset_angle

    @property
    def offset_angle_found(self):
        """Gets the offset_angle_found of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        The counter-clockwise angle (in degrees) found between the horizontal axis of the start reference step and the last  # noqa: E501

        :return: The offset_angle_found of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: int
        """
        return self._offset_angle_found

    @offset_angle_found.setter
    def offset_angle_found(self, offset_angle_found):
        """Sets the offset_angle_found of this V1VisionRunByCameraResponseDistance.

        The counter-clockwise angle (in degrees) found between the horizontal axis of the start reference step and the last  # noqa: E501

        :param offset_angle_found: The offset_angle_found of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: int
        """

        self._offset_angle_found = offset_angle_found

    @property
    def start_step_name(self):
        """Gets the start_step_name of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        The name of the first reference step that we're checking the distances between  # noqa: E501

        :return: The start_step_name of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: str
        """
        return self._start_step_name

    @start_step_name.setter
    def start_step_name(self, start_step_name):
        """Sets the start_step_name of this V1VisionRunByCameraResponseDistance.

        The name of the first reference step that we're checking the distances between  # noqa: E501

        :param start_step_name: The start_step_name of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: str
        """

        self._start_step_name = start_step_name

    @property
    def unit(self):
        """Gets the unit of this V1VisionRunByCameraResponseDistance.  # noqa: E501

        The measurement unit of the distance found and the min and max distance threshold  # noqa: E501

        :return: The unit of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this V1VisionRunByCameraResponseDistance.

        The measurement unit of the distance found and the min and max distance threshold  # noqa: E501

        :param unit: The unit of this V1VisionRunByCameraResponseDistance.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VisionRunByCameraResponseDistance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VisionRunByCameraResponseDistance):
            return True

        return self.to_dict() != other.to_dict()
