# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VisionRunByCameraResponseFindCopies(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'angle_tolerance': 'int',
        'found_count': 'int',
        'max_count': 'int',
        'min_count': 'int',
        'threshold': 'int'
    }

    attribute_map = {
        'angle_tolerance': 'angleTolerance',
        'found_count': 'foundCount',
        'max_count': 'maxCount',
        'min_count': 'minCount',
        'threshold': 'threshold'
    }

    def __init__(self, angle_tolerance=None, found_count=None, max_count=None, min_count=None, threshold=None, local_vars_configuration=None):  # noqa: E501
        """V1VisionRunByCameraResponseFindCopies - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._angle_tolerance = None
        self._found_count = None
        self._max_count = None
        self._min_count = None
        self._threshold = None
        self.discriminator = None

        if angle_tolerance is not None:
            self.angle_tolerance = angle_tolerance
        if found_count is not None:
            self.found_count = found_count
        if max_count is not None:
            self.max_count = max_count
        if min_count is not None:
            self.min_count = min_count
        if threshold is not None:
            self.threshold = threshold

    @property
    def angle_tolerance(self):
        """Gets the angle_tolerance of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501

        The orientation angle tolerance (+/- °)  # noqa: E501

        :return: The angle_tolerance of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :rtype: int
        """
        return self._angle_tolerance

    @angle_tolerance.setter
    def angle_tolerance(self, angle_tolerance):
        """Sets the angle_tolerance of this V1VisionRunByCameraResponseFindCopies.

        The orientation angle tolerance (+/- °)  # noqa: E501

        :param angle_tolerance: The angle_tolerance of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :type: int
        """

        self._angle_tolerance = angle_tolerance

    @property
    def found_count(self):
        """Gets the found_count of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501

        The number of copies found  # noqa: E501

        :return: The found_count of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :rtype: int
        """
        return self._found_count

    @found_count.setter
    def found_count(self, found_count):
        """Sets the found_count of this V1VisionRunByCameraResponseFindCopies.

        The number of copies found  # noqa: E501

        :param found_count: The found_count of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :type: int
        """

        self._found_count = found_count

    @property
    def max_count(self):
        """Gets the max_count of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501

        The maximum number of copies allowed  # noqa: E501

        :return: The max_count of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this V1VisionRunByCameraResponseFindCopies.

        The maximum number of copies allowed  # noqa: E501

        :param max_count: The max_count of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :type: int
        """

        self._max_count = max_count

    @property
    def min_count(self):
        """Gets the min_count of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501

        The minimum number of copies allowed  # noqa: E501

        :return: The min_count of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :rtype: int
        """
        return self._min_count

    @min_count.setter
    def min_count(self, min_count):
        """Sets the min_count of this V1VisionRunByCameraResponseFindCopies.

        The minimum number of copies allowed  # noqa: E501

        :param min_count: The min_count of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :type: int
        """

        self._min_count = min_count

    @property
    def threshold(self):
        """Gets the threshold of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501

        The minimum required similarity (in %) of a found copy compared to the configured match region  # noqa: E501

        :return: The threshold of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this V1VisionRunByCameraResponseFindCopies.

        The minimum required similarity (in %) of a found copy compared to the configured match region  # noqa: E501

        :param threshold: The threshold of this V1VisionRunByCameraResponseFindCopies.  # noqa: E501
        :type: int
        """

        self._threshold = threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VisionRunByCameraResponseFindCopies):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VisionRunByCameraResponseFindCopies):
            return True

        return self.to_dict() != other.to_dict()
