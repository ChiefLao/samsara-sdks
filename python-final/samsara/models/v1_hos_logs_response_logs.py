# coding: utf-8

"""
    Samsara API

    <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).   # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1HosLogsResponseLogs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'codriver_ids': 'list[float]',
        'driver_id': 'int',
        'group_id': 'int',
        'hos_status_type': 'str',
        'loc_city': 'str',
        'loc_lat': 'float',
        'loc_lng': 'float',
        'loc_name': 'str',
        'loc_state': 'str',
        'log_start_ms': 'int',
        'remark': 'str',
        'vehicle_id': 'int'
    }

    attribute_map = {
        'codriver_ids': 'codriverIds',
        'driver_id': 'driverId',
        'group_id': 'groupId',
        'hos_status_type': 'hosStatusType',
        'loc_city': 'locCity',
        'loc_lat': 'locLat',
        'loc_lng': 'locLng',
        'loc_name': 'locName',
        'loc_state': 'locState',
        'log_start_ms': 'logStartMs',
        'remark': 'remark',
        'vehicle_id': 'vehicleId'
    }

    def __init__(self, codriver_ids=None, driver_id=None, group_id=None, hos_status_type=None, loc_city=None, loc_lat=None, loc_lng=None, loc_name=None, loc_state=None, log_start_ms=None, remark=None, vehicle_id=None, local_vars_configuration=None):  # noqa: E501
        """V1HosLogsResponseLogs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._codriver_ids = None
        self._driver_id = None
        self._group_id = None
        self._hos_status_type = None
        self._loc_city = None
        self._loc_lat = None
        self._loc_lng = None
        self._loc_name = None
        self._loc_state = None
        self._log_start_ms = None
        self._remark = None
        self._vehicle_id = None
        self.discriminator = None

        if codriver_ids is not None:
            self.codriver_ids = codriver_ids
        if driver_id is not None:
            self.driver_id = driver_id
        if group_id is not None:
            self.group_id = group_id
        if hos_status_type is not None:
            self.hos_status_type = hos_status_type
        if loc_city is not None:
            self.loc_city = loc_city
        if loc_lat is not None:
            self.loc_lat = loc_lat
        if loc_lng is not None:
            self.loc_lng = loc_lng
        if loc_name is not None:
            self.loc_name = loc_name
        if loc_state is not None:
            self.loc_state = loc_state
        if log_start_ms is not None:
            self.log_start_ms = log_start_ms
        if remark is not None:
            self.remark = remark
        if vehicle_id is not None:
            self.vehicle_id = vehicle_id

    @property
    def codriver_ids(self):
        """Gets the codriver_ids of this V1HosLogsResponseLogs.  # noqa: E501


        :return: The codriver_ids of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: list[float]
        """
        return self._codriver_ids

    @codriver_ids.setter
    def codriver_ids(self, codriver_ids):
        """Sets the codriver_ids of this V1HosLogsResponseLogs.


        :param codriver_ids: The codriver_ids of this V1HosLogsResponseLogs.  # noqa: E501
        :type: list[float]
        """

        self._codriver_ids = codriver_ids

    @property
    def driver_id(self):
        """Gets the driver_id of this V1HosLogsResponseLogs.  # noqa: E501

        ID of the driver.  # noqa: E501

        :return: The driver_id of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this V1HosLogsResponseLogs.

        ID of the driver.  # noqa: E501

        :param driver_id: The driver_id of this V1HosLogsResponseLogs.  # noqa: E501
        :type: int
        """

        self._driver_id = driver_id

    @property
    def group_id(self):
        """Gets the group_id of this V1HosLogsResponseLogs.  # noqa: E501

        Deprecated.  # noqa: E501

        :return: The group_id of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this V1HosLogsResponseLogs.

        Deprecated.  # noqa: E501

        :param group_id: The group_id of this V1HosLogsResponseLogs.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def hos_status_type(self):
        """Gets the hos_status_type of this V1HosLogsResponseLogs.  # noqa: E501

        The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.  # noqa: E501

        :return: The hos_status_type of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: str
        """
        return self._hos_status_type

    @hos_status_type.setter
    def hos_status_type(self, hos_status_type):
        """Sets the hos_status_type of this V1HosLogsResponseLogs.

        The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.  # noqa: E501

        :param hos_status_type: The hos_status_type of this V1HosLogsResponseLogs.  # noqa: E501
        :type: str
        """

        self._hos_status_type = hos_status_type

    @property
    def loc_city(self):
        """Gets the loc_city of this V1HosLogsResponseLogs.  # noqa: E501

        City in which the log was recorded.  # noqa: E501

        :return: The loc_city of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: str
        """
        return self._loc_city

    @loc_city.setter
    def loc_city(self, loc_city):
        """Sets the loc_city of this V1HosLogsResponseLogs.

        City in which the log was recorded.  # noqa: E501

        :param loc_city: The loc_city of this V1HosLogsResponseLogs.  # noqa: E501
        :type: str
        """

        self._loc_city = loc_city

    @property
    def loc_lat(self):
        """Gets the loc_lat of this V1HosLogsResponseLogs.  # noqa: E501

        Latitude at which the log was recorded.  # noqa: E501

        :return: The loc_lat of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: float
        """
        return self._loc_lat

    @loc_lat.setter
    def loc_lat(self, loc_lat):
        """Sets the loc_lat of this V1HosLogsResponseLogs.

        Latitude at which the log was recorded.  # noqa: E501

        :param loc_lat: The loc_lat of this V1HosLogsResponseLogs.  # noqa: E501
        :type: float
        """

        self._loc_lat = loc_lat

    @property
    def loc_lng(self):
        """Gets the loc_lng of this V1HosLogsResponseLogs.  # noqa: E501

        Longitude at which the log was recorded.  # noqa: E501

        :return: The loc_lng of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: float
        """
        return self._loc_lng

    @loc_lng.setter
    def loc_lng(self, loc_lng):
        """Sets the loc_lng of this V1HosLogsResponseLogs.

        Longitude at which the log was recorded.  # noqa: E501

        :param loc_lng: The loc_lng of this V1HosLogsResponseLogs.  # noqa: E501
        :type: float
        """

        self._loc_lng = loc_lng

    @property
    def loc_name(self):
        """Gets the loc_name of this V1HosLogsResponseLogs.  # noqa: E501

        Name of location at which the log was recorded.  # noqa: E501

        :return: The loc_name of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: str
        """
        return self._loc_name

    @loc_name.setter
    def loc_name(self, loc_name):
        """Sets the loc_name of this V1HosLogsResponseLogs.

        Name of location at which the log was recorded.  # noqa: E501

        :param loc_name: The loc_name of this V1HosLogsResponseLogs.  # noqa: E501
        :type: str
        """

        self._loc_name = loc_name

    @property
    def loc_state(self):
        """Gets the loc_state of this V1HosLogsResponseLogs.  # noqa: E501

        State in which the log was recorded.  # noqa: E501

        :return: The loc_state of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: str
        """
        return self._loc_state

    @loc_state.setter
    def loc_state(self, loc_state):
        """Sets the loc_state of this V1HosLogsResponseLogs.

        State in which the log was recorded.  # noqa: E501

        :param loc_state: The loc_state of this V1HosLogsResponseLogs.  # noqa: E501
        :type: str
        """

        self._loc_state = loc_state

    @property
    def log_start_ms(self):
        """Gets the log_start_ms of this V1HosLogsResponseLogs.  # noqa: E501

        The time at which the log/HOS status started in UNIX milliseconds.  # noqa: E501

        :return: The log_start_ms of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: int
        """
        return self._log_start_ms

    @log_start_ms.setter
    def log_start_ms(self, log_start_ms):
        """Sets the log_start_ms of this V1HosLogsResponseLogs.

        The time at which the log/HOS status started in UNIX milliseconds.  # noqa: E501

        :param log_start_ms: The log_start_ms of this V1HosLogsResponseLogs.  # noqa: E501
        :type: int
        """

        self._log_start_ms = log_start_ms

    @property
    def remark(self):
        """Gets the remark of this V1HosLogsResponseLogs.  # noqa: E501

        Remark associated with the log entry.  # noqa: E501

        :return: The remark of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this V1HosLogsResponseLogs.

        Remark associated with the log entry.  # noqa: E501

        :param remark: The remark of this V1HosLogsResponseLogs.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this V1HosLogsResponseLogs.  # noqa: E501

        ID of the vehicle.  # noqa: E501

        :return: The vehicle_id of this V1HosLogsResponseLogs.  # noqa: E501
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this V1HosLogsResponseLogs.

        ID of the vehicle.  # noqa: E501

        :param vehicle_id: The vehicle_id of this V1HosLogsResponseLogs.  # noqa: E501
        :type: int
        """

        self._vehicle_id = vehicle_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1HosLogsResponseLogs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1HosLogsResponseLogs):
            return True

        return self.to_dict() != other.to_dict()
