# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VisionRunByCameraResponseRunSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'items_per_minute': 'float',
        'no_read_count': 'int',
        'reject_count': 'int',
        'success_count': 'int'
    }

    attribute_map = {
        'items_per_minute': 'itemsPerMinute',
        'no_read_count': 'noReadCount',
        'reject_count': 'rejectCount',
        'success_count': 'successCount'
    }

    def __init__(self, items_per_minute=None, no_read_count=None, reject_count=None, success_count=None, local_vars_configuration=None):  # noqa: E501
        """V1VisionRunByCameraResponseRunSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._items_per_minute = None
        self._no_read_count = None
        self._reject_count = None
        self._success_count = None
        self.discriminator = None

        if items_per_minute is not None:
            self.items_per_minute = items_per_minute
        if no_read_count is not None:
            self.no_read_count = no_read_count
        if reject_count is not None:
            self.reject_count = reject_count
        if success_count is not None:
            self.success_count = success_count

    @property
    def items_per_minute(self):
        """Gets the items_per_minute of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501


        :return: The items_per_minute of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501
        :rtype: float
        """
        return self._items_per_minute

    @items_per_minute.setter
    def items_per_minute(self, items_per_minute):
        """Sets the items_per_minute of this V1VisionRunByCameraResponseRunSummary.


        :param items_per_minute: The items_per_minute of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501
        :type: float
        """

        self._items_per_minute = items_per_minute

    @property
    def no_read_count(self):
        """Gets the no_read_count of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501


        :return: The no_read_count of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._no_read_count

    @no_read_count.setter
    def no_read_count(self, no_read_count):
        """Sets the no_read_count of this V1VisionRunByCameraResponseRunSummary.


        :param no_read_count: The no_read_count of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501
        :type: int
        """

        self._no_read_count = no_read_count

    @property
    def reject_count(self):
        """Gets the reject_count of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501


        :return: The reject_count of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._reject_count

    @reject_count.setter
    def reject_count(self, reject_count):
        """Sets the reject_count of this V1VisionRunByCameraResponseRunSummary.


        :param reject_count: The reject_count of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501
        :type: int
        """

        self._reject_count = reject_count

    @property
    def success_count(self):
        """Gets the success_count of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501


        :return: The success_count of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this V1VisionRunByCameraResponseRunSummary.


        :param success_count: The success_count of this V1VisionRunByCameraResponseRunSummary.  # noqa: E501
        :type: int
        """

        self._success_count = success_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VisionRunByCameraResponseRunSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VisionRunByCameraResponseRunSummary):
            return True

        return self.to_dict() != other.to_dict()
