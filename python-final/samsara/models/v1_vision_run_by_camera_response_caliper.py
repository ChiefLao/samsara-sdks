# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VisionRunByCameraResponseCaliper(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'angle_range': 'V1VisionRunByCameraResponseCaliperAngleRange',
        'contrast_range': 'V1VisionRunByCameraResponseCaliperContrastRange',
        'distance_found': 'float',
        'filter_polarity': 'str',
        'max_distance': 'float',
        'min_distance': 'float',
        'sharpness_range': 'V1VisionRunByCameraResponseCaliperSharpnessRange',
        'straightness_range': 'V1VisionRunByCameraResponseCaliperStraightnessRange',
        'unit': 'str'
    }

    attribute_map = {
        'angle_range': 'angleRange',
        'contrast_range': 'contrastRange',
        'distance_found': 'distanceFound',
        'filter_polarity': 'filterPolarity',
        'max_distance': 'maxDistance',
        'min_distance': 'minDistance',
        'sharpness_range': 'sharpnessRange',
        'straightness_range': 'straightnessRange',
        'unit': 'unit'
    }

    def __init__(self, angle_range=None, contrast_range=None, distance_found=None, filter_polarity='LIGHT TO DARK', max_distance=None, min_distance=None, sharpness_range=None, straightness_range=None, unit=None, local_vars_configuration=None):  # noqa: E501
        """V1VisionRunByCameraResponseCaliper - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._angle_range = None
        self._contrast_range = None
        self._distance_found = None
        self._filter_polarity = None
        self._max_distance = None
        self._min_distance = None
        self._sharpness_range = None
        self._straightness_range = None
        self._unit = None
        self.discriminator = None

        if angle_range is not None:
            self.angle_range = angle_range
        if contrast_range is not None:
            self.contrast_range = contrast_range
        if distance_found is not None:
            self.distance_found = distance_found
        if filter_polarity is not None:
            self.filter_polarity = filter_polarity
        if max_distance is not None:
            self.max_distance = max_distance
        if min_distance is not None:
            self.min_distance = min_distance
        if sharpness_range is not None:
            self.sharpness_range = sharpness_range
        if straightness_range is not None:
            self.straightness_range = straightness_range
        if unit is not None:
            self.unit = unit

    @property
    def angle_range(self):
        """Gets the angle_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501


        :return: The angle_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseCaliperAngleRange
        """
        return self._angle_range

    @angle_range.setter
    def angle_range(self, angle_range):
        """Sets the angle_range of this V1VisionRunByCameraResponseCaliper.


        :param angle_range: The angle_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :type: V1VisionRunByCameraResponseCaliperAngleRange
        """

        self._angle_range = angle_range

    @property
    def contrast_range(self):
        """Gets the contrast_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501


        :return: The contrast_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseCaliperContrastRange
        """
        return self._contrast_range

    @contrast_range.setter
    def contrast_range(self, contrast_range):
        """Sets the contrast_range of this V1VisionRunByCameraResponseCaliper.


        :param contrast_range: The contrast_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :type: V1VisionRunByCameraResponseCaliperContrastRange
        """

        self._contrast_range = contrast_range

    @property
    def distance_found(self):
        """Gets the distance_found of this V1VisionRunByCameraResponseCaliper.  # noqa: E501

        The distance found between the found edges  # noqa: E501

        :return: The distance_found of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :rtype: float
        """
        return self._distance_found

    @distance_found.setter
    def distance_found(self, distance_found):
        """Sets the distance_found of this V1VisionRunByCameraResponseCaliper.

        The distance found between the found edges  # noqa: E501

        :param distance_found: The distance_found of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :type: float
        """

        self._distance_found = distance_found

    @property
    def filter_polarity(self):
        """Gets the filter_polarity of this V1VisionRunByCameraResponseCaliper.  # noqa: E501

        The configured polarity for finding edges  # noqa: E501

        :return: The filter_polarity of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :rtype: str
        """
        return self._filter_polarity

    @filter_polarity.setter
    def filter_polarity(self, filter_polarity):
        """Sets the filter_polarity of this V1VisionRunByCameraResponseCaliper.

        The configured polarity for finding edges  # noqa: E501

        :param filter_polarity: The filter_polarity of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :type: str
        """
        allowed_values = ["LIGHT TO DARK", "DARK TO LIGHT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and filter_polarity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `filter_polarity` ({0}), must be one of {1}"  # noqa: E501
                .format(filter_polarity, allowed_values)
            )

        self._filter_polarity = filter_polarity

    @property
    def max_distance(self):
        """Gets the max_distance of this V1VisionRunByCameraResponseCaliper.  # noqa: E501

        The maximum allowed distance threshold  # noqa: E501

        :return: The max_distance of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :rtype: float
        """
        return self._max_distance

    @max_distance.setter
    def max_distance(self, max_distance):
        """Sets the max_distance of this V1VisionRunByCameraResponseCaliper.

        The maximum allowed distance threshold  # noqa: E501

        :param max_distance: The max_distance of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :type: float
        """

        self._max_distance = max_distance

    @property
    def min_distance(self):
        """Gets the min_distance of this V1VisionRunByCameraResponseCaliper.  # noqa: E501

        The minumum allowed distance threshold  # noqa: E501

        :return: The min_distance of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :rtype: float
        """
        return self._min_distance

    @min_distance.setter
    def min_distance(self, min_distance):
        """Sets the min_distance of this V1VisionRunByCameraResponseCaliper.

        The minumum allowed distance threshold  # noqa: E501

        :param min_distance: The min_distance of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :type: float
        """

        self._min_distance = min_distance

    @property
    def sharpness_range(self):
        """Gets the sharpness_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501


        :return: The sharpness_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseCaliperSharpnessRange
        """
        return self._sharpness_range

    @sharpness_range.setter
    def sharpness_range(self, sharpness_range):
        """Sets the sharpness_range of this V1VisionRunByCameraResponseCaliper.


        :param sharpness_range: The sharpness_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :type: V1VisionRunByCameraResponseCaliperSharpnessRange
        """

        self._sharpness_range = sharpness_range

    @property
    def straightness_range(self):
        """Gets the straightness_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501


        :return: The straightness_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseCaliperStraightnessRange
        """
        return self._straightness_range

    @straightness_range.setter
    def straightness_range(self, straightness_range):
        """Sets the straightness_range of this V1VisionRunByCameraResponseCaliper.


        :param straightness_range: The straightness_range of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :type: V1VisionRunByCameraResponseCaliperStraightnessRange
        """

        self._straightness_range = straightness_range

    @property
    def unit(self):
        """Gets the unit of this V1VisionRunByCameraResponseCaliper.  # noqa: E501

        The measurement unit of the distance found and the min and max distance threshold  # noqa: E501

        :return: The unit of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this V1VisionRunByCameraResponseCaliper.

        The measurement unit of the distance found and the min and max distance threshold  # noqa: E501

        :param unit: The unit of this V1VisionRunByCameraResponseCaliper.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VisionRunByCameraResponseCaliper):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VisionRunByCameraResponseCaliper):
            return True

        return self.to_dict() != other.to_dict()
