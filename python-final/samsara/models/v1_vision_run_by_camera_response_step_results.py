# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VisionRunByCameraResponseStepResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'angle_check': 'V1VisionRunByCameraResponseAngleCheck',
        'barcode': 'list[V1VisionRunByCameraResponseBarcode]',
        'boolean_logic': 'V1VisionRunByCameraResponseBooleanLogic',
        'caliper': 'V1VisionRunByCameraResponseCaliper',
        'contour': 'V1VisionRunByCameraResponseContour',
        'distance': 'V1VisionRunByCameraResponseDistance',
        'expiration_date': 'V1VisionRunByCameraResponseExpirationDate',
        'find_copies': 'V1VisionRunByCameraResponseFindCopies',
        'find_edge': 'V1VisionRunByCameraResponseFindEdge',
        'find_shapes': 'V1VisionRunByCameraResponseFindShapes',
        'fixture': 'V1VisionRunByCameraResponseFixture',
        'label_match': 'V1VisionRunByCameraResponseLabelMatch',
        'name': 'str',
        'presence_absence': 'V1VisionRunByCameraResponsePresenceAbsence',
        'result': 'str',
        'text_match': 'V1VisionRunByCameraResponseTextMatch'
    }

    attribute_map = {
        'angle_check': 'angleCheck',
        'barcode': 'barcode',
        'boolean_logic': 'booleanLogic',
        'caliper': 'caliper',
        'contour': 'contour',
        'distance': 'distance',
        'expiration_date': 'expirationDate',
        'find_copies': 'findCopies',
        'find_edge': 'findEdge',
        'find_shapes': 'findShapes',
        'fixture': 'fixture',
        'label_match': 'labelMatch',
        'name': 'name',
        'presence_absence': 'presenceAbsence',
        'result': 'result',
        'text_match': 'textMatch'
    }

    def __init__(self, angle_check=None, barcode=None, boolean_logic=None, caliper=None, contour=None, distance=None, expiration_date=None, find_copies=None, find_edge=None, find_shapes=None, fixture=None, label_match=None, name=None, presence_absence=None, result=None, text_match=None, local_vars_configuration=None):  # noqa: E501
        """V1VisionRunByCameraResponseStepResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._angle_check = None
        self._barcode = None
        self._boolean_logic = None
        self._caliper = None
        self._contour = None
        self._distance = None
        self._expiration_date = None
        self._find_copies = None
        self._find_edge = None
        self._find_shapes = None
        self._fixture = None
        self._label_match = None
        self._name = None
        self._presence_absence = None
        self._result = None
        self._text_match = None
        self.discriminator = None

        if angle_check is not None:
            self.angle_check = angle_check
        if barcode is not None:
            self.barcode = barcode
        if boolean_logic is not None:
            self.boolean_logic = boolean_logic
        if caliper is not None:
            self.caliper = caliper
        if contour is not None:
            self.contour = contour
        if distance is not None:
            self.distance = distance
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if find_copies is not None:
            self.find_copies = find_copies
        if find_edge is not None:
            self.find_edge = find_edge
        if find_shapes is not None:
            self.find_shapes = find_shapes
        if fixture is not None:
            self.fixture = fixture
        if label_match is not None:
            self.label_match = label_match
        if name is not None:
            self.name = name
        if presence_absence is not None:
            self.presence_absence = presence_absence
        if result is not None:
            self.result = result
        if text_match is not None:
            self.text_match = text_match

    @property
    def angle_check(self):
        """Gets the angle_check of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The angle_check of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseAngleCheck
        """
        return self._angle_check

    @angle_check.setter
    def angle_check(self, angle_check):
        """Sets the angle_check of this V1VisionRunByCameraResponseStepResults.


        :param angle_check: The angle_check of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseAngleCheck
        """

        self._angle_check = angle_check

    @property
    def barcode(self):
        """Gets the barcode of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The barcode of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: list[V1VisionRunByCameraResponseBarcode]
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this V1VisionRunByCameraResponseStepResults.


        :param barcode: The barcode of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: list[V1VisionRunByCameraResponseBarcode]
        """

        self._barcode = barcode

    @property
    def boolean_logic(self):
        """Gets the boolean_logic of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The boolean_logic of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseBooleanLogic
        """
        return self._boolean_logic

    @boolean_logic.setter
    def boolean_logic(self, boolean_logic):
        """Sets the boolean_logic of this V1VisionRunByCameraResponseStepResults.


        :param boolean_logic: The boolean_logic of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseBooleanLogic
        """

        self._boolean_logic = boolean_logic

    @property
    def caliper(self):
        """Gets the caliper of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The caliper of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseCaliper
        """
        return self._caliper

    @caliper.setter
    def caliper(self, caliper):
        """Sets the caliper of this V1VisionRunByCameraResponseStepResults.


        :param caliper: The caliper of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseCaliper
        """

        self._caliper = caliper

    @property
    def contour(self):
        """Gets the contour of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The contour of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseContour
        """
        return self._contour

    @contour.setter
    def contour(self, contour):
        """Sets the contour of this V1VisionRunByCameraResponseStepResults.


        :param contour: The contour of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseContour
        """

        self._contour = contour

    @property
    def distance(self):
        """Gets the distance of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The distance of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseDistance
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this V1VisionRunByCameraResponseStepResults.


        :param distance: The distance of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseDistance
        """

        self._distance = distance

    @property
    def expiration_date(self):
        """Gets the expiration_date of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The expiration_date of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseExpirationDate
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this V1VisionRunByCameraResponseStepResults.


        :param expiration_date: The expiration_date of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseExpirationDate
        """

        self._expiration_date = expiration_date

    @property
    def find_copies(self):
        """Gets the find_copies of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The find_copies of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseFindCopies
        """
        return self._find_copies

    @find_copies.setter
    def find_copies(self, find_copies):
        """Sets the find_copies of this V1VisionRunByCameraResponseStepResults.


        :param find_copies: The find_copies of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseFindCopies
        """

        self._find_copies = find_copies

    @property
    def find_edge(self):
        """Gets the find_edge of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The find_edge of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseFindEdge
        """
        return self._find_edge

    @find_edge.setter
    def find_edge(self, find_edge):
        """Sets the find_edge of this V1VisionRunByCameraResponseStepResults.


        :param find_edge: The find_edge of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseFindEdge
        """

        self._find_edge = find_edge

    @property
    def find_shapes(self):
        """Gets the find_shapes of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The find_shapes of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseFindShapes
        """
        return self._find_shapes

    @find_shapes.setter
    def find_shapes(self, find_shapes):
        """Sets the find_shapes of this V1VisionRunByCameraResponseStepResults.


        :param find_shapes: The find_shapes of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseFindShapes
        """

        self._find_shapes = find_shapes

    @property
    def fixture(self):
        """Gets the fixture of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The fixture of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseFixture
        """
        return self._fixture

    @fixture.setter
    def fixture(self, fixture):
        """Sets the fixture of this V1VisionRunByCameraResponseStepResults.


        :param fixture: The fixture of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseFixture
        """

        self._fixture = fixture

    @property
    def label_match(self):
        """Gets the label_match of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The label_match of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseLabelMatch
        """
        return self._label_match

    @label_match.setter
    def label_match(self, label_match):
        """Sets the label_match of this V1VisionRunByCameraResponseStepResults.


        :param label_match: The label_match of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseLabelMatch
        """

        self._label_match = label_match

    @property
    def name(self):
        """Gets the name of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The name of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1VisionRunByCameraResponseStepResults.


        :param name: The name of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def presence_absence(self):
        """Gets the presence_absence of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The presence_absence of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponsePresenceAbsence
        """
        return self._presence_absence

    @presence_absence.setter
    def presence_absence(self, presence_absence):
        """Sets the presence_absence of this V1VisionRunByCameraResponseStepResults.


        :param presence_absence: The presence_absence of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponsePresenceAbsence
        """

        self._presence_absence = presence_absence

    @property
    def result(self):
        """Gets the result of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The result of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this V1VisionRunByCameraResponseStepResults.


        :param result: The result of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def text_match(self):
        """Gets the text_match of this V1VisionRunByCameraResponseStepResults.  # noqa: E501


        :return: The text_match of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :rtype: V1VisionRunByCameraResponseTextMatch
        """
        return self._text_match

    @text_match.setter
    def text_match(self, text_match):
        """Sets the text_match of this V1VisionRunByCameraResponseStepResults.


        :param text_match: The text_match of this V1VisionRunByCameraResponseStepResults.  # noqa: E501
        :type: V1VisionRunByCameraResponseTextMatch
        """

        self._text_match = text_match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VisionRunByCameraResponseStepResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VisionRunByCameraResponseStepResults):
            return True

        return self.to_dict() != other.to_dict()
