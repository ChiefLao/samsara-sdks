# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-11-19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class AddressAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contacts': 'list[AddressAllOfContacts]',
        'id': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'tags': 'list[AddressAllOfTags]'
    }

    attribute_map = {
        'contacts': 'contacts',
        'id': 'id',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'tags': 'tags'
    }

    def __init__(self, contacts=None, id=None, latitude=None, longitude=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """AddressAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contacts = None
        self._id = None
        self._latitude = None
        self._longitude = None
        self._tags = None
        self.discriminator = None

        if contacts is not None:
            self.contacts = contacts
        self.id = id
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if tags is not None:
            self.tags = tags

    @property
    def contacts(self):
        """Gets the contacts of this AddressAllOf.  # noqa: E501

        An array of all contact mini-objects that are associated with the given address entry.  # noqa: E501

        :return: The contacts of this AddressAllOf.  # noqa: E501
        :rtype: list[AddressAllOfContacts]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this AddressAllOf.

        An array of all contact mini-objects that are associated with the given address entry.  # noqa: E501

        :param contacts: The contacts of this AddressAllOf.  # noqa: E501
        :type: list[AddressAllOfContacts]
        """

        self._contacts = contacts

    @property
    def id(self):
        """Gets the id of this AddressAllOf.  # noqa: E501

        Unique Samsara ID for the address.  # noqa: E501

        :return: The id of this AddressAllOf.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddressAllOf.

        Unique Samsara ID for the address.  # noqa: E501

        :param id: The id of this AddressAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this AddressAllOf.  # noqa: E501

        Latitude of the address. Either inferred from the formatted address or defined on address creation.  # noqa: E501

        :return: The latitude of this AddressAllOf.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AddressAllOf.

        Latitude of the address. Either inferred from the formatted address or defined on address creation.  # noqa: E501

        :param latitude: The latitude of this AddressAllOf.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AddressAllOf.  # noqa: E501

        Longitude of the address. Either inferred from the formatted address or defined on address creation.  # noqa: E501

        :return: The longitude of this AddressAllOf.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AddressAllOf.

        Longitude of the address. Either inferred from the formatted address or defined on address creation.  # noqa: E501

        :param longitude: The longitude of this AddressAllOf.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def tags(self):
        """Gets the tags of this AddressAllOf.  # noqa: E501

        An array of all tag mini-objects that are associated with the given address entry.  # noqa: E501

        :return: The tags of this AddressAllOf.  # noqa: E501
        :rtype: list[AddressAllOfTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AddressAllOf.

        An array of all tag mini-objects that are associated with the given address entry.  # noqa: E501

        :param tags: The tags of this AddressAllOf.  # noqa: E501
        :type: list[AddressAllOfTags]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressAllOf):
            return True

        return self.to_dict() != other.to_dict()
