# coding: utf-8

"""
    Samsara API

    <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).   # noqa: E501

    OpenAPI spec version: 2019-09-13
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RemoteObdTestRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cal_cvn': 'str',
        'cal_cvn_valid': 'bool',
        'cal_id': 'str',
        'cal_id_valid': 'bool',
        'catalyst': 'str',
        'comprehensive': 'str',
        'compression_ignition_monitor_supported': 'str',
        'compression_ignition_monitor_supported_valid': 'bool',
        'distance_traveled_since_codes_cleared': 'int',
        'distance_traveled_since_codes_cleared_valid': 'bool',
        'distance_traveled_with_mil_on': 'int',
        'distance_traveled_with_mil_on_valid': 'bool',
        'dtc_count': 'int',
        'egr': 'str',
        'emission_related_dtcs': 'str',
        'emission_related_dtcs_valid': 'bool',
        'evap_system': 'str',
        'fuel': 'str',
        'heated_catalyst': 'str',
        'heated_o2_sensor': 'str',
        'iso_sae_reserved': 'str',
        'mil': 'str',
        'mil_valid': 'bool',
        'minutes_since_codes_cleared': 'int',
        'minutes_since_codes_cleared_valid': 'bool',
        'minutes_since_mil': 'int',
        'minutes_since_mil_valid': 'bool',
        'misfire': 'str',
        'not_ready_count': 'int',
        'o2_sensor': 'str',
        'obd_monitor_status_valid': 'bool',
        'obd_vin': 'str',
        'obd_vin_valid': 'bool',
        'pcm_id': 'str',
        'pending_dtc_count': 'int',
        'pending_dtcs': 'str',
        'pending_dtcs_valid': 'bool',
        'permanent_dtc_count': 'int',
        'permanent_dtcs': 'str',
        'permanent_dtcs_valid': 'bool',
        'pid_count': 'int',
        'pid_count_valid': 'bool',
        'rpm': 'int',
        'rpm_valid': 'bool',
        'secondary_air': 'str',
        'warmups_since_codes_cleared': 'int',
        'warmups_since_codes_cleared_valid': 'bool'
    }

    attribute_map = {
        'cal_cvn': 'calCvn',
        'cal_cvn_valid': 'calCvnValid',
        'cal_id': 'calId',
        'cal_id_valid': 'calIdValid',
        'catalyst': 'catalyst',
        'comprehensive': 'comprehensive',
        'compression_ignition_monitor_supported': 'compressionIgnitionMonitorSupported',
        'compression_ignition_monitor_supported_valid': 'compressionIgnitionMonitorSupportedValid',
        'distance_traveled_since_codes_cleared': 'distanceTraveledSinceCodesCleared',
        'distance_traveled_since_codes_cleared_valid': 'distanceTraveledSinceCodesClearedValid',
        'distance_traveled_with_mil_on': 'distanceTraveledWithMilOn',
        'distance_traveled_with_mil_on_valid': 'distanceTraveledWithMilOnValid',
        'dtc_count': 'dtcCount',
        'egr': 'egr',
        'emission_related_dtcs': 'emissionRelatedDtcs',
        'emission_related_dtcs_valid': 'emissionRelatedDtcsValid',
        'evap_system': 'evapSystem',
        'fuel': 'fuel',
        'heated_catalyst': 'heatedCatalyst',
        'heated_o2_sensor': 'heatedO2Sensor',
        'iso_sae_reserved': 'isoSaeReserved',
        'mil': 'mil',
        'mil_valid': 'milValid',
        'minutes_since_codes_cleared': 'minutesSinceCodesCleared',
        'minutes_since_codes_cleared_valid': 'minutesSinceCodesClearedValid',
        'minutes_since_mil': 'minutesSinceMil',
        'minutes_since_mil_valid': 'minutesSinceMilValid',
        'misfire': 'misfire',
        'not_ready_count': 'notReadyCount',
        'o2_sensor': 'o2Sensor',
        'obd_monitor_status_valid': 'obdMonitorStatusValid',
        'obd_vin': 'obdVin',
        'obd_vin_valid': 'obdVinValid',
        'pcm_id': 'pcmId',
        'pending_dtc_count': 'pendingDtcCount',
        'pending_dtcs': 'pendingDtcs',
        'pending_dtcs_valid': 'pendingDtcsValid',
        'permanent_dtc_count': 'permanentDtcCount',
        'permanent_dtcs': 'permanentDtcs',
        'permanent_dtcs_valid': 'permanentDtcsValid',
        'pid_count': 'pidCount',
        'pid_count_valid': 'pidCountValid',
        'rpm': 'rpm',
        'rpm_valid': 'rpmValid',
        'secondary_air': 'secondaryAir',
        'warmups_since_codes_cleared': 'warmupsSinceCodesCleared',
        'warmups_since_codes_cleared_valid': 'warmupsSinceCodesClearedValid'
    }

    def __init__(self, cal_cvn=None, cal_cvn_valid=None, cal_id=None, cal_id_valid=None, catalyst=None, comprehensive=None, compression_ignition_monitor_supported=None, compression_ignition_monitor_supported_valid=None, distance_traveled_since_codes_cleared=None, distance_traveled_since_codes_cleared_valid=None, distance_traveled_with_mil_on=None, distance_traveled_with_mil_on_valid=None, dtc_count=None, egr=None, emission_related_dtcs=None, emission_related_dtcs_valid=None, evap_system=None, fuel=None, heated_catalyst=None, heated_o2_sensor=None, iso_sae_reserved=None, mil=None, mil_valid=None, minutes_since_codes_cleared=None, minutes_since_codes_cleared_valid=None, minutes_since_mil=None, minutes_since_mil_valid=None, misfire=None, not_ready_count=None, o2_sensor=None, obd_monitor_status_valid=None, obd_vin=None, obd_vin_valid=None, pcm_id=None, pending_dtc_count=None, pending_dtcs=None, pending_dtcs_valid=None, permanent_dtc_count=None, permanent_dtcs=None, permanent_dtcs_valid=None, pid_count=None, pid_count_valid=None, rpm=None, rpm_valid=None, secondary_air=None, warmups_since_codes_cleared=None, warmups_since_codes_cleared_valid=None):  # noqa: E501
        """RemoteObdTestRecords - a model defined in Swagger"""  # noqa: E501
        self._cal_cvn = None
        self._cal_cvn_valid = None
        self._cal_id = None
        self._cal_id_valid = None
        self._catalyst = None
        self._comprehensive = None
        self._compression_ignition_monitor_supported = None
        self._compression_ignition_monitor_supported_valid = None
        self._distance_traveled_since_codes_cleared = None
        self._distance_traveled_since_codes_cleared_valid = None
        self._distance_traveled_with_mil_on = None
        self._distance_traveled_with_mil_on_valid = None
        self._dtc_count = None
        self._egr = None
        self._emission_related_dtcs = None
        self._emission_related_dtcs_valid = None
        self._evap_system = None
        self._fuel = None
        self._heated_catalyst = None
        self._heated_o2_sensor = None
        self._iso_sae_reserved = None
        self._mil = None
        self._mil_valid = None
        self._minutes_since_codes_cleared = None
        self._minutes_since_codes_cleared_valid = None
        self._minutes_since_mil = None
        self._minutes_since_mil_valid = None
        self._misfire = None
        self._not_ready_count = None
        self._o2_sensor = None
        self._obd_monitor_status_valid = None
        self._obd_vin = None
        self._obd_vin_valid = None
        self._pcm_id = None
        self._pending_dtc_count = None
        self._pending_dtcs = None
        self._pending_dtcs_valid = None
        self._permanent_dtc_count = None
        self._permanent_dtcs = None
        self._permanent_dtcs_valid = None
        self._pid_count = None
        self._pid_count_valid = None
        self._rpm = None
        self._rpm_valid = None
        self._secondary_air = None
        self._warmups_since_codes_cleared = None
        self._warmups_since_codes_cleared_valid = None
        self.discriminator = None
        if cal_cvn is not None:
            self.cal_cvn = cal_cvn
        if cal_cvn_valid is not None:
            self.cal_cvn_valid = cal_cvn_valid
        if cal_id is not None:
            self.cal_id = cal_id
        if cal_id_valid is not None:
            self.cal_id_valid = cal_id_valid
        if catalyst is not None:
            self.catalyst = catalyst
        if comprehensive is not None:
            self.comprehensive = comprehensive
        if compression_ignition_monitor_supported is not None:
            self.compression_ignition_monitor_supported = compression_ignition_monitor_supported
        if compression_ignition_monitor_supported_valid is not None:
            self.compression_ignition_monitor_supported_valid = compression_ignition_monitor_supported_valid
        if distance_traveled_since_codes_cleared is not None:
            self.distance_traveled_since_codes_cleared = distance_traveled_since_codes_cleared
        if distance_traveled_since_codes_cleared_valid is not None:
            self.distance_traveled_since_codes_cleared_valid = distance_traveled_since_codes_cleared_valid
        if distance_traveled_with_mil_on is not None:
            self.distance_traveled_with_mil_on = distance_traveled_with_mil_on
        if distance_traveled_with_mil_on_valid is not None:
            self.distance_traveled_with_mil_on_valid = distance_traveled_with_mil_on_valid
        if dtc_count is not None:
            self.dtc_count = dtc_count
        if egr is not None:
            self.egr = egr
        if emission_related_dtcs is not None:
            self.emission_related_dtcs = emission_related_dtcs
        if emission_related_dtcs_valid is not None:
            self.emission_related_dtcs_valid = emission_related_dtcs_valid
        if evap_system is not None:
            self.evap_system = evap_system
        if fuel is not None:
            self.fuel = fuel
        if heated_catalyst is not None:
            self.heated_catalyst = heated_catalyst
        if heated_o2_sensor is not None:
            self.heated_o2_sensor = heated_o2_sensor
        if iso_sae_reserved is not None:
            self.iso_sae_reserved = iso_sae_reserved
        if mil is not None:
            self.mil = mil
        if mil_valid is not None:
            self.mil_valid = mil_valid
        if minutes_since_codes_cleared is not None:
            self.minutes_since_codes_cleared = minutes_since_codes_cleared
        if minutes_since_codes_cleared_valid is not None:
            self.minutes_since_codes_cleared_valid = minutes_since_codes_cleared_valid
        if minutes_since_mil is not None:
            self.minutes_since_mil = minutes_since_mil
        if minutes_since_mil_valid is not None:
            self.minutes_since_mil_valid = minutes_since_mil_valid
        if misfire is not None:
            self.misfire = misfire
        if not_ready_count is not None:
            self.not_ready_count = not_ready_count
        if o2_sensor is not None:
            self.o2_sensor = o2_sensor
        if obd_monitor_status_valid is not None:
            self.obd_monitor_status_valid = obd_monitor_status_valid
        if obd_vin is not None:
            self.obd_vin = obd_vin
        if obd_vin_valid is not None:
            self.obd_vin_valid = obd_vin_valid
        if pcm_id is not None:
            self.pcm_id = pcm_id
        if pending_dtc_count is not None:
            self.pending_dtc_count = pending_dtc_count
        if pending_dtcs is not None:
            self.pending_dtcs = pending_dtcs
        if pending_dtcs_valid is not None:
            self.pending_dtcs_valid = pending_dtcs_valid
        if permanent_dtc_count is not None:
            self.permanent_dtc_count = permanent_dtc_count
        if permanent_dtcs is not None:
            self.permanent_dtcs = permanent_dtcs
        if permanent_dtcs_valid is not None:
            self.permanent_dtcs_valid = permanent_dtcs_valid
        if pid_count is not None:
            self.pid_count = pid_count
        if pid_count_valid is not None:
            self.pid_count_valid = pid_count_valid
        if rpm is not None:
            self.rpm = rpm
        if rpm_valid is not None:
            self.rpm_valid = rpm_valid
        if secondary_air is not None:
            self.secondary_air = secondary_air
        if warmups_since_codes_cleared is not None:
            self.warmups_since_codes_cleared = warmups_since_codes_cleared
        if warmups_since_codes_cleared_valid is not None:
            self.warmups_since_codes_cleared_valid = warmups_since_codes_cleared_valid

    @property
    def cal_cvn(self):
        """Gets the cal_cvn of this RemoteObdTestRecords.  # noqa: E501

        Calibration Verification Numbers read from the CAN bus, separated by a pipe character.  # noqa: E501

        :return: The cal_cvn of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._cal_cvn

    @cal_cvn.setter
    def cal_cvn(self, cal_cvn):
        """Sets the cal_cvn of this RemoteObdTestRecords.

        Calibration Verification Numbers read from the CAN bus, separated by a pipe character.  # noqa: E501

        :param cal_cvn: The cal_cvn of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """

        self._cal_cvn = cal_cvn

    @property
    def cal_cvn_valid(self):
        """Gets the cal_cvn_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates CalCvnCount was successfully read from the CAN bus.  # noqa: E501

        :return: The cal_cvn_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._cal_cvn_valid

    @cal_cvn_valid.setter
    def cal_cvn_valid(self, cal_cvn_valid):
        """Sets the cal_cvn_valid of this RemoteObdTestRecords.

        Indicates CalCvnCount was successfully read from the CAN bus.  # noqa: E501

        :param cal_cvn_valid: The cal_cvn_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._cal_cvn_valid = cal_cvn_valid

    @property
    def cal_id(self):
        """Gets the cal_id of this RemoteObdTestRecords.  # noqa: E501

        Calibration IDs read from the CAN bus, separated by a pipe character.  # noqa: E501

        :return: The cal_id of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._cal_id

    @cal_id.setter
    def cal_id(self, cal_id):
        """Sets the cal_id of this RemoteObdTestRecords.

        Calibration IDs read from the CAN bus, separated by a pipe character.  # noqa: E501

        :param cal_id: The cal_id of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """

        self._cal_id = cal_id

    @property
    def cal_id_valid(self):
        """Gets the cal_id_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates CalId was successfully read from the CAN bus.  # noqa: E501

        :return: The cal_id_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._cal_id_valid

    @cal_id_valid.setter
    def cal_id_valid(self, cal_id_valid):
        """Sets the cal_id_valid of this RemoteObdTestRecords.

        Indicates CalId was successfully read from the CAN bus.  # noqa: E501

        :param cal_id_valid: The cal_id_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._cal_id_valid = cal_id_valid

    @property
    def catalyst(self):
        """Gets the catalyst of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - Catalyst or NMHC Catalyst as read from the CAN bus.  # noqa: E501

        :return: The catalyst of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._catalyst

    @catalyst.setter
    def catalyst(self, catalyst):
        """Sets the catalyst of this RemoteObdTestRecords.

        OBD Monitor Status - Catalyst or NMHC Catalyst as read from the CAN bus.  # noqa: E501

        :param catalyst: The catalyst of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if catalyst not in allowed_values:
            raise ValueError(
                "Invalid value for `catalyst` ({0}), must be one of {1}"  # noqa: E501
                .format(catalyst, allowed_values)
            )

        self._catalyst = catalyst

    @property
    def comprehensive(self):
        """Gets the comprehensive of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - Comprehensive as read from the CAN bus.  # noqa: E501

        :return: The comprehensive of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._comprehensive

    @comprehensive.setter
    def comprehensive(self, comprehensive):
        """Sets the comprehensive of this RemoteObdTestRecords.

        OBD Monitor Status - Comprehensive as read from the CAN bus.  # noqa: E501

        :param comprehensive: The comprehensive of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if comprehensive not in allowed_values:
            raise ValueError(
                "Invalid value for `comprehensive` ({0}), must be one of {1}"  # noqa: E501
                .format(comprehensive, allowed_values)
            )

        self._comprehensive = comprehensive

    @property
    def compression_ignition_monitor_supported(self):
        """Gets the compression_ignition_monitor_supported of this RemoteObdTestRecords.  # noqa: E501

        Compression ignition monitor supported as read from the CAN bus.  # noqa: E501

        :return: The compression_ignition_monitor_supported of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._compression_ignition_monitor_supported

    @compression_ignition_monitor_supported.setter
    def compression_ignition_monitor_supported(self, compression_ignition_monitor_supported):
        """Sets the compression_ignition_monitor_supported of this RemoteObdTestRecords.

        Compression ignition monitor supported as read from the CAN bus.  # noqa: E501

        :param compression_ignition_monitor_supported: The compression_ignition_monitor_supported of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if compression_ignition_monitor_supported not in allowed_values:
            raise ValueError(
                "Invalid value for `compression_ignition_monitor_supported` ({0}), must be one of {1}"  # noqa: E501
                .format(compression_ignition_monitor_supported, allowed_values)
            )

        self._compression_ignition_monitor_supported = compression_ignition_monitor_supported

    @property
    def compression_ignition_monitor_supported_valid(self):
        """Gets the compression_ignition_monitor_supported_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates CompressionIgnitionMonitorSupported was successfully read from the CAN bus.  # noqa: E501

        :return: The compression_ignition_monitor_supported_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._compression_ignition_monitor_supported_valid

    @compression_ignition_monitor_supported_valid.setter
    def compression_ignition_monitor_supported_valid(self, compression_ignition_monitor_supported_valid):
        """Sets the compression_ignition_monitor_supported_valid of this RemoteObdTestRecords.

        Indicates CompressionIgnitionMonitorSupported was successfully read from the CAN bus.  # noqa: E501

        :param compression_ignition_monitor_supported_valid: The compression_ignition_monitor_supported_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._compression_ignition_monitor_supported_valid = compression_ignition_monitor_supported_valid

    @property
    def distance_traveled_since_codes_cleared(self):
        """Gets the distance_traveled_since_codes_cleared of this RemoteObdTestRecords.  # noqa: E501

        Distance Traveled Since Codes Cleared as read from the CAN bus.  # noqa: E501

        :return: The distance_traveled_since_codes_cleared of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._distance_traveled_since_codes_cleared

    @distance_traveled_since_codes_cleared.setter
    def distance_traveled_since_codes_cleared(self, distance_traveled_since_codes_cleared):
        """Sets the distance_traveled_since_codes_cleared of this RemoteObdTestRecords.

        Distance Traveled Since Codes Cleared as read from the CAN bus.  # noqa: E501

        :param distance_traveled_since_codes_cleared: The distance_traveled_since_codes_cleared of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._distance_traveled_since_codes_cleared = distance_traveled_since_codes_cleared

    @property
    def distance_traveled_since_codes_cleared_valid(self):
        """Gets the distance_traveled_since_codes_cleared_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates DistanceTraveledSinceCodesCleared was successfully read from the CAN bus.  # noqa: E501

        :return: The distance_traveled_since_codes_cleared_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._distance_traveled_since_codes_cleared_valid

    @distance_traveled_since_codes_cleared_valid.setter
    def distance_traveled_since_codes_cleared_valid(self, distance_traveled_since_codes_cleared_valid):
        """Sets the distance_traveled_since_codes_cleared_valid of this RemoteObdTestRecords.

        Indicates DistanceTraveledSinceCodesCleared was successfully read from the CAN bus.  # noqa: E501

        :param distance_traveled_since_codes_cleared_valid: The distance_traveled_since_codes_cleared_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._distance_traveled_since_codes_cleared_valid = distance_traveled_since_codes_cleared_valid

    @property
    def distance_traveled_with_mil_on(self):
        """Gets the distance_traveled_with_mil_on of this RemoteObdTestRecords.  # noqa: E501

        Distance Traveled With MIL On as read from the CAN bus.  # noqa: E501

        :return: The distance_traveled_with_mil_on of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._distance_traveled_with_mil_on

    @distance_traveled_with_mil_on.setter
    def distance_traveled_with_mil_on(self, distance_traveled_with_mil_on):
        """Sets the distance_traveled_with_mil_on of this RemoteObdTestRecords.

        Distance Traveled With MIL On as read from the CAN bus.  # noqa: E501

        :param distance_traveled_with_mil_on: The distance_traveled_with_mil_on of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._distance_traveled_with_mil_on = distance_traveled_with_mil_on

    @property
    def distance_traveled_with_mil_on_valid(self):
        """Gets the distance_traveled_with_mil_on_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates DistanceTraveledWithMilOn was successfully read from the CAN bus.  # noqa: E501

        :return: The distance_traveled_with_mil_on_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._distance_traveled_with_mil_on_valid

    @distance_traveled_with_mil_on_valid.setter
    def distance_traveled_with_mil_on_valid(self, distance_traveled_with_mil_on_valid):
        """Sets the distance_traveled_with_mil_on_valid of this RemoteObdTestRecords.

        Indicates DistanceTraveledWithMilOn was successfully read from the CAN bus.  # noqa: E501

        :param distance_traveled_with_mil_on_valid: The distance_traveled_with_mil_on_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._distance_traveled_with_mil_on_valid = distance_traveled_with_mil_on_valid

    @property
    def dtc_count(self):
        """Gets the dtc_count of this RemoteObdTestRecords.  # noqa: E501

        Number of emissions related DTCs read from the CAN bus.  # noqa: E501

        :return: The dtc_count of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._dtc_count

    @dtc_count.setter
    def dtc_count(self, dtc_count):
        """Sets the dtc_count of this RemoteObdTestRecords.

        Number of emissions related DTCs read from the CAN bus.  # noqa: E501

        :param dtc_count: The dtc_count of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._dtc_count = dtc_count

    @property
    def egr(self):
        """Gets the egr of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - EGR/VVT as read from the CAN bus.  # noqa: E501

        :return: The egr of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._egr

    @egr.setter
    def egr(self, egr):
        """Sets the egr of this RemoteObdTestRecords.

        OBD Monitor Status - EGR/VVT as read from the CAN bus.  # noqa: E501

        :param egr: The egr of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if egr not in allowed_values:
            raise ValueError(
                "Invalid value for `egr` ({0}), must be one of {1}"  # noqa: E501
                .format(egr, allowed_values)
            )

        self._egr = egr

    @property
    def emission_related_dtcs(self):
        """Gets the emission_related_dtcs of this RemoteObdTestRecords.  # noqa: E501

        Emission related DTCs as read from the CAN bus, separated by pipe characters.  # noqa: E501

        :return: The emission_related_dtcs of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._emission_related_dtcs

    @emission_related_dtcs.setter
    def emission_related_dtcs(self, emission_related_dtcs):
        """Sets the emission_related_dtcs of this RemoteObdTestRecords.

        Emission related DTCs as read from the CAN bus, separated by pipe characters.  # noqa: E501

        :param emission_related_dtcs: The emission_related_dtcs of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """

        self._emission_related_dtcs = emission_related_dtcs

    @property
    def emission_related_dtcs_valid(self):
        """Gets the emission_related_dtcs_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates EmissionRelatedDtcs was successfully read from the CAN bus.  # noqa: E501

        :return: The emission_related_dtcs_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._emission_related_dtcs_valid

    @emission_related_dtcs_valid.setter
    def emission_related_dtcs_valid(self, emission_related_dtcs_valid):
        """Sets the emission_related_dtcs_valid of this RemoteObdTestRecords.

        Indicates EmissionRelatedDtcs was successfully read from the CAN bus.  # noqa: E501

        :param emission_related_dtcs_valid: The emission_related_dtcs_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._emission_related_dtcs_valid = emission_related_dtcs_valid

    @property
    def evap_system(self):
        """Gets the evap_system of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - Evaporative System or ISO/SAE Reserved as read from the CAN bus.  # noqa: E501

        :return: The evap_system of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._evap_system

    @evap_system.setter
    def evap_system(self, evap_system):
        """Sets the evap_system of this RemoteObdTestRecords.

        OBD Monitor Status - Evaporative System or ISO/SAE Reserved as read from the CAN bus.  # noqa: E501

        :param evap_system: The evap_system of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if evap_system not in allowed_values:
            raise ValueError(
                "Invalid value for `evap_system` ({0}), must be one of {1}"  # noqa: E501
                .format(evap_system, allowed_values)
            )

        self._evap_system = evap_system

    @property
    def fuel(self):
        """Gets the fuel of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - Fuel as read from the CAN bus.  # noqa: E501

        :return: The fuel of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._fuel

    @fuel.setter
    def fuel(self, fuel):
        """Sets the fuel of this RemoteObdTestRecords.

        OBD Monitor Status - Fuel as read from the CAN bus.  # noqa: E501

        :param fuel: The fuel of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if fuel not in allowed_values:
            raise ValueError(
                "Invalid value for `fuel` ({0}), must be one of {1}"  # noqa: E501
                .format(fuel, allowed_values)
            )

        self._fuel = fuel

    @property
    def heated_catalyst(self):
        """Gets the heated_catalyst of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - Heated Catalyst or NOx/SCR aftertreatment as read from the CAN bus.  # noqa: E501

        :return: The heated_catalyst of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._heated_catalyst

    @heated_catalyst.setter
    def heated_catalyst(self, heated_catalyst):
        """Sets the heated_catalyst of this RemoteObdTestRecords.

        OBD Monitor Status - Heated Catalyst or NOx/SCR aftertreatment as read from the CAN bus.  # noqa: E501

        :param heated_catalyst: The heated_catalyst of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if heated_catalyst not in allowed_values:
            raise ValueError(
                "Invalid value for `heated_catalyst` ({0}), must be one of {1}"  # noqa: E501
                .format(heated_catalyst, allowed_values)
            )

        self._heated_catalyst = heated_catalyst

    @property
    def heated_o2_sensor(self):
        """Gets the heated_o2_sensor of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - Oxygen Sensor Heater or PM Filter as read from the CAN bus.  # noqa: E501

        :return: The heated_o2_sensor of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._heated_o2_sensor

    @heated_o2_sensor.setter
    def heated_o2_sensor(self, heated_o2_sensor):
        """Sets the heated_o2_sensor of this RemoteObdTestRecords.

        OBD Monitor Status - Oxygen Sensor Heater or PM Filter as read from the CAN bus.  # noqa: E501

        :param heated_o2_sensor: The heated_o2_sensor of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if heated_o2_sensor not in allowed_values:
            raise ValueError(
                "Invalid value for `heated_o2_sensor` ({0}), must be one of {1}"  # noqa: E501
                .format(heated_o2_sensor, allowed_values)
            )

        self._heated_o2_sensor = heated_o2_sensor

    @property
    def iso_sae_reserved(self):
        """Gets the iso_sae_reserved of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - ISO/SAE Reserved as read from the CAN bus.  # noqa: E501

        :return: The iso_sae_reserved of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._iso_sae_reserved

    @iso_sae_reserved.setter
    def iso_sae_reserved(self, iso_sae_reserved):
        """Sets the iso_sae_reserved of this RemoteObdTestRecords.

        OBD Monitor Status - ISO/SAE Reserved as read from the CAN bus.  # noqa: E501

        :param iso_sae_reserved: The iso_sae_reserved of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if iso_sae_reserved not in allowed_values:
            raise ValueError(
                "Invalid value for `iso_sae_reserved` ({0}), must be one of {1}"  # noqa: E501
                .format(iso_sae_reserved, allowed_values)
            )

        self._iso_sae_reserved = iso_sae_reserved

    @property
    def mil(self):
        """Gets the mil of this RemoteObdTestRecords.  # noqa: E501

        Malfunction indicator lamp status as read from the CAN bus.  # noqa: E501

        :return: The mil of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._mil

    @mil.setter
    def mil(self, mil):
        """Sets the mil of this RemoteObdTestRecords.

        Malfunction indicator lamp status as read from the CAN bus.  # noqa: E501

        :param mil: The mil of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if mil not in allowed_values:
            raise ValueError(
                "Invalid value for `mil` ({0}), must be one of {1}"  # noqa: E501
                .format(mil, allowed_values)
            )

        self._mil = mil

    @property
    def mil_valid(self):
        """Gets the mil_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates Mil was successfully read from the CAN bus.  # noqa: E501

        :return: The mil_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._mil_valid

    @mil_valid.setter
    def mil_valid(self, mil_valid):
        """Sets the mil_valid of this RemoteObdTestRecords.

        Indicates Mil was successfully read from the CAN bus.  # noqa: E501

        :param mil_valid: The mil_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._mil_valid = mil_valid

    @property
    def minutes_since_codes_cleared(self):
        """Gets the minutes_since_codes_cleared of this RemoteObdTestRecords.  # noqa: E501

        Minutes Since Codes Cleared as read from the CAN bus.  # noqa: E501

        :return: The minutes_since_codes_cleared of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._minutes_since_codes_cleared

    @minutes_since_codes_cleared.setter
    def minutes_since_codes_cleared(self, minutes_since_codes_cleared):
        """Sets the minutes_since_codes_cleared of this RemoteObdTestRecords.

        Minutes Since Codes Cleared as read from the CAN bus.  # noqa: E501

        :param minutes_since_codes_cleared: The minutes_since_codes_cleared of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._minutes_since_codes_cleared = minutes_since_codes_cleared

    @property
    def minutes_since_codes_cleared_valid(self):
        """Gets the minutes_since_codes_cleared_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates MinutesSinceCodesCleared was successfully read from the CAN bus.  # noqa: E501

        :return: The minutes_since_codes_cleared_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._minutes_since_codes_cleared_valid

    @minutes_since_codes_cleared_valid.setter
    def minutes_since_codes_cleared_valid(self, minutes_since_codes_cleared_valid):
        """Sets the minutes_since_codes_cleared_valid of this RemoteObdTestRecords.

        Indicates MinutesSinceCodesCleared was successfully read from the CAN bus.  # noqa: E501

        :param minutes_since_codes_cleared_valid: The minutes_since_codes_cleared_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._minutes_since_codes_cleared_valid = minutes_since_codes_cleared_valid

    @property
    def minutes_since_mil(self):
        """Gets the minutes_since_mil of this RemoteObdTestRecords.  # noqa: E501

        Minutes Since MIL On as read from the CAN bus.  # noqa: E501

        :return: The minutes_since_mil of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._minutes_since_mil

    @minutes_since_mil.setter
    def minutes_since_mil(self, minutes_since_mil):
        """Sets the minutes_since_mil of this RemoteObdTestRecords.

        Minutes Since MIL On as read from the CAN bus.  # noqa: E501

        :param minutes_since_mil: The minutes_since_mil of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._minutes_since_mil = minutes_since_mil

    @property
    def minutes_since_mil_valid(self):
        """Gets the minutes_since_mil_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates MinutesSinceMil was successfully read from the CAN bus.  # noqa: E501

        :return: The minutes_since_mil_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._minutes_since_mil_valid

    @minutes_since_mil_valid.setter
    def minutes_since_mil_valid(self, minutes_since_mil_valid):
        """Sets the minutes_since_mil_valid of this RemoteObdTestRecords.

        Indicates MinutesSinceMil was successfully read from the CAN bus.  # noqa: E501

        :param minutes_since_mil_valid: The minutes_since_mil_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._minutes_since_mil_valid = minutes_since_mil_valid

    @property
    def misfire(self):
        """Gets the misfire of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - Misfire as read from the CAN bus.  # noqa: E501

        :return: The misfire of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._misfire

    @misfire.setter
    def misfire(self, misfire):
        """Sets the misfire of this RemoteObdTestRecords.

        OBD Monitor Status - Misfire as read from the CAN bus.  # noqa: E501

        :param misfire: The misfire of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if misfire not in allowed_values:
            raise ValueError(
                "Invalid value for `misfire` ({0}), must be one of {1}"  # noqa: E501
                .format(misfire, allowed_values)
            )

        self._misfire = misfire

    @property
    def not_ready_count(self):
        """Gets the not_ready_count of this RemoteObdTestRecords.  # noqa: E501

        Number of OBD Monitor Statuses reporting 'Supported and not ready'.  # noqa: E501

        :return: The not_ready_count of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._not_ready_count

    @not_ready_count.setter
    def not_ready_count(self, not_ready_count):
        """Sets the not_ready_count of this RemoteObdTestRecords.

        Number of OBD Monitor Statuses reporting 'Supported and not ready'.  # noqa: E501

        :param not_ready_count: The not_ready_count of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._not_ready_count = not_ready_count

    @property
    def o2_sensor(self):
        """Gets the o2_sensor of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - Oxygen Sensor or Exhaust Gas Sensor as read from the CAN bus.  # noqa: E501

        :return: The o2_sensor of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._o2_sensor

    @o2_sensor.setter
    def o2_sensor(self, o2_sensor):
        """Sets the o2_sensor of this RemoteObdTestRecords.

        OBD Monitor Status - Oxygen Sensor or Exhaust Gas Sensor as read from the CAN bus.  # noqa: E501

        :param o2_sensor: The o2_sensor of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if o2_sensor not in allowed_values:
            raise ValueError(
                "Invalid value for `o2_sensor` ({0}), must be one of {1}"  # noqa: E501
                .format(o2_sensor, allowed_values)
            )

        self._o2_sensor = o2_sensor

    @property
    def obd_monitor_status_valid(self):
        """Gets the obd_monitor_status_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates Obd Monitor Statuses were successfully read from the CAN bus.  # noqa: E501

        :return: The obd_monitor_status_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._obd_monitor_status_valid

    @obd_monitor_status_valid.setter
    def obd_monitor_status_valid(self, obd_monitor_status_valid):
        """Sets the obd_monitor_status_valid of this RemoteObdTestRecords.

        Indicates Obd Monitor Statuses were successfully read from the CAN bus.  # noqa: E501

        :param obd_monitor_status_valid: The obd_monitor_status_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._obd_monitor_status_valid = obd_monitor_status_valid

    @property
    def obd_vin(self):
        """Gets the obd_vin of this RemoteObdTestRecords.  # noqa: E501

        Vehicle identification number as read from the CAN bus.  # noqa: E501

        :return: The obd_vin of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._obd_vin

    @obd_vin.setter
    def obd_vin(self, obd_vin):
        """Sets the obd_vin of this RemoteObdTestRecords.

        Vehicle identification number as read from the CAN bus.  # noqa: E501

        :param obd_vin: The obd_vin of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """

        self._obd_vin = obd_vin

    @property
    def obd_vin_valid(self):
        """Gets the obd_vin_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates ObdVin was successfully read from the CAN bus.  # noqa: E501

        :return: The obd_vin_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._obd_vin_valid

    @obd_vin_valid.setter
    def obd_vin_valid(self, obd_vin_valid):
        """Sets the obd_vin_valid of this RemoteObdTestRecords.

        Indicates ObdVin was successfully read from the CAN bus.  # noqa: E501

        :param obd_vin_valid: The obd_vin_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._obd_vin_valid = obd_vin_valid

    @property
    def pcm_id(self):
        """Gets the pcm_id of this RemoteObdTestRecords.  # noqa: E501

        ECU Address for the ECU that was read from the CAN bus.  # noqa: E501

        :return: The pcm_id of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._pcm_id

    @pcm_id.setter
    def pcm_id(self, pcm_id):
        """Sets the pcm_id of this RemoteObdTestRecords.

        ECU Address for the ECU that was read from the CAN bus.  # noqa: E501

        :param pcm_id: The pcm_id of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """

        self._pcm_id = pcm_id

    @property
    def pending_dtc_count(self):
        """Gets the pending_dtc_count of this RemoteObdTestRecords.  # noqa: E501

        Number of pending DTCs read from the CAN bus.  # noqa: E501

        :return: The pending_dtc_count of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._pending_dtc_count

    @pending_dtc_count.setter
    def pending_dtc_count(self, pending_dtc_count):
        """Sets the pending_dtc_count of this RemoteObdTestRecords.

        Number of pending DTCs read from the CAN bus.  # noqa: E501

        :param pending_dtc_count: The pending_dtc_count of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._pending_dtc_count = pending_dtc_count

    @property
    def pending_dtcs(self):
        """Gets the pending_dtcs of this RemoteObdTestRecords.  # noqa: E501

        Pending DTCs as read from the CAN bus, separated by pipe characters.  # noqa: E501

        :return: The pending_dtcs of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._pending_dtcs

    @pending_dtcs.setter
    def pending_dtcs(self, pending_dtcs):
        """Sets the pending_dtcs of this RemoteObdTestRecords.

        Pending DTCs as read from the CAN bus, separated by pipe characters.  # noqa: E501

        :param pending_dtcs: The pending_dtcs of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """

        self._pending_dtcs = pending_dtcs

    @property
    def pending_dtcs_valid(self):
        """Gets the pending_dtcs_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates PendingDtcs was successfully read from the CAN bus.  # noqa: E501

        :return: The pending_dtcs_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._pending_dtcs_valid

    @pending_dtcs_valid.setter
    def pending_dtcs_valid(self, pending_dtcs_valid):
        """Sets the pending_dtcs_valid of this RemoteObdTestRecords.

        Indicates PendingDtcs was successfully read from the CAN bus.  # noqa: E501

        :param pending_dtcs_valid: The pending_dtcs_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._pending_dtcs_valid = pending_dtcs_valid

    @property
    def permanent_dtc_count(self):
        """Gets the permanent_dtc_count of this RemoteObdTestRecords.  # noqa: E501

        Number of permanent DTCs read from the CAN bus.  # noqa: E501

        :return: The permanent_dtc_count of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._permanent_dtc_count

    @permanent_dtc_count.setter
    def permanent_dtc_count(self, permanent_dtc_count):
        """Sets the permanent_dtc_count of this RemoteObdTestRecords.

        Number of permanent DTCs read from the CAN bus.  # noqa: E501

        :param permanent_dtc_count: The permanent_dtc_count of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._permanent_dtc_count = permanent_dtc_count

    @property
    def permanent_dtcs(self):
        """Gets the permanent_dtcs of this RemoteObdTestRecords.  # noqa: E501

        Permanent DTCs as read from the CAN bus, separated by pipe characters.  # noqa: E501

        :return: The permanent_dtcs of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._permanent_dtcs

    @permanent_dtcs.setter
    def permanent_dtcs(self, permanent_dtcs):
        """Sets the permanent_dtcs of this RemoteObdTestRecords.

        Permanent DTCs as read from the CAN bus, separated by pipe characters.  # noqa: E501

        :param permanent_dtcs: The permanent_dtcs of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """

        self._permanent_dtcs = permanent_dtcs

    @property
    def permanent_dtcs_valid(self):
        """Gets the permanent_dtcs_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates PermanentDtcs was successfully read from the CAN bus.  # noqa: E501

        :return: The permanent_dtcs_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._permanent_dtcs_valid

    @permanent_dtcs_valid.setter
    def permanent_dtcs_valid(self, permanent_dtcs_valid):
        """Sets the permanent_dtcs_valid of this RemoteObdTestRecords.

        Indicates PermanentDtcs was successfully read from the CAN bus.  # noqa: E501

        :param permanent_dtcs_valid: The permanent_dtcs_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._permanent_dtcs_valid = permanent_dtcs_valid

    @property
    def pid_count(self):
        """Gets the pid_count of this RemoteObdTestRecords.  # noqa: E501

        PidCount is a count of all PIDs supported for this control module as read from the CAN bus  # noqa: E501

        :return: The pid_count of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._pid_count

    @pid_count.setter
    def pid_count(self, pid_count):
        """Sets the pid_count of this RemoteObdTestRecords.

        PidCount is a count of all PIDs supported for this control module as read from the CAN bus  # noqa: E501

        :param pid_count: The pid_count of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._pid_count = pid_count

    @property
    def pid_count_valid(self):
        """Gets the pid_count_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates PidCount was successfully read from the CAN bus.  # noqa: E501

        :return: The pid_count_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._pid_count_valid

    @pid_count_valid.setter
    def pid_count_valid(self, pid_count_valid):
        """Sets the pid_count_valid of this RemoteObdTestRecords.

        Indicates PidCount was successfully read from the CAN bus.  # noqa: E501

        :param pid_count_valid: The pid_count_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._pid_count_valid = pid_count_valid

    @property
    def rpm(self):
        """Gets the rpm of this RemoteObdTestRecords.  # noqa: E501

        Revolutions per minute as read from the CAN bus.  # noqa: E501

        :return: The rpm of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._rpm

    @rpm.setter
    def rpm(self, rpm):
        """Sets the rpm of this RemoteObdTestRecords.

        Revolutions per minute as read from the CAN bus.  # noqa: E501

        :param rpm: The rpm of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._rpm = rpm

    @property
    def rpm_valid(self):
        """Gets the rpm_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates Rpm was successfully read from the CAN bus.  # noqa: E501

        :return: The rpm_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._rpm_valid

    @rpm_valid.setter
    def rpm_valid(self, rpm_valid):
        """Sets the rpm_valid of this RemoteObdTestRecords.

        Indicates Rpm was successfully read from the CAN bus.  # noqa: E501

        :param rpm_valid: The rpm_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._rpm_valid = rpm_valid

    @property
    def secondary_air(self):
        """Gets the secondary_air of this RemoteObdTestRecords.  # noqa: E501

        OBD Monitor Status - Secondary Air System or Boost Pressure System as read from the CAN bus.  # noqa: E501

        :return: The secondary_air of this RemoteObdTestRecords.  # noqa: E501
        :rtype: str
        """
        return self._secondary_air

    @secondary_air.setter
    def secondary_air(self, secondary_air):
        """Sets the secondary_air of this RemoteObdTestRecords.

        OBD Monitor Status - Secondary Air System or Boost Pressure System as read from the CAN bus.  # noqa: E501

        :param secondary_air: The secondary_air of this RemoteObdTestRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "R", "N"]  # noqa: E501
        if secondary_air not in allowed_values:
            raise ValueError(
                "Invalid value for `secondary_air` ({0}), must be one of {1}"  # noqa: E501
                .format(secondary_air, allowed_values)
            )

        self._secondary_air = secondary_air

    @property
    def warmups_since_codes_cleared(self):
        """Gets the warmups_since_codes_cleared of this RemoteObdTestRecords.  # noqa: E501

        Warmups Since Codes Cleared as read from the CAN bus.  # noqa: E501

        :return: The warmups_since_codes_cleared of this RemoteObdTestRecords.  # noqa: E501
        :rtype: int
        """
        return self._warmups_since_codes_cleared

    @warmups_since_codes_cleared.setter
    def warmups_since_codes_cleared(self, warmups_since_codes_cleared):
        """Sets the warmups_since_codes_cleared of this RemoteObdTestRecords.

        Warmups Since Codes Cleared as read from the CAN bus.  # noqa: E501

        :param warmups_since_codes_cleared: The warmups_since_codes_cleared of this RemoteObdTestRecords.  # noqa: E501
        :type: int
        """

        self._warmups_since_codes_cleared = warmups_since_codes_cleared

    @property
    def warmups_since_codes_cleared_valid(self):
        """Gets the warmups_since_codes_cleared_valid of this RemoteObdTestRecords.  # noqa: E501

        Indicates WarmupsSinceCodesCleared was successfully read from the CAN bus.  # noqa: E501

        :return: The warmups_since_codes_cleared_valid of this RemoteObdTestRecords.  # noqa: E501
        :rtype: bool
        """
        return self._warmups_since_codes_cleared_valid

    @warmups_since_codes_cleared_valid.setter
    def warmups_since_codes_cleared_valid(self, warmups_since_codes_cleared_valid):
        """Sets the warmups_since_codes_cleared_valid of this RemoteObdTestRecords.

        Indicates WarmupsSinceCodesCleared was successfully read from the CAN bus.  # noqa: E501

        :param warmups_since_codes_cleared_valid: The warmups_since_codes_cleared_valid of this RemoteObdTestRecords.  # noqa: E501
        :type: bool
        """

        self._warmups_since_codes_cleared_valid = warmups_since_codes_cleared_valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteObdTestRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteObdTestRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
