# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import samsara
from samsara.models.v1_assets_reefer import V1AssetsReefer  # noqa: E501
from samsara.rest import ApiException

class TestV1AssetsReefer(unittest.TestCase):
    """V1AssetsReefer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1AssetsReefer
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = samsara.models.v1_assets_reefer.V1AssetsReefer()  # noqa: E501
        if include_optional :
            return V1AssetsReefer(
                asset_type = 'Thermo King', 
                id = 1, 
                name = 'Reefer 123', 
                reefer_stats = samsara.models.v1_assets_reefer_reefer_stats.V1AssetsReefer_reeferStats(
                    ambient_air_temperature = [
                        samsara.models.v1_assets_reefer_reefer_stats_ambient_air_temperature.V1AssetsReefer_reeferStats_ambientAirTemperature(
                            changed_at_ms = 1453449599999, 
                            temp_in_milli_c = 31110, )
                        ], 
                    discharge_air_temperature = [
                        samsara.models.v1_assets_reefer_reefer_stats_discharge_air_temperature.V1AssetsReefer_reeferStats_dischargeAirTemperature(
                            changed_at_ms = 1453449599999, 
                            temp_in_milli_c = 31110, )
                        ], 
                    engine_hours = [
                        samsara.models.v1_asset_reefer_response_reefer_stats_engine_hours.V1AssetReeferResponse_reeferStats_engineHours(
                            changed_at_ms = 1453449599999, )
                        ], 
                    fuel_percentage = [
                        samsara.models.v1_asset_reefer_response_reefer_stats_fuel_percentage.V1AssetReeferResponse_reeferStats_fuelPercentage(
                            changed_at_ms = 1453449599999, )
                        ], 
                    power_status = [
                        samsara.models.v1_assets_reefer_reefer_stats_power_status.V1AssetsReefer_reeferStats_powerStatus(
                            changed_at_ms = 1453449599999, 
                            status = 'Active (Continuous)', )
                        ], 
                    reefer_alarms = [
                        samsara.models.v1_asset_reefer_response_reefer_stats_alarms_1.V1AssetReeferResponse_reeferStats_alarms_1(
                            alarms = [
                                samsara.models.v1_asset_reefer_response_reefer_stats_alarms.V1AssetReeferResponse_reeferStats_alarms(
                                    alarm_code = 102, 
                                    description = 'Check Return Air Sensor', 
                                    operator_action = 'Check and repair at end of trip', 
                                    severity = 1, )
                                ], 
                            changed_at_ms = 1453449599999, )
                        ], 
                    return_air_temperature = [
                        samsara.models.v1_asset_reefer_response_reefer_stats_return_air_temp.V1AssetReeferResponse_reeferStats_returnAirTemp(
                            changed_at_ms = 1453449599999, 
                            temp_in_milli_c = 31110, )
                        ], 
                    set_point = [
                        samsara.models.v1_asset_reefer_response_reefer_stats_set_point.V1AssetReeferResponse_reeferStats_setPoint(
                            changed_at_ms = 1453449599999, 
                            temp_in_milli_c = 31110, )
                        ], )
            )
        else :
            return V1AssetsReefer(
        )

    def testV1AssetsReefer(self):
        """Test V1AssetsReefer"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
