# coding: utf-8

"""
    Samsara API

    <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).   # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import samsara
from samsara.models.v1_assets_reefer_reefer_stats import V1AssetsReeferReeferStats  # noqa: E501
from samsara.rest import ApiException

class TestV1AssetsReeferReeferStats(unittest.TestCase):
    """V1AssetsReeferReeferStats unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1AssetsReeferReeferStats
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = samsara.models.v1_assets_reefer_reefer_stats.V1AssetsReeferReeferStats()  # noqa: E501
        if include_optional :
            return V1AssetsReeferReeferStats(
                ambient_air_temperature = [
                    samsara.models.v1_assets_reefer_reefer_stats_ambient_air_temperature.V1AssetsReefer_reeferStats_ambientAirTemperature(
                        changed_at_ms = 1453449599999, 
                        temp_in_milli_c = 31110, )
                    ], 
                discharge_air_temperature = [
                    samsara.models.v1_assets_reefer_reefer_stats_discharge_air_temperature.V1AssetsReefer_reeferStats_dischargeAirTemperature(
                        changed_at_ms = 1453449599999, 
                        temp_in_milli_c = 31110, )
                    ], 
                engine_hours = [
                    samsara.models.v1_asset_reefer_response_reefer_stats_engine_hours.V1AssetReeferResponse_reeferStats_engineHours(
                        changed_at_ms = 1453449599999, )
                    ], 
                fuel_percentage = [
                    samsara.models.v1_asset_reefer_response_reefer_stats_fuel_percentage.V1AssetReeferResponse_reeferStats_fuelPercentage(
                        changed_at_ms = 1453449599999, )
                    ], 
                power_status = [
                    samsara.models.v1_assets_reefer_reefer_stats_power_status.V1AssetsReefer_reeferStats_powerStatus(
                        changed_at_ms = 1453449599999, 
                        status = 'Active (Continuous)', )
                    ], 
                reefer_alarms = [
                    samsara.models.v1_asset_reefer_response_reefer_stats_alarms_1.V1AssetReeferResponse_reeferStats_alarms_1(
                        alarms = [
                            samsara.models.v1_asset_reefer_response_reefer_stats_alarms.V1AssetReeferResponse_reeferStats_alarms(
                                alarm_code = 102, 
                                description = 'Check Return Air Sensor', 
                                operator_action = 'Check and repair at end of trip', 
                                severity = 1, )
                            ], 
                        changed_at_ms = 1453449599999, )
                    ], 
                return_air_temperature = [
                    samsara.models.v1_asset_reefer_response_reefer_stats_return_air_temp.V1AssetReeferResponse_reeferStats_returnAirTemp(
                        changed_at_ms = 1453449599999, 
                        temp_in_milli_c = 31110, )
                    ], 
                set_point = [
                    samsara.models.v1_asset_reefer_response_reefer_stats_set_point.V1AssetReeferResponse_reeferStats_setPoint(
                        changed_at_ms = 1453449599999, 
                        temp_in_milli_c = 31110, )
                    ]
            )
        else :
            return V1AssetsReeferReeferStats(
        )

    def testV1AssetsReeferReeferStats(self):
        """Test V1AssetsReeferReeferStats"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
