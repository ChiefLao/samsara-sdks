# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import samsara
from samsara.models.inline_response2002 import InlineResponse2002  # noqa: E501
from samsara.rest import ApiException

class TestInlineResponse2002(unittest.TestCase):
    """InlineResponse2002 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test InlineResponse2002
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = samsara.models.inline_response2002.InlineResponse2002()  # noqa: E501
        if include_optional :
            return InlineResponse2002(
                data = [
                    samsara.models.v1_assets_reefer.V1AssetsReefer(
                        asset_type = 'Thermo King', 
                        id = 1, 
                        name = 'Reefer 123', 
                        reefer_stats = samsara.models.v1_assets_reefer_reefer_stats.V1AssetsReefer_reeferStats(
                            ambient_air_temperature = [
                                samsara.models.v1_assets_reefer_reefer_stats_ambient_air_temperature.V1AssetsReefer_reeferStats_ambientAirTemperature(
                                    changed_at_ms = 1453449599999, 
                                    temp_in_milli_c = 31110, )
                                ], 
                            discharge_air_temperature = [
                                samsara.models.v1_assets_reefer_reefer_stats_discharge_air_temperature.V1AssetsReefer_reeferStats_dischargeAirTemperature(
                                    changed_at_ms = 1453449599999, 
                                    temp_in_milli_c = 31110, )
                                ], 
                            engine_hours = [
                                samsara.models.v1_asset_reefer_response_reefer_stats_engine_hours.V1AssetReeferResponse_reeferStats_engineHours(
                                    changed_at_ms = 1453449599999, )
                                ], 
                            fuel_percentage = [
                                samsara.models.v1_asset_reefer_response_reefer_stats_fuel_percentage.V1AssetReeferResponse_reeferStats_fuelPercentage(
                                    changed_at_ms = 1453449599999, )
                                ], 
                            power_status = [
                                samsara.models.v1_assets_reefer_reefer_stats_power_status.V1AssetsReefer_reeferStats_powerStatus(
                                    changed_at_ms = 1453449599999, 
                                    status = 'Active (Continuous)', )
                                ], 
                            reefer_alarms = [
                                samsara.models.v1_asset_reefer_response_reefer_stats_alarms_1.V1AssetReeferResponse_reeferStats_alarms_1(
                                    alarms = [
                                        samsara.models.v1_asset_reefer_response_reefer_stats_alarms.V1AssetReeferResponse_reeferStats_alarms(
                                            alarm_code = 102, 
                                            description = 'Check Return Air Sensor', 
                                            operator_action = 'Check and repair at end of trip', 
                                            severity = 1, )
                                        ], 
                                    changed_at_ms = 1453449599999, )
                                ], 
                            return_air_temperature = [
                                samsara.models.v1_asset_reefer_response_reefer_stats_return_air_temp.V1AssetReeferResponse_reeferStats_returnAirTemp(
                                    changed_at_ms = 1453449599999, 
                                    temp_in_milli_c = 31110, )
                                ], 
                            set_point = [
                                samsara.models.v1_asset_reefer_response_reefer_stats_set_point.V1AssetReeferResponse_reeferStats_setPoint(
                                    changed_at_ms = 1453449599999, 
                                    temp_in_milli_c = 31110, )
                                ], ), )
                    ], 
                pagination = samsara.models.v1_pagination.V1Pagination(
                    end_cursor = 'MTU5MTEzNjA2OTU0MzQ3', 
                    has_next_page = True, 
                    has_prev_page = True, 
                    start_cursor = 'MTU5MTEzNjA2OTU0MzQ3', )
            )
        else :
            return InlineResponse2002(
        )

    def testInlineResponse2002(self):
        """Test InlineResponse2002"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
