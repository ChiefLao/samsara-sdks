# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VehicleMaintenanceJ1939DiagnosticTroubleCodes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fmi_id': 'int',
        'fmi_text': 'str',
        'occurrence_count': 'int',
        'spn_description': 'str',
        'spn_id': 'int',
        'tx_id': 'int'
    }

    attribute_map = {
        'fmi_id': 'fmiId',
        'fmi_text': 'fmiText',
        'occurrence_count': 'occurrenceCount',
        'spn_description': 'spnDescription',
        'spn_id': 'spnId',
        'tx_id': 'txId'
    }

    def __init__(self, fmi_id=None, fmi_text=None, occurrence_count=None, spn_description=None, spn_id=None, tx_id=None, local_vars_configuration=None):  # noqa: E501
        """V1VehicleMaintenanceJ1939DiagnosticTroubleCodes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fmi_id = None
        self._fmi_text = None
        self._occurrence_count = None
        self._spn_description = None
        self._spn_id = None
        self._tx_id = None
        self.discriminator = None

        self.fmi_id = fmi_id
        self.fmi_text = fmi_text
        self.occurrence_count = occurrence_count
        self.spn_description = spn_description
        self.spn_id = spn_id
        self.tx_id = tx_id

    @property
    def fmi_id(self):
        """Gets the fmi_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The fmi_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: int
        """
        return self._fmi_id

    @fmi_id.setter
    def fmi_id(self, fmi_id):
        """Sets the fmi_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param fmi_id: The fmi_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and fmi_id is None:  # noqa: E501
            raise ValueError("Invalid value for `fmi_id`, must not be `None`")  # noqa: E501

        self._fmi_id = fmi_id

    @property
    def fmi_text(self):
        """Gets the fmi_text of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The fmi_text of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: str
        """
        return self._fmi_text

    @fmi_text.setter
    def fmi_text(self, fmi_text):
        """Sets the fmi_text of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param fmi_text: The fmi_text of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and fmi_text is None:  # noqa: E501
            raise ValueError("Invalid value for `fmi_text`, must not be `None`")  # noqa: E501

        self._fmi_text = fmi_text

    @property
    def occurrence_count(self):
        """Gets the occurrence_count of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The occurrence_count of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: int
        """
        return self._occurrence_count

    @occurrence_count.setter
    def occurrence_count(self, occurrence_count):
        """Sets the occurrence_count of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param occurrence_count: The occurrence_count of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and occurrence_count is None:  # noqa: E501
            raise ValueError("Invalid value for `occurrence_count`, must not be `None`")  # noqa: E501

        self._occurrence_count = occurrence_count

    @property
    def spn_description(self):
        """Gets the spn_description of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The spn_description of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: str
        """
        return self._spn_description

    @spn_description.setter
    def spn_description(self, spn_description):
        """Sets the spn_description of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param spn_description: The spn_description of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and spn_description is None:  # noqa: E501
            raise ValueError("Invalid value for `spn_description`, must not be `None`")  # noqa: E501

        self._spn_description = spn_description

    @property
    def spn_id(self):
        """Gets the spn_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The spn_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: int
        """
        return self._spn_id

    @spn_id.setter
    def spn_id(self, spn_id):
        """Sets the spn_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param spn_id: The spn_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and spn_id is None:  # noqa: E501
            raise ValueError("Invalid value for `spn_id`, must not be `None`")  # noqa: E501

        self._spn_id = spn_id

    @property
    def tx_id(self):
        """Gets the tx_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The tx_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: int
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param tx_id: The tx_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and tx_id is None:  # noqa: E501
            raise ValueError("Invalid value for `tx_id`, must not be `None`")  # noqa: E501

        self._tx_id = tx_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VehicleMaintenanceJ1939DiagnosticTroubleCodes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VehicleMaintenanceJ1939DiagnosticTroubleCodes):
            return True

        return self.to_dict() != other.to_dict()
