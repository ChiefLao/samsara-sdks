# coding: utf-8

"""
    Samsara API

    <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).   # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VehicleMaintenanceJ1939DiagnosticTroubleCodes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fmi_id': 'int',
        'fmi_text': 'str',
        'occurrence_count': 'int',
        'spn_description': 'str',
        'spn_id': 'int',
        'tx_id': 'int'
    }

    attribute_map = {
        'fmi_id': 'fmiId',
        'fmi_text': 'fmiText',
        'occurrence_count': 'occurrenceCount',
        'spn_description': 'spnDescription',
        'spn_id': 'spnId',
        'tx_id': 'txId'
    }

    def __init__(self, fmi_id=None, fmi_text=None, occurrence_count=None, spn_description=None, spn_id=None, tx_id=None, local_vars_configuration=None):  # noqa: E501
        """V1VehicleMaintenanceJ1939DiagnosticTroubleCodes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fmi_id = None
        self._fmi_text = None
        self._occurrence_count = None
        self._spn_description = None
        self._spn_id = None
        self._tx_id = None
        self.discriminator = None

        self.fmi_id = fmi_id
        self.fmi_text = fmi_text
        self.occurrence_count = occurrence_count
        self.spn_description = spn_description
        self.spn_id = spn_id
        self.tx_id = tx_id

    @property
    def fmi_id(self):
        """Gets the fmi_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The fmi_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: int
        """
        return self._fmi_id

    @fmi_id.setter
    def fmi_id(self, fmi_id):
        """Sets the fmi_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param fmi_id: The fmi_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and fmi_id is None:  # noqa: E501
            raise ValueError("Invalid value for `fmi_id`, must not be `None`")  # noqa: E501

        self._fmi_id = fmi_id

    @property
    def fmi_text(self):
        """Gets the fmi_text of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The fmi_text of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: str
        """
        return self._fmi_text

    @fmi_text.setter
    def fmi_text(self, fmi_text):
        """Sets the fmi_text of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param fmi_text: The fmi_text of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and fmi_text is None:  # noqa: E501
            raise ValueError("Invalid value for `fmi_text`, must not be `None`")  # noqa: E501

        self._fmi_text = fmi_text

    @property
    def occurrence_count(self):
        """Gets the occurrence_count of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The occurrence_count of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: int
        """
        return self._occurrence_count

    @occurrence_count.setter
    def occurrence_count(self, occurrence_count):
        """Sets the occurrence_count of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param occurrence_count: The occurrence_count of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and occurrence_count is None:  # noqa: E501
            raise ValueError("Invalid value for `occurrence_count`, must not be `None`")  # noqa: E501

        self._occurrence_count = occurrence_count

    @property
    def spn_description(self):
        """Gets the spn_description of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The spn_description of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: str
        """
        return self._spn_description

    @spn_description.setter
    def spn_description(self, spn_description):
        """Sets the spn_description of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param spn_description: The spn_description of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and spn_description is None:  # noqa: E501
            raise ValueError("Invalid value for `spn_description`, must not be `None`")  # noqa: E501

        self._spn_description = spn_description

    @property
    def spn_id(self):
        """Gets the spn_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The spn_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: int
        """
        return self._spn_id

    @spn_id.setter
    def spn_id(self, spn_id):
        """Sets the spn_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param spn_id: The spn_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and spn_id is None:  # noqa: E501
            raise ValueError("Invalid value for `spn_id`, must not be `None`")  # noqa: E501

        self._spn_id = spn_id

    @property
    def tx_id(self):
        """Gets the tx_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501


        :return: The tx_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :rtype: int
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.


        :param tx_id: The tx_id of this V1VehicleMaintenanceJ1939DiagnosticTroubleCodes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and tx_id is None:  # noqa: E501
            raise ValueError("Invalid value for `tx_id`, must not be `None`")  # noqa: E501

        self._tx_id = tx_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VehicleMaintenanceJ1939DiagnosticTroubleCodes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VehicleMaintenanceJ1939DiagnosticTroubleCodes):
            return True

        return self.to_dict() != other.to_dict()
