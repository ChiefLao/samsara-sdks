# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VehicleLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'driver_id': 'int',
        'heading': 'float',
        'id': 'int',
        'latitude': 'float',
        'location': 'str',
        'longitude': 'float',
        'name': 'str',
        'odometer_meters': 'int',
        'odometer_type': 'str',
        'on_trip': 'bool',
        'route_ids': 'list[int]',
        'speed': 'float',
        'time': 'int',
        'vin': 'str'
    }

    attribute_map = {
        'driver_id': 'driverId',
        'heading': 'heading',
        'id': 'id',
        'latitude': 'latitude',
        'location': 'location',
        'longitude': 'longitude',
        'name': 'name',
        'odometer_meters': 'odometerMeters',
        'odometer_type': 'odometerType',
        'on_trip': 'onTrip',
        'route_ids': 'routeIds',
        'speed': 'speed',
        'time': 'time',
        'vin': 'vin'
    }

    def __init__(self, driver_id=None, heading=None, id=None, latitude=None, location=None, longitude=None, name=None, odometer_meters=None, odometer_type=None, on_trip=None, route_ids=None, speed=None, time=None, vin=None, local_vars_configuration=None):  # noqa: E501
        """V1VehicleLocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._driver_id = None
        self._heading = None
        self._id = None
        self._latitude = None
        self._location = None
        self._longitude = None
        self._name = None
        self._odometer_meters = None
        self._odometer_type = None
        self._on_trip = None
        self._route_ids = None
        self._speed = None
        self._time = None
        self._vin = None
        self.discriminator = None

        if driver_id is not None:
            self.driver_id = driver_id
        if heading is not None:
            self.heading = heading
        self.id = id
        if latitude is not None:
            self.latitude = latitude
        if location is not None:
            self.location = location
        if longitude is not None:
            self.longitude = longitude
        if name is not None:
            self.name = name
        if odometer_meters is not None:
            self.odometer_meters = odometer_meters
        if odometer_type is not None:
            self.odometer_type = odometer_type
        if on_trip is not None:
            self.on_trip = on_trip
        if route_ids is not None:
            self.route_ids = route_ids
        if speed is not None:
            self.speed = speed
        if time is not None:
            self.time = time
        if vin is not None:
            self.vin = vin

    @property
    def driver_id(self):
        """Gets the driver_id of this V1VehicleLocation.  # noqa: E501

        The ID of the driver currently assigned to this vehicle.  # noqa: E501

        :return: The driver_id of this V1VehicleLocation.  # noqa: E501
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this V1VehicleLocation.

        The ID of the driver currently assigned to this vehicle.  # noqa: E501

        :param driver_id: The driver_id of this V1VehicleLocation.  # noqa: E501
        :type: int
        """

        self._driver_id = driver_id

    @property
    def heading(self):
        """Gets the heading of this V1VehicleLocation.  # noqa: E501

        Heading in degrees.  # noqa: E501

        :return: The heading of this V1VehicleLocation.  # noqa: E501
        :rtype: float
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this V1VehicleLocation.

        Heading in degrees.  # noqa: E501

        :param heading: The heading of this V1VehicleLocation.  # noqa: E501
        :type: float
        """

        self._heading = heading

    @property
    def id(self):
        """Gets the id of this V1VehicleLocation.  # noqa: E501

        ID of the vehicle.  # noqa: E501

        :return: The id of this V1VehicleLocation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1VehicleLocation.

        ID of the vehicle.  # noqa: E501

        :param id: The id of this V1VehicleLocation.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this V1VehicleLocation.  # noqa: E501

        Latitude in decimal degrees.  # noqa: E501

        :return: The latitude of this V1VehicleLocation.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this V1VehicleLocation.

        Latitude in decimal degrees.  # noqa: E501

        :param latitude: The latitude of this V1VehicleLocation.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def location(self):
        """Gets the location of this V1VehicleLocation.  # noqa: E501

        Text representation of nearest identifiable location to (latitude, longitude) coordinates.  # noqa: E501

        :return: The location of this V1VehicleLocation.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this V1VehicleLocation.

        Text representation of nearest identifiable location to (latitude, longitude) coordinates.  # noqa: E501

        :param location: The location of this V1VehicleLocation.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def longitude(self):
        """Gets the longitude of this V1VehicleLocation.  # noqa: E501

        Longitude in decimal degrees.  # noqa: E501

        :return: The longitude of this V1VehicleLocation.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this V1VehicleLocation.

        Longitude in decimal degrees.  # noqa: E501

        :param longitude: The longitude of this V1VehicleLocation.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this V1VehicleLocation.  # noqa: E501

        Name of the vehicle.  # noqa: E501

        :return: The name of this V1VehicleLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1VehicleLocation.

        Name of the vehicle.  # noqa: E501

        :param name: The name of this V1VehicleLocation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def odometer_meters(self):
        """Gets the odometer_meters of this V1VehicleLocation.  # noqa: E501

        The number of meters reported by the odometer.  # noqa: E501

        :return: The odometer_meters of this V1VehicleLocation.  # noqa: E501
        :rtype: int
        """
        return self._odometer_meters

    @odometer_meters.setter
    def odometer_meters(self, odometer_meters):
        """Sets the odometer_meters of this V1VehicleLocation.

        The number of meters reported by the odometer.  # noqa: E501

        :param odometer_meters: The odometer_meters of this V1VehicleLocation.  # noqa: E501
        :type: int
        """

        self._odometer_meters = odometer_meters

    @property
    def odometer_type(self):
        """Gets the odometer_type of this V1VehicleLocation.  # noqa: E501

        The source of data for odometerMeters. Will be either GPS or OBD  # noqa: E501

        :return: The odometer_type of this V1VehicleLocation.  # noqa: E501
        :rtype: str
        """
        return self._odometer_type

    @odometer_type.setter
    def odometer_type(self, odometer_type):
        """Sets the odometer_type of this V1VehicleLocation.

        The source of data for odometerMeters. Will be either GPS or OBD  # noqa: E501

        :param odometer_type: The odometer_type of this V1VehicleLocation.  # noqa: E501
        :type: str
        """
        allowed_values = ["GPS", "OBD"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and odometer_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `odometer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(odometer_type, allowed_values)
            )

        self._odometer_type = odometer_type

    @property
    def on_trip(self):
        """Gets the on_trip of this V1VehicleLocation.  # noqa: E501

        Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.  # noqa: E501

        :return: The on_trip of this V1VehicleLocation.  # noqa: E501
        :rtype: bool
        """
        return self._on_trip

    @on_trip.setter
    def on_trip(self, on_trip):
        """Sets the on_trip of this V1VehicleLocation.

        Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.  # noqa: E501

        :param on_trip: The on_trip of this V1VehicleLocation.  # noqa: E501
        :type: bool
        """

        self._on_trip = on_trip

    @property
    def route_ids(self):
        """Gets the route_ids of this V1VehicleLocation.  # noqa: E501

        A list of currently active route IDs that the vehicle is in.  # noqa: E501

        :return: The route_ids of this V1VehicleLocation.  # noqa: E501
        :rtype: list[int]
        """
        return self._route_ids

    @route_ids.setter
    def route_ids(self, route_ids):
        """Sets the route_ids of this V1VehicleLocation.

        A list of currently active route IDs that the vehicle is in.  # noqa: E501

        :param route_ids: The route_ids of this V1VehicleLocation.  # noqa: E501
        :type: list[int]
        """

        self._route_ids = route_ids

    @property
    def speed(self):
        """Gets the speed of this V1VehicleLocation.  # noqa: E501

        Speed in miles per hour.  # noqa: E501

        :return: The speed of this V1VehicleLocation.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this V1VehicleLocation.

        Speed in miles per hour.  # noqa: E501

        :param speed: The speed of this V1VehicleLocation.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def time(self):
        """Gets the time of this V1VehicleLocation.  # noqa: E501

        The time the reported location was logged, reported as a UNIX timestamp in milliseconds.  # noqa: E501

        :return: The time of this V1VehicleLocation.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this V1VehicleLocation.

        The time the reported location was logged, reported as a UNIX timestamp in milliseconds.  # noqa: E501

        :param time: The time of this V1VehicleLocation.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def vin(self):
        """Gets the vin of this V1VehicleLocation.  # noqa: E501

        Vehicle Identification Number (VIN) of the vehicle.  # noqa: E501

        :return: The vin of this V1VehicleLocation.  # noqa: E501
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """Sets the vin of this V1VehicleLocation.

        Vehicle Identification Number (VIN) of the vehicle.  # noqa: E501

        :param vin: The vin of this V1VehicleLocation.  # noqa: E501
        :type: str
        """

        self._vin = vin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VehicleLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VehicleLocation):
            return True

        return self.to_dict() != other.to_dict()
