# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VehicleSafetyScoreResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'crash_count': 'int',
        'harsh_accel_count': 'int',
        'harsh_braking_count': 'int',
        'harsh_events': 'list[V1SafetyReportHarshEvent]',
        'harsh_turning_count': 'int',
        'safety_score': 'int',
        'safety_score_rank': 'str',
        'time_over_speed_limit_ms': 'int',
        'total_distance_driven_meters': 'int',
        'total_harsh_event_count': 'int',
        'total_time_driven_ms': 'int',
        'vehicle_id': 'int'
    }

    attribute_map = {
        'crash_count': 'crashCount',
        'harsh_accel_count': 'harshAccelCount',
        'harsh_braking_count': 'harshBrakingCount',
        'harsh_events': 'harshEvents',
        'harsh_turning_count': 'harshTurningCount',
        'safety_score': 'safetyScore',
        'safety_score_rank': 'safetyScoreRank',
        'time_over_speed_limit_ms': 'timeOverSpeedLimitMs',
        'total_distance_driven_meters': 'totalDistanceDrivenMeters',
        'total_harsh_event_count': 'totalHarshEventCount',
        'total_time_driven_ms': 'totalTimeDrivenMs',
        'vehicle_id': 'vehicleId'
    }

    def __init__(self, crash_count=None, harsh_accel_count=None, harsh_braking_count=None, harsh_events=None, harsh_turning_count=None, safety_score=None, safety_score_rank=None, time_over_speed_limit_ms=None, total_distance_driven_meters=None, total_harsh_event_count=None, total_time_driven_ms=None, vehicle_id=None, local_vars_configuration=None):  # noqa: E501
        """V1VehicleSafetyScoreResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._crash_count = None
        self._harsh_accel_count = None
        self._harsh_braking_count = None
        self._harsh_events = None
        self._harsh_turning_count = None
        self._safety_score = None
        self._safety_score_rank = None
        self._time_over_speed_limit_ms = None
        self._total_distance_driven_meters = None
        self._total_harsh_event_count = None
        self._total_time_driven_ms = None
        self._vehicle_id = None
        self.discriminator = None

        if crash_count is not None:
            self.crash_count = crash_count
        if harsh_accel_count is not None:
            self.harsh_accel_count = harsh_accel_count
        if harsh_braking_count is not None:
            self.harsh_braking_count = harsh_braking_count
        if harsh_events is not None:
            self.harsh_events = harsh_events
        if harsh_turning_count is not None:
            self.harsh_turning_count = harsh_turning_count
        if safety_score is not None:
            self.safety_score = safety_score
        if safety_score_rank is not None:
            self.safety_score_rank = safety_score_rank
        if time_over_speed_limit_ms is not None:
            self.time_over_speed_limit_ms = time_over_speed_limit_ms
        if total_distance_driven_meters is not None:
            self.total_distance_driven_meters = total_distance_driven_meters
        if total_harsh_event_count is not None:
            self.total_harsh_event_count = total_harsh_event_count
        if total_time_driven_ms is not None:
            self.total_time_driven_ms = total_time_driven_ms
        if vehicle_id is not None:
            self.vehicle_id = vehicle_id

    @property
    def crash_count(self):
        """Gets the crash_count of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Crash event count  # noqa: E501

        :return: The crash_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._crash_count

    @crash_count.setter
    def crash_count(self, crash_count):
        """Sets the crash_count of this V1VehicleSafetyScoreResponse.

        Crash event count  # noqa: E501

        :param crash_count: The crash_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._crash_count = crash_count

    @property
    def harsh_accel_count(self):
        """Gets the harsh_accel_count of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Harsh acceleration event count  # noqa: E501

        :return: The harsh_accel_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._harsh_accel_count

    @harsh_accel_count.setter
    def harsh_accel_count(self, harsh_accel_count):
        """Sets the harsh_accel_count of this V1VehicleSafetyScoreResponse.

        Harsh acceleration event count  # noqa: E501

        :param harsh_accel_count: The harsh_accel_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._harsh_accel_count = harsh_accel_count

    @property
    def harsh_braking_count(self):
        """Gets the harsh_braking_count of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Harsh braking event count  # noqa: E501

        :return: The harsh_braking_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._harsh_braking_count

    @harsh_braking_count.setter
    def harsh_braking_count(self, harsh_braking_count):
        """Sets the harsh_braking_count of this V1VehicleSafetyScoreResponse.

        Harsh braking event count  # noqa: E501

        :param harsh_braking_count: The harsh_braking_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._harsh_braking_count = harsh_braking_count

    @property
    def harsh_events(self):
        """Gets the harsh_events of this V1VehicleSafetyScoreResponse.  # noqa: E501


        :return: The harsh_events of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: list[V1SafetyReportHarshEvent]
        """
        return self._harsh_events

    @harsh_events.setter
    def harsh_events(self, harsh_events):
        """Sets the harsh_events of this V1VehicleSafetyScoreResponse.


        :param harsh_events: The harsh_events of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: list[V1SafetyReportHarshEvent]
        """

        self._harsh_events = harsh_events

    @property
    def harsh_turning_count(self):
        """Gets the harsh_turning_count of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Harsh turning event count  # noqa: E501

        :return: The harsh_turning_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._harsh_turning_count

    @harsh_turning_count.setter
    def harsh_turning_count(self, harsh_turning_count):
        """Sets the harsh_turning_count of this V1VehicleSafetyScoreResponse.

        Harsh turning event count  # noqa: E501

        :param harsh_turning_count: The harsh_turning_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._harsh_turning_count = harsh_turning_count

    @property
    def safety_score(self):
        """Gets the safety_score of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Safety Score  # noqa: E501

        :return: The safety_score of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._safety_score

    @safety_score.setter
    def safety_score(self, safety_score):
        """Sets the safety_score of this V1VehicleSafetyScoreResponse.

        Safety Score  # noqa: E501

        :param safety_score: The safety_score of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._safety_score = safety_score

    @property
    def safety_score_rank(self):
        """Gets the safety_score_rank of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Safety Score Rank  # noqa: E501

        :return: The safety_score_rank of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._safety_score_rank

    @safety_score_rank.setter
    def safety_score_rank(self, safety_score_rank):
        """Sets the safety_score_rank of this V1VehicleSafetyScoreResponse.

        Safety Score Rank  # noqa: E501

        :param safety_score_rank: The safety_score_rank of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: str
        """

        self._safety_score_rank = safety_score_rank

    @property
    def time_over_speed_limit_ms(self):
        """Gets the time_over_speed_limit_ms of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Amount of time driven over the speed limit in milliseconds  # noqa: E501

        :return: The time_over_speed_limit_ms of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._time_over_speed_limit_ms

    @time_over_speed_limit_ms.setter
    def time_over_speed_limit_ms(self, time_over_speed_limit_ms):
        """Sets the time_over_speed_limit_ms of this V1VehicleSafetyScoreResponse.

        Amount of time driven over the speed limit in milliseconds  # noqa: E501

        :param time_over_speed_limit_ms: The time_over_speed_limit_ms of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._time_over_speed_limit_ms = time_over_speed_limit_ms

    @property
    def total_distance_driven_meters(self):
        """Gets the total_distance_driven_meters of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Total distance driven in meters  # noqa: E501

        :return: The total_distance_driven_meters of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_distance_driven_meters

    @total_distance_driven_meters.setter
    def total_distance_driven_meters(self, total_distance_driven_meters):
        """Sets the total_distance_driven_meters of this V1VehicleSafetyScoreResponse.

        Total distance driven in meters  # noqa: E501

        :param total_distance_driven_meters: The total_distance_driven_meters of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._total_distance_driven_meters = total_distance_driven_meters

    @property
    def total_harsh_event_count(self):
        """Gets the total_harsh_event_count of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Total harsh event count  # noqa: E501

        :return: The total_harsh_event_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_harsh_event_count

    @total_harsh_event_count.setter
    def total_harsh_event_count(self, total_harsh_event_count):
        """Sets the total_harsh_event_count of this V1VehicleSafetyScoreResponse.

        Total harsh event count  # noqa: E501

        :param total_harsh_event_count: The total_harsh_event_count of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._total_harsh_event_count = total_harsh_event_count

    @property
    def total_time_driven_ms(self):
        """Gets the total_time_driven_ms of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Amount of time driven in milliseconds  # noqa: E501

        :return: The total_time_driven_ms of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_time_driven_ms

    @total_time_driven_ms.setter
    def total_time_driven_ms(self, total_time_driven_ms):
        """Sets the total_time_driven_ms of this V1VehicleSafetyScoreResponse.

        Amount of time driven in milliseconds  # noqa: E501

        :param total_time_driven_ms: The total_time_driven_ms of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._total_time_driven_ms = total_time_driven_ms

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this V1VehicleSafetyScoreResponse.  # noqa: E501

        Vehicle ID  # noqa: E501

        :return: The vehicle_id of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this V1VehicleSafetyScoreResponse.

        Vehicle ID  # noqa: E501

        :param vehicle_id: The vehicle_id of this V1VehicleSafetyScoreResponse.  # noqa: E501
        :type: int
        """

        self._vehicle_id = vehicle_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VehicleSafetyScoreResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VehicleSafetyScoreResponse):
            return True

        return self.to_dict() != other.to_dict()
