# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1DocumentField(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'label': 'str',
        'value': 'object',
        'date_time_value': 'V1DocumentFieldCreateDateTimeValue',
        'multiple_choice_value': 'list[V1DocumentFieldCreateMultipleChoiceValue]',
        'number_value': 'float',
        'string_value': 'str',
        'value_type': 'str'
    }

    attribute_map = {
        'label': 'label',
        'value': 'value',
        'date_time_value': 'dateTimeValue',
        'multiple_choice_value': 'multipleChoiceValue',
        'number_value': 'numberValue',
        'string_value': 'stringValue',
        'value_type': 'valueType'
    }

    def __init__(self, label=None, value=None, date_time_value=None, multiple_choice_value=None, number_value=None, string_value=None, value_type=None, local_vars_configuration=None):  # noqa: E501
        """V1DocumentField - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._label = None
        self._value = None
        self._date_time_value = None
        self._multiple_choice_value = None
        self._number_value = None
        self._string_value = None
        self._value_type = None
        self.discriminator = None

        self.label = label
        if value is not None:
            self.value = value
        if date_time_value is not None:
            self.date_time_value = date_time_value
        if multiple_choice_value is not None:
            self.multiple_choice_value = multiple_choice_value
        if number_value is not None:
            self.number_value = number_value
        if string_value is not None:
            self.string_value = string_value
        self.value_type = value_type

    @property
    def label(self):
        """Gets the label of this V1DocumentField.  # noqa: E501

        The name of the field.  # noqa: E501

        :return: The label of this V1DocumentField.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this V1DocumentField.

        The name of the field.  # noqa: E501

        :param label: The label of this V1DocumentField.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def value(self):
        """Gets the value of this V1DocumentField.  # noqa: E501

        DEPRECATED: Please use `stringValue`, `numberValue`, `photoValue`, `multipleChoiceValue`, `signatureValue`, or `dateTimeValue` instead.  # noqa: E501

        :return: The value of this V1DocumentField.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this V1DocumentField.

        DEPRECATED: Please use `stringValue`, `numberValue`, `photoValue`, `multipleChoiceValue`, `signatureValue`, or `dateTimeValue` instead.  # noqa: E501

        :param value: The value of this V1DocumentField.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def date_time_value(self):
        """Gets the date_time_value of this V1DocumentField.  # noqa: E501


        :return: The date_time_value of this V1DocumentField.  # noqa: E501
        :rtype: V1DocumentFieldCreateDateTimeValue
        """
        return self._date_time_value

    @date_time_value.setter
    def date_time_value(self, date_time_value):
        """Sets the date_time_value of this V1DocumentField.


        :param date_time_value: The date_time_value of this V1DocumentField.  # noqa: E501
        :type: V1DocumentFieldCreateDateTimeValue
        """

        self._date_time_value = date_time_value

    @property
    def multiple_choice_value(self):
        """Gets the multiple_choice_value of this V1DocumentField.  # noqa: E501

        The value of a `ValueType_MultipleChoice` field.  # noqa: E501

        :return: The multiple_choice_value of this V1DocumentField.  # noqa: E501
        :rtype: list[V1DocumentFieldCreateMultipleChoiceValue]
        """
        return self._multiple_choice_value

    @multiple_choice_value.setter
    def multiple_choice_value(self, multiple_choice_value):
        """Sets the multiple_choice_value of this V1DocumentField.

        The value of a `ValueType_MultipleChoice` field.  # noqa: E501

        :param multiple_choice_value: The multiple_choice_value of this V1DocumentField.  # noqa: E501
        :type: list[V1DocumentFieldCreateMultipleChoiceValue]
        """

        self._multiple_choice_value = multiple_choice_value

    @property
    def number_value(self):
        """Gets the number_value of this V1DocumentField.  # noqa: E501

        The value of a `ValueType_Number` field.  # noqa: E501

        :return: The number_value of this V1DocumentField.  # noqa: E501
        :rtype: float
        """
        return self._number_value

    @number_value.setter
    def number_value(self, number_value):
        """Sets the number_value of this V1DocumentField.

        The value of a `ValueType_Number` field.  # noqa: E501

        :param number_value: The number_value of this V1DocumentField.  # noqa: E501
        :type: float
        """

        self._number_value = number_value

    @property
    def string_value(self):
        """Gets the string_value of this V1DocumentField.  # noqa: E501

        The value of a `ValueType_String` field.  # noqa: E501

        :return: The string_value of this V1DocumentField.  # noqa: E501
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this V1DocumentField.

        The value of a `ValueType_String` field.  # noqa: E501

        :param string_value: The string_value of this V1DocumentField.  # noqa: E501
        :type: str
        """

        self._string_value = string_value

    @property
    def value_type(self):
        """Gets the value_type of this V1DocumentField.  # noqa: E501

        The type of this field. Valid values: `ValueType_Number`, `ValueType_String`, `ValueType_Photo`, `ValueType_MultipleChoice`, `ValueType_Signature`, `ValueType_DateTime`. When creating documents via API, only `ValueType_Number`, `ValueType_String`, `ValueType_MultipleChoice`, and `ValueType_DateTime` are accepted.  # noqa: E501

        :return: The value_type of this V1DocumentField.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this V1DocumentField.

        The type of this field. Valid values: `ValueType_Number`, `ValueType_String`, `ValueType_Photo`, `ValueType_MultipleChoice`, `ValueType_Signature`, `ValueType_DateTime`. When creating documents via API, only `ValueType_Number`, `ValueType_String`, `ValueType_MultipleChoice`, and `ValueType_DateTime` are accepted.  # noqa: E501

        :param value_type: The value_type of this V1DocumentField.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and value_type is None:  # noqa: E501
            raise ValueError("Invalid value for `value_type`, must not be `None`")  # noqa: E501

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DocumentField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1DocumentField):
            return True

        return self.to_dict() != other.to_dict()
