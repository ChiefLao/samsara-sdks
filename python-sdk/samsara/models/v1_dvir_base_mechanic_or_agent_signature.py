# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1DvirBaseMechanicOrAgentSignature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'driver_id': 'int',
        'email': 'str',
        'mechanic_user_id': 'int',
        'name': 'str',
        'signed_at': 'int',
        'type': 'str',
        'username': 'str'
    }

    attribute_map = {
        'driver_id': 'driverId',
        'email': 'email',
        'mechanic_user_id': 'mechanicUserId',
        'name': 'name',
        'signed_at': 'signedAt',
        'type': 'type',
        'username': 'username'
    }

    def __init__(self, driver_id=None, email=None, mechanic_user_id=None, name=None, signed_at=None, type=None, username=None, local_vars_configuration=None):  # noqa: E501
        """V1DvirBaseMechanicOrAgentSignature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._driver_id = None
        self._email = None
        self._mechanic_user_id = None
        self._name = None
        self._signed_at = None
        self._type = None
        self._username = None
        self.discriminator = None

        if driver_id is not None:
            self.driver_id = driver_id
        if email is not None:
            self.email = email
        if mechanic_user_id is not None:
            self.mechanic_user_id = mechanic_user_id
        if name is not None:
            self.name = name
        if signed_at is not None:
            self.signed_at = signed_at
        if type is not None:
            self.type = type
        if username is not None:
            self.username = username

    @property
    def driver_id(self):
        """Gets the driver_id of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501

        ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.  # noqa: E501

        :return: The driver_id of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this V1DvirBaseMechanicOrAgentSignature.

        ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.  # noqa: E501

        :param driver_id: The driver_id of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :type: int
        """

        self._driver_id = driver_id

    @property
    def email(self):
        """Gets the email of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501

        Email of the  agent|mechanic who signed the DVIR.  # noqa: E501

        :return: The email of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this V1DvirBaseMechanicOrAgentSignature.

        Email of the  agent|mechanic who signed the DVIR.  # noqa: E501

        :param email: The email of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def mechanic_user_id(self):
        """Gets the mechanic_user_id of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501

        ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.  # noqa: E501

        :return: The mechanic_user_id of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :rtype: int
        """
        return self._mechanic_user_id

    @mechanic_user_id.setter
    def mechanic_user_id(self, mechanic_user_id):
        """Sets the mechanic_user_id of this V1DvirBaseMechanicOrAgentSignature.

        ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.  # noqa: E501

        :param mechanic_user_id: The mechanic_user_id of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :type: int
        """

        self._mechanic_user_id = mechanic_user_id

    @property
    def name(self):
        """Gets the name of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501

        The name of the agent or mechanic who signed the DVIR.  # noqa: E501

        :return: The name of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1DvirBaseMechanicOrAgentSignature.

        The name of the agent or mechanic who signed the DVIR.  # noqa: E501

        :param name: The name of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def signed_at(self):
        """Gets the signed_at of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501

        The time in millis when the DVIR was signed  # noqa: E501

        :return: The signed_at of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :rtype: int
        """
        return self._signed_at

    @signed_at.setter
    def signed_at(self, signed_at):
        """Sets the signed_at of this V1DvirBaseMechanicOrAgentSignature.

        The time in millis when the DVIR was signed  # noqa: E501

        :param signed_at: The signed_at of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :type: int
        """

        self._signed_at = signed_at

    @property
    def type(self):
        """Gets the type of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501

        Type corresponds to whether the signature corresponds to driver|mechanic.  # noqa: E501

        :return: The type of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1DvirBaseMechanicOrAgentSignature.

        Type corresponds to whether the signature corresponds to driver|mechanic.  # noqa: E501

        :param type: The type of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def username(self):
        """Gets the username of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501

        Username of the  agent|mechanic who signed the DVIR.  # noqa: E501

        :return: The username of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this V1DvirBaseMechanicOrAgentSignature.

        Username of the  agent|mechanic who signed the DVIR.  # noqa: E501

        :param username: The username of this V1DvirBaseMechanicOrAgentSignature.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DvirBaseMechanicOrAgentSignature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1DvirBaseMechanicOrAgentSignature):
            return True

        return self.to_dict() != other.to_dict()
