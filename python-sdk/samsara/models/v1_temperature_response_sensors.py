# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1TemperatureResponseSensors(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ambient_temperature': 'int',
        'ambient_temperature_time': 'str',
        'id': 'int',
        'name': 'str',
        'probe_temperature': 'int',
        'probe_temperature_time': 'str',
        'trailer_id': 'int',
        'vehicle_id': 'int'
    }

    attribute_map = {
        'ambient_temperature': 'ambientTemperature',
        'ambient_temperature_time': 'ambientTemperatureTime',
        'id': 'id',
        'name': 'name',
        'probe_temperature': 'probeTemperature',
        'probe_temperature_time': 'probeTemperatureTime',
        'trailer_id': 'trailerId',
        'vehicle_id': 'vehicleId'
    }

    def __init__(self, ambient_temperature=None, ambient_temperature_time=None, id=None, name=None, probe_temperature=None, probe_temperature_time=None, trailer_id=None, vehicle_id=None, local_vars_configuration=None):  # noqa: E501
        """V1TemperatureResponseSensors - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ambient_temperature = None
        self._ambient_temperature_time = None
        self._id = None
        self._name = None
        self._probe_temperature = None
        self._probe_temperature_time = None
        self._trailer_id = None
        self._vehicle_id = None
        self.discriminator = None

        if ambient_temperature is not None:
            self.ambient_temperature = ambient_temperature
        if ambient_temperature_time is not None:
            self.ambient_temperature_time = ambient_temperature_time
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if probe_temperature is not None:
            self.probe_temperature = probe_temperature
        if probe_temperature_time is not None:
            self.probe_temperature_time = probe_temperature_time
        if trailer_id is not None:
            self.trailer_id = trailer_id
        if vehicle_id is not None:
            self.vehicle_id = vehicle_id

    @property
    def ambient_temperature(self):
        """Gets the ambient_temperature of this V1TemperatureResponseSensors.  # noqa: E501

        Currently reported ambient temperature in millidegrees celsius.  # noqa: E501

        :return: The ambient_temperature of this V1TemperatureResponseSensors.  # noqa: E501
        :rtype: int
        """
        return self._ambient_temperature

    @ambient_temperature.setter
    def ambient_temperature(self, ambient_temperature):
        """Sets the ambient_temperature of this V1TemperatureResponseSensors.

        Currently reported ambient temperature in millidegrees celsius.  # noqa: E501

        :param ambient_temperature: The ambient_temperature of this V1TemperatureResponseSensors.  # noqa: E501
        :type: int
        """

        self._ambient_temperature = ambient_temperature

    @property
    def ambient_temperature_time(self):
        """Gets the ambient_temperature_time of this V1TemperatureResponseSensors.  # noqa: E501

        The timestamp of reported ambient temperature, specified in RFC 3339 time.  # noqa: E501

        :return: The ambient_temperature_time of this V1TemperatureResponseSensors.  # noqa: E501
        :rtype: str
        """
        return self._ambient_temperature_time

    @ambient_temperature_time.setter
    def ambient_temperature_time(self, ambient_temperature_time):
        """Sets the ambient_temperature_time of this V1TemperatureResponseSensors.

        The timestamp of reported ambient temperature, specified in RFC 3339 time.  # noqa: E501

        :param ambient_temperature_time: The ambient_temperature_time of this V1TemperatureResponseSensors.  # noqa: E501
        :type: str
        """

        self._ambient_temperature_time = ambient_temperature_time

    @property
    def id(self):
        """Gets the id of this V1TemperatureResponseSensors.  # noqa: E501

        ID of the sensor.  # noqa: E501

        :return: The id of this V1TemperatureResponseSensors.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1TemperatureResponseSensors.

        ID of the sensor.  # noqa: E501

        :param id: The id of this V1TemperatureResponseSensors.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this V1TemperatureResponseSensors.  # noqa: E501

        Name of the sensor.  # noqa: E501

        :return: The name of this V1TemperatureResponseSensors.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1TemperatureResponseSensors.

        Name of the sensor.  # noqa: E501

        :param name: The name of this V1TemperatureResponseSensors.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def probe_temperature(self):
        """Gets the probe_temperature of this V1TemperatureResponseSensors.  # noqa: E501

        Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.  # noqa: E501

        :return: The probe_temperature of this V1TemperatureResponseSensors.  # noqa: E501
        :rtype: int
        """
        return self._probe_temperature

    @probe_temperature.setter
    def probe_temperature(self, probe_temperature):
        """Sets the probe_temperature of this V1TemperatureResponseSensors.

        Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.  # noqa: E501

        :param probe_temperature: The probe_temperature of this V1TemperatureResponseSensors.  # noqa: E501
        :type: int
        """

        self._probe_temperature = probe_temperature

    @property
    def probe_temperature_time(self):
        """Gets the probe_temperature_time of this V1TemperatureResponseSensors.  # noqa: E501

        The timestamp of reported probe temperature, specified in RFC 3339 time.  # noqa: E501

        :return: The probe_temperature_time of this V1TemperatureResponseSensors.  # noqa: E501
        :rtype: str
        """
        return self._probe_temperature_time

    @probe_temperature_time.setter
    def probe_temperature_time(self, probe_temperature_time):
        """Sets the probe_temperature_time of this V1TemperatureResponseSensors.

        The timestamp of reported probe temperature, specified in RFC 3339 time.  # noqa: E501

        :param probe_temperature_time: The probe_temperature_time of this V1TemperatureResponseSensors.  # noqa: E501
        :type: str
        """

        self._probe_temperature_time = probe_temperature_time

    @property
    def trailer_id(self):
        """Gets the trailer_id of this V1TemperatureResponseSensors.  # noqa: E501

        ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.  # noqa: E501

        :return: The trailer_id of this V1TemperatureResponseSensors.  # noqa: E501
        :rtype: int
        """
        return self._trailer_id

    @trailer_id.setter
    def trailer_id(self, trailer_id):
        """Sets the trailer_id of this V1TemperatureResponseSensors.

        ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.  # noqa: E501

        :param trailer_id: The trailer_id of this V1TemperatureResponseSensors.  # noqa: E501
        :type: int
        """

        self._trailer_id = trailer_id

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this V1TemperatureResponseSensors.  # noqa: E501

        ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.  # noqa: E501

        :return: The vehicle_id of this V1TemperatureResponseSensors.  # noqa: E501
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this V1TemperatureResponseSensors.

        ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.  # noqa: E501

        :param vehicle_id: The vehicle_id of this V1TemperatureResponseSensors.  # noqa: E501
        :type: int
        """

        self._vehicle_id = vehicle_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TemperatureResponseSensors):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1TemperatureResponseSensors):
            return True

        return self.to_dict() != other.to_dict()
