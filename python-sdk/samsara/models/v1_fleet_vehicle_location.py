# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1FleetVehicleLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'latitude': 'float',
        'location': 'str',
        'longitude': 'float',
        'speed_miles_per_hour': 'float',
        'time_ms': 'float'
    }

    attribute_map = {
        'latitude': 'latitude',
        'location': 'location',
        'longitude': 'longitude',
        'speed_miles_per_hour': 'speedMilesPerHour',
        'time_ms': 'timeMs'
    }

    def __init__(self, latitude=None, location=None, longitude=None, speed_miles_per_hour=None, time_ms=None, local_vars_configuration=None):  # noqa: E501
        """V1FleetVehicleLocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._latitude = None
        self._location = None
        self._longitude = None
        self._speed_miles_per_hour = None
        self._time_ms = None
        self.discriminator = None

        if latitude is not None:
            self.latitude = latitude
        if location is not None:
            self.location = location
        if longitude is not None:
            self.longitude = longitude
        if speed_miles_per_hour is not None:
            self.speed_miles_per_hour = speed_miles_per_hour
        if time_ms is not None:
            self.time_ms = time_ms

    @property
    def latitude(self):
        """Gets the latitude of this V1FleetVehicleLocation.  # noqa: E501

        The latitude of the location in degrees.  # noqa: E501

        :return: The latitude of this V1FleetVehicleLocation.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this V1FleetVehicleLocation.

        The latitude of the location in degrees.  # noqa: E501

        :param latitude: The latitude of this V1FleetVehicleLocation.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def location(self):
        """Gets the location of this V1FleetVehicleLocation.  # noqa: E501

        The best effort (street,city,state) for the latitude and longitude.  # noqa: E501

        :return: The location of this V1FleetVehicleLocation.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this V1FleetVehicleLocation.

        The best effort (street,city,state) for the latitude and longitude.  # noqa: E501

        :param location: The location of this V1FleetVehicleLocation.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def longitude(self):
        """Gets the longitude of this V1FleetVehicleLocation.  # noqa: E501

        The longitude of the location in degrees.  # noqa: E501

        :return: The longitude of this V1FleetVehicleLocation.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this V1FleetVehicleLocation.

        The longitude of the location in degrees.  # noqa: E501

        :param longitude: The longitude of this V1FleetVehicleLocation.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def speed_miles_per_hour(self):
        """Gets the speed_miles_per_hour of this V1FleetVehicleLocation.  # noqa: E501

        The speed calculated from GPS that the asset was traveling at in miles per hour.  # noqa: E501

        :return: The speed_miles_per_hour of this V1FleetVehicleLocation.  # noqa: E501
        :rtype: float
        """
        return self._speed_miles_per_hour

    @speed_miles_per_hour.setter
    def speed_miles_per_hour(self, speed_miles_per_hour):
        """Sets the speed_miles_per_hour of this V1FleetVehicleLocation.

        The speed calculated from GPS that the asset was traveling at in miles per hour.  # noqa: E501

        :param speed_miles_per_hour: The speed_miles_per_hour of this V1FleetVehicleLocation.  # noqa: E501
        :type: float
        """

        self._speed_miles_per_hour = speed_miles_per_hour

    @property
    def time_ms(self):
        """Gets the time_ms of this V1FleetVehicleLocation.  # noqa: E501

        Time in Unix milliseconds since epoch when the asset was at the location.  # noqa: E501

        :return: The time_ms of this V1FleetVehicleLocation.  # noqa: E501
        :rtype: float
        """
        return self._time_ms

    @time_ms.setter
    def time_ms(self, time_ms):
        """Sets the time_ms of this V1FleetVehicleLocation.

        Time in Unix milliseconds since epoch when the asset was at the location.  # noqa: E501

        :param time_ms: The time_ms of this V1FleetVehicleLocation.  # noqa: E501
        :type: float
        """

        self._time_ms = time_ms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1FleetVehicleLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1FleetVehicleLocation):
            return True

        return self.to_dict() != other.to_dict()
