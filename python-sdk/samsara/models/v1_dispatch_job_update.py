# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1DispatchJobUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'destination_address': 'str',
        'destination_address_id': 'int',
        'destination_lat': 'float',
        'destination_lng': 'float',
        'destination_name': 'str',
        'notes': 'str',
        'scheduled_arrival_time_ms': 'int',
        'scheduled_departure_time_ms': 'int'
    }

    attribute_map = {
        'id': 'id',
        'destination_address': 'destination_address',
        'destination_address_id': 'destination_address_id',
        'destination_lat': 'destination_lat',
        'destination_lng': 'destination_lng',
        'destination_name': 'destination_name',
        'notes': 'notes',
        'scheduled_arrival_time_ms': 'scheduled_arrival_time_ms',
        'scheduled_departure_time_ms': 'scheduled_departure_time_ms'
    }

    def __init__(self, id=None, destination_address=None, destination_address_id=None, destination_lat=None, destination_lng=None, destination_name=None, notes=None, scheduled_arrival_time_ms=None, scheduled_departure_time_ms=None, local_vars_configuration=None):  # noqa: E501
        """V1DispatchJobUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._destination_address = None
        self._destination_address_id = None
        self._destination_lat = None
        self._destination_lng = None
        self._destination_name = None
        self._notes = None
        self._scheduled_arrival_time_ms = None
        self._scheduled_departure_time_ms = None
        self.discriminator = None

        self.id = id
        if destination_address is not None:
            self.destination_address = destination_address
        if destination_address_id is not None:
            self.destination_address_id = destination_address_id
        if destination_lat is not None:
            self.destination_lat = destination_lat
        if destination_lng is not None:
            self.destination_lng = destination_lng
        if destination_name is not None:
            self.destination_name = destination_name
        if notes is not None:
            self.notes = notes
        self.scheduled_arrival_time_ms = scheduled_arrival_time_ms
        if scheduled_departure_time_ms is not None:
            self.scheduled_departure_time_ms = scheduled_departure_time_ms

    @property
    def id(self):
        """Gets the id of this V1DispatchJobUpdate.  # noqa: E501

        ID of the Samsara dispatch job to update  # noqa: E501

        :return: The id of this V1DispatchJobUpdate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1DispatchJobUpdate.

        ID of the Samsara dispatch job to update  # noqa: E501

        :param id: The id of this V1DispatchJobUpdate.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def destination_address(self):
        """Gets the destination_address of this V1DispatchJobUpdate.  # noqa: E501

        The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.  # noqa: E501

        :return: The destination_address of this V1DispatchJobUpdate.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this V1DispatchJobUpdate.

        The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.  # noqa: E501

        :param destination_address: The destination_address of this V1DispatchJobUpdate.  # noqa: E501
        :type: str
        """

        self._destination_address = destination_address

    @property
    def destination_address_id(self):
        """Gets the destination_address_id of this V1DispatchJobUpdate.  # noqa: E501

        ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address and latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.  # noqa: E501

        :return: The destination_address_id of this V1DispatchJobUpdate.  # noqa: E501
        :rtype: int
        """
        return self._destination_address_id

    @destination_address_id.setter
    def destination_address_id(self, destination_address_id):
        """Sets the destination_address_id of this V1DispatchJobUpdate.

        ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address and latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.  # noqa: E501

        :param destination_address_id: The destination_address_id of this V1DispatchJobUpdate.  # noqa: E501
        :type: int
        """

        self._destination_address_id = destination_address_id

    @property
    def destination_lat(self):
        """Gets the destination_lat of this V1DispatchJobUpdate.  # noqa: E501

        Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.  # noqa: E501

        :return: The destination_lat of this V1DispatchJobUpdate.  # noqa: E501
        :rtype: float
        """
        return self._destination_lat

    @destination_lat.setter
    def destination_lat(self, destination_lat):
        """Sets the destination_lat of this V1DispatchJobUpdate.

        Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.  # noqa: E501

        :param destination_lat: The destination_lat of this V1DispatchJobUpdate.  # noqa: E501
        :type: float
        """

        self._destination_lat = destination_lat

    @property
    def destination_lng(self):
        """Gets the destination_lng of this V1DispatchJobUpdate.  # noqa: E501

        Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.  # noqa: E501

        :return: The destination_lng of this V1DispatchJobUpdate.  # noqa: E501
        :rtype: float
        """
        return self._destination_lng

    @destination_lng.setter
    def destination_lng(self, destination_lng):
        """Sets the destination_lng of this V1DispatchJobUpdate.

        Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.  # noqa: E501

        :param destination_lng: The destination_lng of this V1DispatchJobUpdate.  # noqa: E501
        :type: float
        """

        self._destination_lng = destination_lng

    @property
    def destination_name(self):
        """Gets the destination_name of this V1DispatchJobUpdate.  # noqa: E501

        The name of the job destination. If provided, it will take precedence over the name of the address book entry.  # noqa: E501

        :return: The destination_name of this V1DispatchJobUpdate.  # noqa: E501
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this V1DispatchJobUpdate.

        The name of the job destination. If provided, it will take precedence over the name of the address book entry.  # noqa: E501

        :param destination_name: The destination_name of this V1DispatchJobUpdate.  # noqa: E501
        :type: str
        """

        self._destination_name = destination_name

    @property
    def notes(self):
        """Gets the notes of this V1DispatchJobUpdate.  # noqa: E501

        Notes regarding the details of this job, maximum of 2000 characters; newline characters ('\\n')can be used for formatting.  # noqa: E501

        :return: The notes of this V1DispatchJobUpdate.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this V1DispatchJobUpdate.

        Notes regarding the details of this job, maximum of 2000 characters; newline characters ('\\n')can be used for formatting.  # noqa: E501

        :param notes: The notes of this V1DispatchJobUpdate.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def scheduled_arrival_time_ms(self):
        """Gets the scheduled_arrival_time_ms of this V1DispatchJobUpdate.  # noqa: E501

        The time at which the assigned driver is scheduled to arrive at the job destination.  # noqa: E501

        :return: The scheduled_arrival_time_ms of this V1DispatchJobUpdate.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_arrival_time_ms

    @scheduled_arrival_time_ms.setter
    def scheduled_arrival_time_ms(self, scheduled_arrival_time_ms):
        """Sets the scheduled_arrival_time_ms of this V1DispatchJobUpdate.

        The time at which the assigned driver is scheduled to arrive at the job destination.  # noqa: E501

        :param scheduled_arrival_time_ms: The scheduled_arrival_time_ms of this V1DispatchJobUpdate.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and scheduled_arrival_time_ms is None:  # noqa: E501
            raise ValueError("Invalid value for `scheduled_arrival_time_ms`, must not be `None`")  # noqa: E501

        self._scheduled_arrival_time_ms = scheduled_arrival_time_ms

    @property
    def scheduled_departure_time_ms(self):
        """Gets the scheduled_departure_time_ms of this V1DispatchJobUpdate.  # noqa: E501

        The time at which the assigned driver is scheduled to depart from the job destination.  # noqa: E501

        :return: The scheduled_departure_time_ms of this V1DispatchJobUpdate.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_departure_time_ms

    @scheduled_departure_time_ms.setter
    def scheduled_departure_time_ms(self, scheduled_departure_time_ms):
        """Sets the scheduled_departure_time_ms of this V1DispatchJobUpdate.

        The time at which the assigned driver is scheduled to depart from the job destination.  # noqa: E501

        :param scheduled_departure_time_ms: The scheduled_departure_time_ms of this V1DispatchJobUpdate.  # noqa: E501
        :type: int
        """

        self._scheduled_departure_time_ms = scheduled_departure_time_ms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DispatchJobUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1DispatchJobUpdate):
            return True

        return self.to_dict() != other.to_dict()
