# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DriverUpdateAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_vehicle_id': 'str',
        'password': 'str',
        'static_assigned_vehicle_id': 'str',
        'tag_ids': 'list[str]',
        'vehicle_group_tag_id': 'str'
    }

    attribute_map = {
        'current_vehicle_id': 'currentVehicleId',
        'password': 'password',
        'static_assigned_vehicle_id': 'staticAssignedVehicleId',
        'tag_ids': 'tagIds',
        'vehicle_group_tag_id': 'vehicleGroupTagId'
    }

    def __init__(self, current_vehicle_id=None, password=None, static_assigned_vehicle_id=None, tag_ids=None, vehicle_group_tag_id=None, local_vars_configuration=None):  # noqa: E501
        """DriverUpdateAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._current_vehicle_id = None
        self._password = None
        self._static_assigned_vehicle_id = None
        self._tag_ids = None
        self._vehicle_group_tag_id = None
        self.discriminator = None

        if current_vehicle_id is not None:
            self.current_vehicle_id = current_vehicle_id
        if password is not None:
            self.password = password
        if static_assigned_vehicle_id is not None:
            self.static_assigned_vehicle_id = static_assigned_vehicle_id
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if vehicle_group_tag_id is not None:
            self.vehicle_group_tag_id = vehicle_group_tag_id

    @property
    def current_vehicle_id(self):
        """Gets the current_vehicle_id of this DriverUpdateAllOf.  # noqa: E501

        ID of vehicle that driver is currently assigned to.  # noqa: E501

        :return: The current_vehicle_id of this DriverUpdateAllOf.  # noqa: E501
        :rtype: str
        """
        return self._current_vehicle_id

    @current_vehicle_id.setter
    def current_vehicle_id(self, current_vehicle_id):
        """Sets the current_vehicle_id of this DriverUpdateAllOf.

        ID of vehicle that driver is currently assigned to.  # noqa: E501

        :param current_vehicle_id: The current_vehicle_id of this DriverUpdateAllOf.  # noqa: E501
        :type: str
        """

        self._current_vehicle_id = current_vehicle_id

    @property
    def password(self):
        """Gets the password of this DriverUpdateAllOf.  # noqa: E501

        Password that the driver can use to login to the Samsara driver app.  # noqa: E501

        :return: The password of this DriverUpdateAllOf.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DriverUpdateAllOf.

        Password that the driver can use to login to the Samsara driver app.  # noqa: E501

        :param password: The password of this DriverUpdateAllOf.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def static_assigned_vehicle_id(self):
        """Gets the static_assigned_vehicle_id of this DriverUpdateAllOf.  # noqa: E501

        ID of vehicle assigned to the driver for static vehicle assignments. (uncommon).  # noqa: E501

        :return: The static_assigned_vehicle_id of this DriverUpdateAllOf.  # noqa: E501
        :rtype: str
        """
        return self._static_assigned_vehicle_id

    @static_assigned_vehicle_id.setter
    def static_assigned_vehicle_id(self, static_assigned_vehicle_id):
        """Sets the static_assigned_vehicle_id of this DriverUpdateAllOf.

        ID of vehicle assigned to the driver for static vehicle assignments. (uncommon).  # noqa: E501

        :param static_assigned_vehicle_id: The static_assigned_vehicle_id of this DriverUpdateAllOf.  # noqa: E501
        :type: str
        """

        self._static_assigned_vehicle_id = static_assigned_vehicle_id

    @property
    def tag_ids(self):
        """Gets the tag_ids of this DriverUpdateAllOf.  # noqa: E501

        IDs of tags the driver is associated with.  # noqa: E501

        :return: The tag_ids of this DriverUpdateAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this DriverUpdateAllOf.

        IDs of tags the driver is associated with.  # noqa: E501

        :param tag_ids: The tag_ids of this DriverUpdateAllOf.  # noqa: E501
        :type: list[str]
        """

        self._tag_ids = tag_ids

    @property
    def vehicle_group_tag_id(self):
        """Gets the vehicle_group_tag_id of this DriverUpdateAllOf.  # noqa: E501

        Tag ID which determines which vehicles a driver will see when selecting vehicles.  # noqa: E501

        :return: The vehicle_group_tag_id of this DriverUpdateAllOf.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_group_tag_id

    @vehicle_group_tag_id.setter
    def vehicle_group_tag_id(self, vehicle_group_tag_id):
        """Sets the vehicle_group_tag_id of this DriverUpdateAllOf.

        Tag ID which determines which vehicles a driver will see when selecting vehicles.  # noqa: E501

        :param vehicle_group_tag_id: The vehicle_group_tag_id of this DriverUpdateAllOf.  # noqa: E501
        :type: str
        """

        self._vehicle_group_tag_id = vehicle_group_tag_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriverUpdateAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriverUpdateAllOf):
            return True

        return self.to_dict() != other.to_dict()
