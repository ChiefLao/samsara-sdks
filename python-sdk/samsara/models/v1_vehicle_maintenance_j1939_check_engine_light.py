# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1VehicleMaintenanceJ1939CheckEngineLight(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'emissions_is_on': 'bool',
        'protect_is_on': 'bool',
        'stop_is_on': 'bool',
        'warning_is_on': 'bool'
    }

    attribute_map = {
        'emissions_is_on': 'emissionsIsOn',
        'protect_is_on': 'protectIsOn',
        'stop_is_on': 'stopIsOn',
        'warning_is_on': 'warningIsOn'
    }

    def __init__(self, emissions_is_on=None, protect_is_on=None, stop_is_on=None, warning_is_on=None, local_vars_configuration=None):  # noqa: E501
        """V1VehicleMaintenanceJ1939CheckEngineLight - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._emissions_is_on = None
        self._protect_is_on = None
        self._stop_is_on = None
        self._warning_is_on = None
        self.discriminator = None

        if emissions_is_on is not None:
            self.emissions_is_on = emissions_is_on
        if protect_is_on is not None:
            self.protect_is_on = protect_is_on
        if stop_is_on is not None:
            self.stop_is_on = stop_is_on
        if warning_is_on is not None:
            self.warning_is_on = warning_is_on

    @property
    def emissions_is_on(self):
        """Gets the emissions_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501


        :return: The emissions_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501
        :rtype: bool
        """
        return self._emissions_is_on

    @emissions_is_on.setter
    def emissions_is_on(self, emissions_is_on):
        """Sets the emissions_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.


        :param emissions_is_on: The emissions_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501
        :type: bool
        """

        self._emissions_is_on = emissions_is_on

    @property
    def protect_is_on(self):
        """Gets the protect_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501


        :return: The protect_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501
        :rtype: bool
        """
        return self._protect_is_on

    @protect_is_on.setter
    def protect_is_on(self, protect_is_on):
        """Sets the protect_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.


        :param protect_is_on: The protect_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501
        :type: bool
        """

        self._protect_is_on = protect_is_on

    @property
    def stop_is_on(self):
        """Gets the stop_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501


        :return: The stop_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501
        :rtype: bool
        """
        return self._stop_is_on

    @stop_is_on.setter
    def stop_is_on(self, stop_is_on):
        """Sets the stop_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.


        :param stop_is_on: The stop_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501
        :type: bool
        """

        self._stop_is_on = stop_is_on

    @property
    def warning_is_on(self):
        """Gets the warning_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501


        :return: The warning_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501
        :rtype: bool
        """
        return self._warning_is_on

    @warning_is_on.setter
    def warning_is_on(self, warning_is_on):
        """Sets the warning_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.


        :param warning_is_on: The warning_is_on of this V1VehicleMaintenanceJ1939CheckEngineLight.  # noqa: E501
        :type: bool
        """

        self._warning_is_on = warning_is_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VehicleMaintenanceJ1939CheckEngineLight):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VehicleMaintenanceJ1939CheckEngineLight):
            return True

        return self.to_dict() != other.to_dict()
