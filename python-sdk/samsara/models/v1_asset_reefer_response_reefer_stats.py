# coding: utf-8

"""
    Samsara API

    This is the Samsara API.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class V1AssetReeferResponseReeferStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alarms': 'list[V1AssetReeferResponseReeferStatsAlarms1]',
        'engine_hours': 'list[V1AssetReeferResponseReeferStatsEngineHours]',
        'fuel_percentage': 'list[V1AssetReeferResponseReeferStatsFuelPercentage]',
        'power_status': 'list[V1AssetReeferResponseReeferStatsPowerStatus]',
        'return_air_temp': 'list[V1AssetReeferResponseReeferStatsReturnAirTemp]',
        'set_point': 'list[V1AssetReeferResponseReeferStatsSetPoint]'
    }

    attribute_map = {
        'alarms': 'alarms',
        'engine_hours': 'engineHours',
        'fuel_percentage': 'fuelPercentage',
        'power_status': 'powerStatus',
        'return_air_temp': 'returnAirTemp',
        'set_point': 'setPoint'
    }

    def __init__(self, alarms=None, engine_hours=None, fuel_percentage=None, power_status=None, return_air_temp=None, set_point=None, local_vars_configuration=None):  # noqa: E501
        """V1AssetReeferResponseReeferStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alarms = None
        self._engine_hours = None
        self._fuel_percentage = None
        self._power_status = None
        self._return_air_temp = None
        self._set_point = None
        self.discriminator = None

        if alarms is not None:
            self.alarms = alarms
        if engine_hours is not None:
            self.engine_hours = engine_hours
        if fuel_percentage is not None:
            self.fuel_percentage = fuel_percentage
        if power_status is not None:
            self.power_status = power_status
        if return_air_temp is not None:
            self.return_air_temp = return_air_temp
        if set_point is not None:
            self.set_point = set_point

    @property
    def alarms(self):
        """Gets the alarms of this V1AssetReeferResponseReeferStats.  # noqa: E501

        Reefer alarms  # noqa: E501

        :return: The alarms of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :rtype: list[V1AssetReeferResponseReeferStatsAlarms1]
        """
        return self._alarms

    @alarms.setter
    def alarms(self, alarms):
        """Sets the alarms of this V1AssetReeferResponseReeferStats.

        Reefer alarms  # noqa: E501

        :param alarms: The alarms of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :type: list[V1AssetReeferResponseReeferStatsAlarms1]
        """

        self._alarms = alarms

    @property
    def engine_hours(self):
        """Gets the engine_hours of this V1AssetReeferResponseReeferStats.  # noqa: E501

        Engine hours of the reefer  # noqa: E501

        :return: The engine_hours of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :rtype: list[V1AssetReeferResponseReeferStatsEngineHours]
        """
        return self._engine_hours

    @engine_hours.setter
    def engine_hours(self, engine_hours):
        """Sets the engine_hours of this V1AssetReeferResponseReeferStats.

        Engine hours of the reefer  # noqa: E501

        :param engine_hours: The engine_hours of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :type: list[V1AssetReeferResponseReeferStatsEngineHours]
        """

        self._engine_hours = engine_hours

    @property
    def fuel_percentage(self):
        """Gets the fuel_percentage of this V1AssetReeferResponseReeferStats.  # noqa: E501

        Fuel percentage of the reefer  # noqa: E501

        :return: The fuel_percentage of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :rtype: list[V1AssetReeferResponseReeferStatsFuelPercentage]
        """
        return self._fuel_percentage

    @fuel_percentage.setter
    def fuel_percentage(self, fuel_percentage):
        """Sets the fuel_percentage of this V1AssetReeferResponseReeferStats.

        Fuel percentage of the reefer  # noqa: E501

        :param fuel_percentage: The fuel_percentage of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :type: list[V1AssetReeferResponseReeferStatsFuelPercentage]
        """

        self._fuel_percentage = fuel_percentage

    @property
    def power_status(self):
        """Gets the power_status of this V1AssetReeferResponseReeferStats.  # noqa: E501

        Power status of the reefer  # noqa: E501

        :return: The power_status of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :rtype: list[V1AssetReeferResponseReeferStatsPowerStatus]
        """
        return self._power_status

    @power_status.setter
    def power_status(self, power_status):
        """Sets the power_status of this V1AssetReeferResponseReeferStats.

        Power status of the reefer  # noqa: E501

        :param power_status: The power_status of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :type: list[V1AssetReeferResponseReeferStatsPowerStatus]
        """

        self._power_status = power_status

    @property
    def return_air_temp(self):
        """Gets the return_air_temp of this V1AssetReeferResponseReeferStats.  # noqa: E501

        Return air temperature of the reefer  # noqa: E501

        :return: The return_air_temp of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :rtype: list[V1AssetReeferResponseReeferStatsReturnAirTemp]
        """
        return self._return_air_temp

    @return_air_temp.setter
    def return_air_temp(self, return_air_temp):
        """Sets the return_air_temp of this V1AssetReeferResponseReeferStats.

        Return air temperature of the reefer  # noqa: E501

        :param return_air_temp: The return_air_temp of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :type: list[V1AssetReeferResponseReeferStatsReturnAirTemp]
        """

        self._return_air_temp = return_air_temp

    @property
    def set_point(self):
        """Gets the set_point of this V1AssetReeferResponseReeferStats.  # noqa: E501

        Set point temperature of the reefer  # noqa: E501

        :return: The set_point of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :rtype: list[V1AssetReeferResponseReeferStatsSetPoint]
        """
        return self._set_point

    @set_point.setter
    def set_point(self, set_point):
        """Sets the set_point of this V1AssetReeferResponseReeferStats.

        Set point temperature of the reefer  # noqa: E501

        :param set_point: The set_point of this V1AssetReeferResponseReeferStats.  # noqa: E501
        :type: list[V1AssetReeferResponseReeferStatsSetPoint]
        """

        self._set_point = set_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AssetReeferResponseReeferStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1AssetReeferResponseReeferStats):
            return True

        return self.to_dict() != other.to_dict()
