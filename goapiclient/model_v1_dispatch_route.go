/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1DispatchRoute struct for V1DispatchRoute
type V1DispatchRoute struct {
	// The dispatch jobs associated with this route.
	DispatchJobs *[]V1DispatchJob `json:"dispatch_jobs,omitempty"`
	// ID of the Samsara dispatch route.
	Id *int64 `json:"id,omitempty"`
	// The time in Unix epoch milliseconds that the route actually ended.
	ActualEndMs *int64 `json:"actual_end_ms,omitempty"`
	// The time in Unix epoch milliseconds that the route actually started.
	ActualStartMs *int64 `json:"actual_start_ms,omitempty"`
	// ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
	DriverId *int64 `json:"driver_id,omitempty"`
	// Deprecated.
	GroupId *int64 `json:"group_id,omitempty"`
	// Descriptive name of this route.
	Name *string `json:"name,omitempty"`
	// Notes regarding the details of this route; maximum of 2000 characters; newline characters ('\\n')can be used for formatting.
	Notes *string `json:"notes,omitempty"`
	// Odometer reading at the end of the route. Will not be returned if Route is not completed or if Odometer information is not available for the relevant vehicle.
	OdometerEndMeters *int64 `json:"odometer_end_meters,omitempty"`
	// Odometer reading at the start of the route. Will not be returned if Route has not started or if Odometer information is not available for the relevant vehicle.
	OdometerStartMeters *int64 `json:"odometer_start_meters,omitempty"`
	// The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
	ScheduledEndMs *int64 `json:"scheduled_end_ms,omitempty"`
	// The distance expected to be traveled for this route in meters.
	ScheduledMeters *int64 `json:"scheduled_meters,omitempty"`
	// The time in Unix epoch milliseconds that the route is scheduled to start.
	ScheduledStartMs *int64 `json:"scheduled_start_ms,omitempty"`
	// The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
	StartLocationAddress *string `json:"start_location_address,omitempty"`
	// ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
	StartLocationAddressId *int64 `json:"start_location_address_id,omitempty"`
	// Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
	StartLocationLat *float64 `json:"start_location_lat,omitempty"`
	// Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
	StartLocationLng *float64 `json:"start_location_lng,omitempty"`
	// The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
	StartLocationName *string `json:"start_location_name,omitempty"`
	// ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
	TrailerId *int64 `json:"trailer_id,omitempty"`
	// ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
	VehicleId *int64 `json:"vehicle_id,omitempty"`
}

// GetDispatchJobs returns the DispatchJobs field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetDispatchJobs() []V1DispatchJob {
	if o == nil || o.DispatchJobs == nil {
		var ret []V1DispatchJob
		return ret
	}
	return *o.DispatchJobs
}

// GetDispatchJobsOk returns a tuple with the DispatchJobs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetDispatchJobsOk() ([]V1DispatchJob, bool) {
	if o == nil || o.DispatchJobs == nil {
		var ret []V1DispatchJob
		return ret, false
	}
	return *o.DispatchJobs, true
}

// HasDispatchJobs returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasDispatchJobs() bool {
	if o != nil && o.DispatchJobs != nil {
		return true
	}

	return false
}

// SetDispatchJobs gets a reference to the given []V1DispatchJob and assigns it to the DispatchJobs field.
func (o *V1DispatchRoute) SetDispatchJobs(v []V1DispatchJob) {
	o.DispatchJobs = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetIdOk() (int64, bool) {
	if o == nil || o.Id == nil {
		var ret int64
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *V1DispatchRoute) SetId(v int64) {
	o.Id = &v
}

// GetActualEndMs returns the ActualEndMs field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetActualEndMs() int64 {
	if o == nil || o.ActualEndMs == nil {
		var ret int64
		return ret
	}
	return *o.ActualEndMs
}

// GetActualEndMsOk returns a tuple with the ActualEndMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetActualEndMsOk() (int64, bool) {
	if o == nil || o.ActualEndMs == nil {
		var ret int64
		return ret, false
	}
	return *o.ActualEndMs, true
}

// HasActualEndMs returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasActualEndMs() bool {
	if o != nil && o.ActualEndMs != nil {
		return true
	}

	return false
}

// SetActualEndMs gets a reference to the given int64 and assigns it to the ActualEndMs field.
func (o *V1DispatchRoute) SetActualEndMs(v int64) {
	o.ActualEndMs = &v
}

// GetActualStartMs returns the ActualStartMs field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetActualStartMs() int64 {
	if o == nil || o.ActualStartMs == nil {
		var ret int64
		return ret
	}
	return *o.ActualStartMs
}

// GetActualStartMsOk returns a tuple with the ActualStartMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetActualStartMsOk() (int64, bool) {
	if o == nil || o.ActualStartMs == nil {
		var ret int64
		return ret, false
	}
	return *o.ActualStartMs, true
}

// HasActualStartMs returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasActualStartMs() bool {
	if o != nil && o.ActualStartMs != nil {
		return true
	}

	return false
}

// SetActualStartMs gets a reference to the given int64 and assigns it to the ActualStartMs field.
func (o *V1DispatchRoute) SetActualStartMs(v int64) {
	o.ActualStartMs = &v
}

// GetDriverId returns the DriverId field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetDriverId() int64 {
	if o == nil || o.DriverId == nil {
		var ret int64
		return ret
	}
	return *o.DriverId
}

// GetDriverIdOk returns a tuple with the DriverId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetDriverIdOk() (int64, bool) {
	if o == nil || o.DriverId == nil {
		var ret int64
		return ret, false
	}
	return *o.DriverId, true
}

// HasDriverId returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasDriverId() bool {
	if o != nil && o.DriverId != nil {
		return true
	}

	return false
}

// SetDriverId gets a reference to the given int64 and assigns it to the DriverId field.
func (o *V1DispatchRoute) SetDriverId(v int64) {
	o.DriverId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetGroupId() int64 {
	if o == nil || o.GroupId == nil {
		var ret int64
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetGroupIdOk() (int64, bool) {
	if o == nil || o.GroupId == nil {
		var ret int64
		return ret, false
	}
	return *o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int64 and assigns it to the GroupId field.
func (o *V1DispatchRoute) SetGroupId(v int64) {
	o.GroupId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1DispatchRoute) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetNotesOk() (string, bool) {
	if o == nil || o.Notes == nil {
		var ret string
		return ret, false
	}
	return *o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *V1DispatchRoute) SetNotes(v string) {
	o.Notes = &v
}

// GetOdometerEndMeters returns the OdometerEndMeters field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetOdometerEndMeters() int64 {
	if o == nil || o.OdometerEndMeters == nil {
		var ret int64
		return ret
	}
	return *o.OdometerEndMeters
}

// GetOdometerEndMetersOk returns a tuple with the OdometerEndMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetOdometerEndMetersOk() (int64, bool) {
	if o == nil || o.OdometerEndMeters == nil {
		var ret int64
		return ret, false
	}
	return *o.OdometerEndMeters, true
}

// HasOdometerEndMeters returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasOdometerEndMeters() bool {
	if o != nil && o.OdometerEndMeters != nil {
		return true
	}

	return false
}

// SetOdometerEndMeters gets a reference to the given int64 and assigns it to the OdometerEndMeters field.
func (o *V1DispatchRoute) SetOdometerEndMeters(v int64) {
	o.OdometerEndMeters = &v
}

// GetOdometerStartMeters returns the OdometerStartMeters field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetOdometerStartMeters() int64 {
	if o == nil || o.OdometerStartMeters == nil {
		var ret int64
		return ret
	}
	return *o.OdometerStartMeters
}

// GetOdometerStartMetersOk returns a tuple with the OdometerStartMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetOdometerStartMetersOk() (int64, bool) {
	if o == nil || o.OdometerStartMeters == nil {
		var ret int64
		return ret, false
	}
	return *o.OdometerStartMeters, true
}

// HasOdometerStartMeters returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasOdometerStartMeters() bool {
	if o != nil && o.OdometerStartMeters != nil {
		return true
	}

	return false
}

// SetOdometerStartMeters gets a reference to the given int64 and assigns it to the OdometerStartMeters field.
func (o *V1DispatchRoute) SetOdometerStartMeters(v int64) {
	o.OdometerStartMeters = &v
}

// GetScheduledEndMs returns the ScheduledEndMs field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetScheduledEndMs() int64 {
	if o == nil || o.ScheduledEndMs == nil {
		var ret int64
		return ret
	}
	return *o.ScheduledEndMs
}

// GetScheduledEndMsOk returns a tuple with the ScheduledEndMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetScheduledEndMsOk() (int64, bool) {
	if o == nil || o.ScheduledEndMs == nil {
		var ret int64
		return ret, false
	}
	return *o.ScheduledEndMs, true
}

// HasScheduledEndMs returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasScheduledEndMs() bool {
	if o != nil && o.ScheduledEndMs != nil {
		return true
	}

	return false
}

// SetScheduledEndMs gets a reference to the given int64 and assigns it to the ScheduledEndMs field.
func (o *V1DispatchRoute) SetScheduledEndMs(v int64) {
	o.ScheduledEndMs = &v
}

// GetScheduledMeters returns the ScheduledMeters field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetScheduledMeters() int64 {
	if o == nil || o.ScheduledMeters == nil {
		var ret int64
		return ret
	}
	return *o.ScheduledMeters
}

// GetScheduledMetersOk returns a tuple with the ScheduledMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetScheduledMetersOk() (int64, bool) {
	if o == nil || o.ScheduledMeters == nil {
		var ret int64
		return ret, false
	}
	return *o.ScheduledMeters, true
}

// HasScheduledMeters returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasScheduledMeters() bool {
	if o != nil && o.ScheduledMeters != nil {
		return true
	}

	return false
}

// SetScheduledMeters gets a reference to the given int64 and assigns it to the ScheduledMeters field.
func (o *V1DispatchRoute) SetScheduledMeters(v int64) {
	o.ScheduledMeters = &v
}

// GetScheduledStartMs returns the ScheduledStartMs field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetScheduledStartMs() int64 {
	if o == nil || o.ScheduledStartMs == nil {
		var ret int64
		return ret
	}
	return *o.ScheduledStartMs
}

// GetScheduledStartMsOk returns a tuple with the ScheduledStartMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetScheduledStartMsOk() (int64, bool) {
	if o == nil || o.ScheduledStartMs == nil {
		var ret int64
		return ret, false
	}
	return *o.ScheduledStartMs, true
}

// HasScheduledStartMs returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasScheduledStartMs() bool {
	if o != nil && o.ScheduledStartMs != nil {
		return true
	}

	return false
}

// SetScheduledStartMs gets a reference to the given int64 and assigns it to the ScheduledStartMs field.
func (o *V1DispatchRoute) SetScheduledStartMs(v int64) {
	o.ScheduledStartMs = &v
}

// GetStartLocationAddress returns the StartLocationAddress field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetStartLocationAddress() string {
	if o == nil || o.StartLocationAddress == nil {
		var ret string
		return ret
	}
	return *o.StartLocationAddress
}

// GetStartLocationAddressOk returns a tuple with the StartLocationAddress field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetStartLocationAddressOk() (string, bool) {
	if o == nil || o.StartLocationAddress == nil {
		var ret string
		return ret, false
	}
	return *o.StartLocationAddress, true
}

// HasStartLocationAddress returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasStartLocationAddress() bool {
	if o != nil && o.StartLocationAddress != nil {
		return true
	}

	return false
}

// SetStartLocationAddress gets a reference to the given string and assigns it to the StartLocationAddress field.
func (o *V1DispatchRoute) SetStartLocationAddress(v string) {
	o.StartLocationAddress = &v
}

// GetStartLocationAddressId returns the StartLocationAddressId field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetStartLocationAddressId() int64 {
	if o == nil || o.StartLocationAddressId == nil {
		var ret int64
		return ret
	}
	return *o.StartLocationAddressId
}

// GetStartLocationAddressIdOk returns a tuple with the StartLocationAddressId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetStartLocationAddressIdOk() (int64, bool) {
	if o == nil || o.StartLocationAddressId == nil {
		var ret int64
		return ret, false
	}
	return *o.StartLocationAddressId, true
}

// HasStartLocationAddressId returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasStartLocationAddressId() bool {
	if o != nil && o.StartLocationAddressId != nil {
		return true
	}

	return false
}

// SetStartLocationAddressId gets a reference to the given int64 and assigns it to the StartLocationAddressId field.
func (o *V1DispatchRoute) SetStartLocationAddressId(v int64) {
	o.StartLocationAddressId = &v
}

// GetStartLocationLat returns the StartLocationLat field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetStartLocationLat() float64 {
	if o == nil || o.StartLocationLat == nil {
		var ret float64
		return ret
	}
	return *o.StartLocationLat
}

// GetStartLocationLatOk returns a tuple with the StartLocationLat field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetStartLocationLatOk() (float64, bool) {
	if o == nil || o.StartLocationLat == nil {
		var ret float64
		return ret, false
	}
	return *o.StartLocationLat, true
}

// HasStartLocationLat returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasStartLocationLat() bool {
	if o != nil && o.StartLocationLat != nil {
		return true
	}

	return false
}

// SetStartLocationLat gets a reference to the given float64 and assigns it to the StartLocationLat field.
func (o *V1DispatchRoute) SetStartLocationLat(v float64) {
	o.StartLocationLat = &v
}

// GetStartLocationLng returns the StartLocationLng field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetStartLocationLng() float64 {
	if o == nil || o.StartLocationLng == nil {
		var ret float64
		return ret
	}
	return *o.StartLocationLng
}

// GetStartLocationLngOk returns a tuple with the StartLocationLng field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetStartLocationLngOk() (float64, bool) {
	if o == nil || o.StartLocationLng == nil {
		var ret float64
		return ret, false
	}
	return *o.StartLocationLng, true
}

// HasStartLocationLng returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasStartLocationLng() bool {
	if o != nil && o.StartLocationLng != nil {
		return true
	}

	return false
}

// SetStartLocationLng gets a reference to the given float64 and assigns it to the StartLocationLng field.
func (o *V1DispatchRoute) SetStartLocationLng(v float64) {
	o.StartLocationLng = &v
}

// GetStartLocationName returns the StartLocationName field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetStartLocationName() string {
	if o == nil || o.StartLocationName == nil {
		var ret string
		return ret
	}
	return *o.StartLocationName
}

// GetStartLocationNameOk returns a tuple with the StartLocationName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetStartLocationNameOk() (string, bool) {
	if o == nil || o.StartLocationName == nil {
		var ret string
		return ret, false
	}
	return *o.StartLocationName, true
}

// HasStartLocationName returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasStartLocationName() bool {
	if o != nil && o.StartLocationName != nil {
		return true
	}

	return false
}

// SetStartLocationName gets a reference to the given string and assigns it to the StartLocationName field.
func (o *V1DispatchRoute) SetStartLocationName(v string) {
	o.StartLocationName = &v
}

// GetTrailerId returns the TrailerId field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetTrailerId() int64 {
	if o == nil || o.TrailerId == nil {
		var ret int64
		return ret
	}
	return *o.TrailerId
}

// GetTrailerIdOk returns a tuple with the TrailerId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetTrailerIdOk() (int64, bool) {
	if o == nil || o.TrailerId == nil {
		var ret int64
		return ret, false
	}
	return *o.TrailerId, true
}

// HasTrailerId returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasTrailerId() bool {
	if o != nil && o.TrailerId != nil {
		return true
	}

	return false
}

// SetTrailerId gets a reference to the given int64 and assigns it to the TrailerId field.
func (o *V1DispatchRoute) SetTrailerId(v int64) {
	o.TrailerId = &v
}

// GetVehicleId returns the VehicleId field value if set, zero value otherwise.
func (o *V1DispatchRoute) GetVehicleId() int64 {
	if o == nil || o.VehicleId == nil {
		var ret int64
		return ret
	}
	return *o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DispatchRoute) GetVehicleIdOk() (int64, bool) {
	if o == nil || o.VehicleId == nil {
		var ret int64
		return ret, false
	}
	return *o.VehicleId, true
}

// HasVehicleId returns a boolean if a field has been set.
func (o *V1DispatchRoute) HasVehicleId() bool {
	if o != nil && o.VehicleId != nil {
		return true
	}

	return false
}

// SetVehicleId gets a reference to the given int64 and assigns it to the VehicleId field.
func (o *V1DispatchRoute) SetVehicleId(v int64) {
	o.VehicleId = &v
}

type NullableV1DispatchRoute struct {
	Value        V1DispatchRoute
	ExplicitNull bool
}

func (v NullableV1DispatchRoute) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1DispatchRoute) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
