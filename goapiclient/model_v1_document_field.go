/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1DocumentField struct for V1DocumentField
type V1DocumentField struct {
	// The name of the field.
	Label string `json:"label"`
	// DEPRECATED: Please use `stringValue`, `numberValue`, `photoValue`, `multipleChoiceValue`, `signatureValue`, or `dateTimeValue` instead.
	Value         *map[string]interface{}             `json:"value,omitempty"`
	DateTimeValue *V1DocumentFieldCreateDateTimeValue `json:"dateTimeValue,omitempty"`
	// The value of a `ValueType_MultipleChoice` field.
	MultipleChoiceValue *[]V1DocumentFieldCreateMultipleChoiceValue `json:"multipleChoiceValue,omitempty"`
	// The value of a `ValueType_Number` field.
	NumberValue *float64 `json:"numberValue,omitempty"`
	// The value of a `ValueType_String` field.
	StringValue *string `json:"stringValue,omitempty"`
	// The type of this field. Valid values: `ValueType_Number`, `ValueType_String`, `ValueType_Photo`, `ValueType_MultipleChoice`, `ValueType_Signature`, `ValueType_DateTime`. When creating documents via API, only `ValueType_Number`, `ValueType_String`, `ValueType_MultipleChoice`, and `ValueType_DateTime` are accepted.
	ValueType string `json:"valueType"`
}

// GetLabel returns the Label field value
func (o *V1DocumentField) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// SetLabel sets field value
func (o *V1DocumentField) SetLabel(v string) {
	o.Label = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V1DocumentField) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DocumentField) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V1DocumentField) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *V1DocumentField) SetValue(v map[string]interface{}) {
	o.Value = &v
}

// GetDateTimeValue returns the DateTimeValue field value if set, zero value otherwise.
func (o *V1DocumentField) GetDateTimeValue() V1DocumentFieldCreateDateTimeValue {
	if o == nil || o.DateTimeValue == nil {
		var ret V1DocumentFieldCreateDateTimeValue
		return ret
	}
	return *o.DateTimeValue
}

// GetDateTimeValueOk returns a tuple with the DateTimeValue field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DocumentField) GetDateTimeValueOk() (V1DocumentFieldCreateDateTimeValue, bool) {
	if o == nil || o.DateTimeValue == nil {
		var ret V1DocumentFieldCreateDateTimeValue
		return ret, false
	}
	return *o.DateTimeValue, true
}

// HasDateTimeValue returns a boolean if a field has been set.
func (o *V1DocumentField) HasDateTimeValue() bool {
	if o != nil && o.DateTimeValue != nil {
		return true
	}

	return false
}

// SetDateTimeValue gets a reference to the given V1DocumentFieldCreateDateTimeValue and assigns it to the DateTimeValue field.
func (o *V1DocumentField) SetDateTimeValue(v V1DocumentFieldCreateDateTimeValue) {
	o.DateTimeValue = &v
}

// GetMultipleChoiceValue returns the MultipleChoiceValue field value if set, zero value otherwise.
func (o *V1DocumentField) GetMultipleChoiceValue() []V1DocumentFieldCreateMultipleChoiceValue {
	if o == nil || o.MultipleChoiceValue == nil {
		var ret []V1DocumentFieldCreateMultipleChoiceValue
		return ret
	}
	return *o.MultipleChoiceValue
}

// GetMultipleChoiceValueOk returns a tuple with the MultipleChoiceValue field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DocumentField) GetMultipleChoiceValueOk() ([]V1DocumentFieldCreateMultipleChoiceValue, bool) {
	if o == nil || o.MultipleChoiceValue == nil {
		var ret []V1DocumentFieldCreateMultipleChoiceValue
		return ret, false
	}
	return *o.MultipleChoiceValue, true
}

// HasMultipleChoiceValue returns a boolean if a field has been set.
func (o *V1DocumentField) HasMultipleChoiceValue() bool {
	if o != nil && o.MultipleChoiceValue != nil {
		return true
	}

	return false
}

// SetMultipleChoiceValue gets a reference to the given []V1DocumentFieldCreateMultipleChoiceValue and assigns it to the MultipleChoiceValue field.
func (o *V1DocumentField) SetMultipleChoiceValue(v []V1DocumentFieldCreateMultipleChoiceValue) {
	o.MultipleChoiceValue = &v
}

// GetNumberValue returns the NumberValue field value if set, zero value otherwise.
func (o *V1DocumentField) GetNumberValue() float64 {
	if o == nil || o.NumberValue == nil {
		var ret float64
		return ret
	}
	return *o.NumberValue
}

// GetNumberValueOk returns a tuple with the NumberValue field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DocumentField) GetNumberValueOk() (float64, bool) {
	if o == nil || o.NumberValue == nil {
		var ret float64
		return ret, false
	}
	return *o.NumberValue, true
}

// HasNumberValue returns a boolean if a field has been set.
func (o *V1DocumentField) HasNumberValue() bool {
	if o != nil && o.NumberValue != nil {
		return true
	}

	return false
}

// SetNumberValue gets a reference to the given float64 and assigns it to the NumberValue field.
func (o *V1DocumentField) SetNumberValue(v float64) {
	o.NumberValue = &v
}

// GetStringValue returns the StringValue field value if set, zero value otherwise.
func (o *V1DocumentField) GetStringValue() string {
	if o == nil || o.StringValue == nil {
		var ret string
		return ret
	}
	return *o.StringValue
}

// GetStringValueOk returns a tuple with the StringValue field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DocumentField) GetStringValueOk() (string, bool) {
	if o == nil || o.StringValue == nil {
		var ret string
		return ret, false
	}
	return *o.StringValue, true
}

// HasStringValue returns a boolean if a field has been set.
func (o *V1DocumentField) HasStringValue() bool {
	if o != nil && o.StringValue != nil {
		return true
	}

	return false
}

// SetStringValue gets a reference to the given string and assigns it to the StringValue field.
func (o *V1DocumentField) SetStringValue(v string) {
	o.StringValue = &v
}

// GetValueType returns the ValueType field value
func (o *V1DocumentField) GetValueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueType
}

// SetValueType sets field value
func (o *V1DocumentField) SetValueType(v string) {
	o.ValueType = v
}

type NullableV1DocumentField struct {
	Value        V1DocumentField
	ExplicitNull bool
}

func (v NullableV1DocumentField) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1DocumentField) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
