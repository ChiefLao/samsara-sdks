/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1DvirDefectBase struct for V1DvirDefectBase
type V1DvirDefectBase struct {
	// The comment describing the type of DVIR defect.
	Comment *string `json:"comment,omitempty"`
	// The type of DVIR defect. Possible values: [`AIR_COMPRESSOR`, `AIR_CONDITIONER`, `AIR_LINES`, `BATTERY`, `BELTS_HOSES`, `BRAKE_ACCESSORIES`, `BRAKE_CHECK`, `BRAKE_CONNECTIONS`, `BRAKES`, `CLUTCH`, `COUPLING_DEVICES`, `DEFROSTER_HEATER`, `DOORS`, `DRIVE_LINE`, `EMERGENCY_DOOR_AND_BUZZER`, `ENGINE`, `ENTRANCE_STEPS`, `EXHAUST`, `FIFTH_WHEEL`, `FIRST_AID_KIT`, `FLUID_LEVELS`, `FRAME_ASSEMBLY`, `FRONT_AXLE`, `FUEL_TANKS`, `HORN`, `INTERIOR_AND_FLOOR`, `LANDING_GEAR`, `LIGHTS`, `MIRRORS`, `MUFFLER`, `OIL_PRESSURE`, `OTHER`, `RADIATOR`, `REAR_END`, `REFLECTORS`, `ROOF`, `SAFETY_EQUIPMENT`, `STARTER`, `STEERING`, `STOP_ARM_CONTROL`, `STOP_ARM`, `SUSPENSION`, `TIRE_CHAINS`, `TIRES`, `TRANSMISSION`, `TRIP_RECORDER`, `WHEELS_RIMS`, `WINDOWS`, `WINDSHIELD_WIPERS`, `UNSET`]
	DefectType *string `json:"defectType,omitempty"`
	// The id of this defect.
	Id *int64 `json:"id,omitempty"`
	// Signifies if this defect is resolved.
	Resolved *bool `json:"resolved,omitempty"`
	// Timestamp when this defect was resolved, in UNIX milliseconds.  Will not be returned if the defect is unresolved.
	ResolvedAt *int64 `json:"resolvedAt,omitempty"`
	// ID of the driver who resolved this defect. Will not be returned if the defect is unresolved or resolvedByMechanicId is returned.
	ResolvedByDriverId *int64 `json:"resolvedByDriverId,omitempty"`
	// ID of the mechanic who resolved this defect. Will not be returned if the defect is unresolved or resolvedByDriverId is returned.
	ResolvedByMechanicId *int64 `json:"resolvedByMechanicId,omitempty"`
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *V1DvirDefectBase) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirDefectBase) GetCommentOk() (string, bool) {
	if o == nil || o.Comment == nil {
		var ret string
		return ret, false
	}
	return *o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *V1DvirDefectBase) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *V1DvirDefectBase) SetComment(v string) {
	o.Comment = &v
}

// GetDefectType returns the DefectType field value if set, zero value otherwise.
func (o *V1DvirDefectBase) GetDefectType() string {
	if o == nil || o.DefectType == nil {
		var ret string
		return ret
	}
	return *o.DefectType
}

// GetDefectTypeOk returns a tuple with the DefectType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirDefectBase) GetDefectTypeOk() (string, bool) {
	if o == nil || o.DefectType == nil {
		var ret string
		return ret, false
	}
	return *o.DefectType, true
}

// HasDefectType returns a boolean if a field has been set.
func (o *V1DvirDefectBase) HasDefectType() bool {
	if o != nil && o.DefectType != nil {
		return true
	}

	return false
}

// SetDefectType gets a reference to the given string and assigns it to the DefectType field.
func (o *V1DvirDefectBase) SetDefectType(v string) {
	o.DefectType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1DvirDefectBase) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirDefectBase) GetIdOk() (int64, bool) {
	if o == nil || o.Id == nil {
		var ret int64
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1DvirDefectBase) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *V1DvirDefectBase) SetId(v int64) {
	o.Id = &v
}

// GetResolved returns the Resolved field value if set, zero value otherwise.
func (o *V1DvirDefectBase) GetResolved() bool {
	if o == nil || o.Resolved == nil {
		var ret bool
		return ret
	}
	return *o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirDefectBase) GetResolvedOk() (bool, bool) {
	if o == nil || o.Resolved == nil {
		var ret bool
		return ret, false
	}
	return *o.Resolved, true
}

// HasResolved returns a boolean if a field has been set.
func (o *V1DvirDefectBase) HasResolved() bool {
	if o != nil && o.Resolved != nil {
		return true
	}

	return false
}

// SetResolved gets a reference to the given bool and assigns it to the Resolved field.
func (o *V1DvirDefectBase) SetResolved(v bool) {
	o.Resolved = &v
}

// GetResolvedAt returns the ResolvedAt field value if set, zero value otherwise.
func (o *V1DvirDefectBase) GetResolvedAt() int64 {
	if o == nil || o.ResolvedAt == nil {
		var ret int64
		return ret
	}
	return *o.ResolvedAt
}

// GetResolvedAtOk returns a tuple with the ResolvedAt field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirDefectBase) GetResolvedAtOk() (int64, bool) {
	if o == nil || o.ResolvedAt == nil {
		var ret int64
		return ret, false
	}
	return *o.ResolvedAt, true
}

// HasResolvedAt returns a boolean if a field has been set.
func (o *V1DvirDefectBase) HasResolvedAt() bool {
	if o != nil && o.ResolvedAt != nil {
		return true
	}

	return false
}

// SetResolvedAt gets a reference to the given int64 and assigns it to the ResolvedAt field.
func (o *V1DvirDefectBase) SetResolvedAt(v int64) {
	o.ResolvedAt = &v
}

// GetResolvedByDriverId returns the ResolvedByDriverId field value if set, zero value otherwise.
func (o *V1DvirDefectBase) GetResolvedByDriverId() int64 {
	if o == nil || o.ResolvedByDriverId == nil {
		var ret int64
		return ret
	}
	return *o.ResolvedByDriverId
}

// GetResolvedByDriverIdOk returns a tuple with the ResolvedByDriverId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirDefectBase) GetResolvedByDriverIdOk() (int64, bool) {
	if o == nil || o.ResolvedByDriverId == nil {
		var ret int64
		return ret, false
	}
	return *o.ResolvedByDriverId, true
}

// HasResolvedByDriverId returns a boolean if a field has been set.
func (o *V1DvirDefectBase) HasResolvedByDriverId() bool {
	if o != nil && o.ResolvedByDriverId != nil {
		return true
	}

	return false
}

// SetResolvedByDriverId gets a reference to the given int64 and assigns it to the ResolvedByDriverId field.
func (o *V1DvirDefectBase) SetResolvedByDriverId(v int64) {
	o.ResolvedByDriverId = &v
}

// GetResolvedByMechanicId returns the ResolvedByMechanicId field value if set, zero value otherwise.
func (o *V1DvirDefectBase) GetResolvedByMechanicId() int64 {
	if o == nil || o.ResolvedByMechanicId == nil {
		var ret int64
		return ret
	}
	return *o.ResolvedByMechanicId
}

// GetResolvedByMechanicIdOk returns a tuple with the ResolvedByMechanicId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirDefectBase) GetResolvedByMechanicIdOk() (int64, bool) {
	if o == nil || o.ResolvedByMechanicId == nil {
		var ret int64
		return ret, false
	}
	return *o.ResolvedByMechanicId, true
}

// HasResolvedByMechanicId returns a boolean if a field has been set.
func (o *V1DvirDefectBase) HasResolvedByMechanicId() bool {
	if o != nil && o.ResolvedByMechanicId != nil {
		return true
	}

	return false
}

// SetResolvedByMechanicId gets a reference to the given int64 and assigns it to the ResolvedByMechanicId field.
func (o *V1DvirDefectBase) SetResolvedByMechanicId(v int64) {
	o.ResolvedByMechanicId = &v
}

type NullableV1DvirDefectBase struct {
	Value        V1DvirDefectBase
	ExplicitNull bool
}

func (v NullableV1DvirDefectBase) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1DvirDefectBase) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
