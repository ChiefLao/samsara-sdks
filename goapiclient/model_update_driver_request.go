/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// UpdateDriverRequest Driver that should be updated.
type UpdateDriverRequest struct {
	CarrierSettings        *DriverCarrierSettings  `json:"carrierSettings,omitempty"`
	DriverActivationStatus *DriverActivationStatus `json:"driverActivationStatus,omitempty"`
	// Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
	EldAdverseWeatherExemptionEnabled *bool `json:"eldAdverseWeatherExemptionEnabled,omitempty"`
	// Flag indicating this driver may use Big Day exemption in ELD logs.
	EldBigDayExemptionEnabled *bool `json:"eldBigDayExemptionEnabled,omitempty"`
	// `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
	EldDayStartHour *int32 `json:"eldDayStartHour,omitempty"`
	// Flag indicating this driver is exempt from the Electronic Logging Mandate.
	EldExempt *bool `json:"eldExempt,omitempty"`
	// Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
	EldExemptReason *string `json:"eldExemptReason,omitempty"`
	// Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
	EldPcEnabled *bool `json:"eldPcEnabled,omitempty"`
	// Flag indicating this driver may select the Yard Move duty status in ELD logs.
	EldYmEnabled *bool `json:"eldYmEnabled,omitempty"`
	// The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
	ExternalIds *map[string]string `json:"externalIds,omitempty"`
	// Driver's state issued license number. The combination of this number and `licenseState` must be unique.
	LicenseNumber *string `json:"licenseNumber,omitempty"`
	// Abbreviation of state that issued driver's license.
	LicenseState *string       `json:"licenseState,omitempty"`
	Locale       *DriverLocale `json:"locale,omitempty"`
	// Driver's name.
	Name *string `json:"name,omitempty"`
	// Notes about the driver.
	Notes *string `json:"notes,omitempty"`
	// Password that the driver can use to login to the Samsara driver app.
	Password *string `json:"password,omitempty"`
	// Phone number of the driver.
	Phone *string `json:"phone,omitempty"`
	// ID of vehicle that the driver is permanently assigned to. (uncommon).
	StaticAssignedVehicleId *string `json:"staticAssignedVehicleId,omitempty"`
	// Driver's assigned tachograph card number (Europe specific)
	TachographCardNumber *string `json:"tachographCardNumber,omitempty"`
	// IDs of tags the driver is associated with.
	TagIds *[]string `json:"tagIds,omitempty"`
	// Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
	Timezone *string `json:"timezone,omitempty"`
	// Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.
	Username *string `json:"username,omitempty"`
	// Tag ID which determines which vehicles a driver will see when selecting vehicles.
	VehicleGroupTagId *string `json:"vehicleGroupTagId,omitempty"`
}

// GetCarrierSettings returns the CarrierSettings field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetCarrierSettings() DriverCarrierSettings {
	if o == nil || o.CarrierSettings == nil {
		var ret DriverCarrierSettings
		return ret
	}
	return *o.CarrierSettings
}

// GetCarrierSettingsOk returns a tuple with the CarrierSettings field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetCarrierSettingsOk() (DriverCarrierSettings, bool) {
	if o == nil || o.CarrierSettings == nil {
		var ret DriverCarrierSettings
		return ret, false
	}
	return *o.CarrierSettings, true
}

// HasCarrierSettings returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasCarrierSettings() bool {
	if o != nil && o.CarrierSettings != nil {
		return true
	}

	return false
}

// SetCarrierSettings gets a reference to the given DriverCarrierSettings and assigns it to the CarrierSettings field.
func (o *UpdateDriverRequest) SetCarrierSettings(v DriverCarrierSettings) {
	o.CarrierSettings = &v
}

// GetDriverActivationStatus returns the DriverActivationStatus field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetDriverActivationStatus() DriverActivationStatus {
	if o == nil || o.DriverActivationStatus == nil {
		var ret DriverActivationStatus
		return ret
	}
	return *o.DriverActivationStatus
}

// GetDriverActivationStatusOk returns a tuple with the DriverActivationStatus field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetDriverActivationStatusOk() (DriverActivationStatus, bool) {
	if o == nil || o.DriverActivationStatus == nil {
		var ret DriverActivationStatus
		return ret, false
	}
	return *o.DriverActivationStatus, true
}

// HasDriverActivationStatus returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasDriverActivationStatus() bool {
	if o != nil && o.DriverActivationStatus != nil {
		return true
	}

	return false
}

// SetDriverActivationStatus gets a reference to the given DriverActivationStatus and assigns it to the DriverActivationStatus field.
func (o *UpdateDriverRequest) SetDriverActivationStatus(v DriverActivationStatus) {
	o.DriverActivationStatus = &v
}

// GetEldAdverseWeatherExemptionEnabled returns the EldAdverseWeatherExemptionEnabled field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetEldAdverseWeatherExemptionEnabled() bool {
	if o == nil || o.EldAdverseWeatherExemptionEnabled == nil {
		var ret bool
		return ret
	}
	return *o.EldAdverseWeatherExemptionEnabled
}

// GetEldAdverseWeatherExemptionEnabledOk returns a tuple with the EldAdverseWeatherExemptionEnabled field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetEldAdverseWeatherExemptionEnabledOk() (bool, bool) {
	if o == nil || o.EldAdverseWeatherExemptionEnabled == nil {
		var ret bool
		return ret, false
	}
	return *o.EldAdverseWeatherExemptionEnabled, true
}

// HasEldAdverseWeatherExemptionEnabled returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasEldAdverseWeatherExemptionEnabled() bool {
	if o != nil && o.EldAdverseWeatherExemptionEnabled != nil {
		return true
	}

	return false
}

// SetEldAdverseWeatherExemptionEnabled gets a reference to the given bool and assigns it to the EldAdverseWeatherExemptionEnabled field.
func (o *UpdateDriverRequest) SetEldAdverseWeatherExemptionEnabled(v bool) {
	o.EldAdverseWeatherExemptionEnabled = &v
}

// GetEldBigDayExemptionEnabled returns the EldBigDayExemptionEnabled field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetEldBigDayExemptionEnabled() bool {
	if o == nil || o.EldBigDayExemptionEnabled == nil {
		var ret bool
		return ret
	}
	return *o.EldBigDayExemptionEnabled
}

// GetEldBigDayExemptionEnabledOk returns a tuple with the EldBigDayExemptionEnabled field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetEldBigDayExemptionEnabledOk() (bool, bool) {
	if o == nil || o.EldBigDayExemptionEnabled == nil {
		var ret bool
		return ret, false
	}
	return *o.EldBigDayExemptionEnabled, true
}

// HasEldBigDayExemptionEnabled returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasEldBigDayExemptionEnabled() bool {
	if o != nil && o.EldBigDayExemptionEnabled != nil {
		return true
	}

	return false
}

// SetEldBigDayExemptionEnabled gets a reference to the given bool and assigns it to the EldBigDayExemptionEnabled field.
func (o *UpdateDriverRequest) SetEldBigDayExemptionEnabled(v bool) {
	o.EldBigDayExemptionEnabled = &v
}

// GetEldDayStartHour returns the EldDayStartHour field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetEldDayStartHour() int32 {
	if o == nil || o.EldDayStartHour == nil {
		var ret int32
		return ret
	}
	return *o.EldDayStartHour
}

// GetEldDayStartHourOk returns a tuple with the EldDayStartHour field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetEldDayStartHourOk() (int32, bool) {
	if o == nil || o.EldDayStartHour == nil {
		var ret int32
		return ret, false
	}
	return *o.EldDayStartHour, true
}

// HasEldDayStartHour returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasEldDayStartHour() bool {
	if o != nil && o.EldDayStartHour != nil {
		return true
	}

	return false
}

// SetEldDayStartHour gets a reference to the given int32 and assigns it to the EldDayStartHour field.
func (o *UpdateDriverRequest) SetEldDayStartHour(v int32) {
	o.EldDayStartHour = &v
}

// GetEldExempt returns the EldExempt field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetEldExempt() bool {
	if o == nil || o.EldExempt == nil {
		var ret bool
		return ret
	}
	return *o.EldExempt
}

// GetEldExemptOk returns a tuple with the EldExempt field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetEldExemptOk() (bool, bool) {
	if o == nil || o.EldExempt == nil {
		var ret bool
		return ret, false
	}
	return *o.EldExempt, true
}

// HasEldExempt returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasEldExempt() bool {
	if o != nil && o.EldExempt != nil {
		return true
	}

	return false
}

// SetEldExempt gets a reference to the given bool and assigns it to the EldExempt field.
func (o *UpdateDriverRequest) SetEldExempt(v bool) {
	o.EldExempt = &v
}

// GetEldExemptReason returns the EldExemptReason field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetEldExemptReason() string {
	if o == nil || o.EldExemptReason == nil {
		var ret string
		return ret
	}
	return *o.EldExemptReason
}

// GetEldExemptReasonOk returns a tuple with the EldExemptReason field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetEldExemptReasonOk() (string, bool) {
	if o == nil || o.EldExemptReason == nil {
		var ret string
		return ret, false
	}
	return *o.EldExemptReason, true
}

// HasEldExemptReason returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasEldExemptReason() bool {
	if o != nil && o.EldExemptReason != nil {
		return true
	}

	return false
}

// SetEldExemptReason gets a reference to the given string and assigns it to the EldExemptReason field.
func (o *UpdateDriverRequest) SetEldExemptReason(v string) {
	o.EldExemptReason = &v
}

// GetEldPcEnabled returns the EldPcEnabled field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetEldPcEnabled() bool {
	if o == nil || o.EldPcEnabled == nil {
		var ret bool
		return ret
	}
	return *o.EldPcEnabled
}

// GetEldPcEnabledOk returns a tuple with the EldPcEnabled field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetEldPcEnabledOk() (bool, bool) {
	if o == nil || o.EldPcEnabled == nil {
		var ret bool
		return ret, false
	}
	return *o.EldPcEnabled, true
}

// HasEldPcEnabled returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasEldPcEnabled() bool {
	if o != nil && o.EldPcEnabled != nil {
		return true
	}

	return false
}

// SetEldPcEnabled gets a reference to the given bool and assigns it to the EldPcEnabled field.
func (o *UpdateDriverRequest) SetEldPcEnabled(v bool) {
	o.EldPcEnabled = &v
}

// GetEldYmEnabled returns the EldYmEnabled field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetEldYmEnabled() bool {
	if o == nil || o.EldYmEnabled == nil {
		var ret bool
		return ret
	}
	return *o.EldYmEnabled
}

// GetEldYmEnabledOk returns a tuple with the EldYmEnabled field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetEldYmEnabledOk() (bool, bool) {
	if o == nil || o.EldYmEnabled == nil {
		var ret bool
		return ret, false
	}
	return *o.EldYmEnabled, true
}

// HasEldYmEnabled returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasEldYmEnabled() bool {
	if o != nil && o.EldYmEnabled != nil {
		return true
	}

	return false
}

// SetEldYmEnabled gets a reference to the given bool and assigns it to the EldYmEnabled field.
func (o *UpdateDriverRequest) SetEldYmEnabled(v bool) {
	o.EldYmEnabled = &v
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetExternalIds() map[string]string {
	if o == nil || o.ExternalIds == nil {
		var ret map[string]string
		return ret
	}
	return *o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetExternalIdsOk() (map[string]string, bool) {
	if o == nil || o.ExternalIds == nil {
		var ret map[string]string
		return ret, false
	}
	return *o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasExternalIds() bool {
	if o != nil && o.ExternalIds != nil {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given map[string]string and assigns it to the ExternalIds field.
func (o *UpdateDriverRequest) SetExternalIds(v map[string]string) {
	o.ExternalIds = &v
}

// GetLicenseNumber returns the LicenseNumber field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetLicenseNumber() string {
	if o == nil || o.LicenseNumber == nil {
		var ret string
		return ret
	}
	return *o.LicenseNumber
}

// GetLicenseNumberOk returns a tuple with the LicenseNumber field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetLicenseNumberOk() (string, bool) {
	if o == nil || o.LicenseNumber == nil {
		var ret string
		return ret, false
	}
	return *o.LicenseNumber, true
}

// HasLicenseNumber returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasLicenseNumber() bool {
	if o != nil && o.LicenseNumber != nil {
		return true
	}

	return false
}

// SetLicenseNumber gets a reference to the given string and assigns it to the LicenseNumber field.
func (o *UpdateDriverRequest) SetLicenseNumber(v string) {
	o.LicenseNumber = &v
}

// GetLicenseState returns the LicenseState field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetLicenseState() string {
	if o == nil || o.LicenseState == nil {
		var ret string
		return ret
	}
	return *o.LicenseState
}

// GetLicenseStateOk returns a tuple with the LicenseState field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetLicenseStateOk() (string, bool) {
	if o == nil || o.LicenseState == nil {
		var ret string
		return ret, false
	}
	return *o.LicenseState, true
}

// HasLicenseState returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasLicenseState() bool {
	if o != nil && o.LicenseState != nil {
		return true
	}

	return false
}

// SetLicenseState gets a reference to the given string and assigns it to the LicenseState field.
func (o *UpdateDriverRequest) SetLicenseState(v string) {
	o.LicenseState = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetLocale() DriverLocale {
	if o == nil || o.Locale == nil {
		var ret DriverLocale
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetLocaleOk() (DriverLocale, bool) {
	if o == nil || o.Locale == nil {
		var ret DriverLocale
		return ret, false
	}
	return *o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given DriverLocale and assigns it to the Locale field.
func (o *UpdateDriverRequest) SetLocale(v DriverLocale) {
	o.Locale = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateDriverRequest) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetNotesOk() (string, bool) {
	if o == nil || o.Notes == nil {
		var ret string
		return ret, false
	}
	return *o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *UpdateDriverRequest) SetNotes(v string) {
	o.Notes = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetPasswordOk() (string, bool) {
	if o == nil || o.Password == nil {
		var ret string
		return ret, false
	}
	return *o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateDriverRequest) SetPassword(v string) {
	o.Password = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetPhone() string {
	if o == nil || o.Phone == nil {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetPhoneOk() (string, bool) {
	if o == nil || o.Phone == nil {
		var ret string
		return ret, false
	}
	return *o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *UpdateDriverRequest) SetPhone(v string) {
	o.Phone = &v
}

// GetStaticAssignedVehicleId returns the StaticAssignedVehicleId field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetStaticAssignedVehicleId() string {
	if o == nil || o.StaticAssignedVehicleId == nil {
		var ret string
		return ret
	}
	return *o.StaticAssignedVehicleId
}

// GetStaticAssignedVehicleIdOk returns a tuple with the StaticAssignedVehicleId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetStaticAssignedVehicleIdOk() (string, bool) {
	if o == nil || o.StaticAssignedVehicleId == nil {
		var ret string
		return ret, false
	}
	return *o.StaticAssignedVehicleId, true
}

// HasStaticAssignedVehicleId returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasStaticAssignedVehicleId() bool {
	if o != nil && o.StaticAssignedVehicleId != nil {
		return true
	}

	return false
}

// SetStaticAssignedVehicleId gets a reference to the given string and assigns it to the StaticAssignedVehicleId field.
func (o *UpdateDriverRequest) SetStaticAssignedVehicleId(v string) {
	o.StaticAssignedVehicleId = &v
}

// GetTachographCardNumber returns the TachographCardNumber field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetTachographCardNumber() string {
	if o == nil || o.TachographCardNumber == nil {
		var ret string
		return ret
	}
	return *o.TachographCardNumber
}

// GetTachographCardNumberOk returns a tuple with the TachographCardNumber field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetTachographCardNumberOk() (string, bool) {
	if o == nil || o.TachographCardNumber == nil {
		var ret string
		return ret, false
	}
	return *o.TachographCardNumber, true
}

// HasTachographCardNumber returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasTachographCardNumber() bool {
	if o != nil && o.TachographCardNumber != nil {
		return true
	}

	return false
}

// SetTachographCardNumber gets a reference to the given string and assigns it to the TachographCardNumber field.
func (o *UpdateDriverRequest) SetTachographCardNumber(v string) {
	o.TachographCardNumber = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetTagIds() []string {
	if o == nil || o.TagIds == nil {
		var ret []string
		return ret
	}
	return *o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetTagIdsOk() ([]string, bool) {
	if o == nil || o.TagIds == nil {
		var ret []string
		return ret, false
	}
	return *o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasTagIds() bool {
	if o != nil && o.TagIds != nil {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []string and assigns it to the TagIds field.
func (o *UpdateDriverRequest) SetTagIds(v []string) {
	o.TagIds = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetTimezoneOk() (string, bool) {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret, false
	}
	return *o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *UpdateDriverRequest) SetTimezone(v string) {
	o.Timezone = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetUsernameOk() (string, bool) {
	if o == nil || o.Username == nil {
		var ret string
		return ret, false
	}
	return *o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UpdateDriverRequest) SetUsername(v string) {
	o.Username = &v
}

// GetVehicleGroupTagId returns the VehicleGroupTagId field value if set, zero value otherwise.
func (o *UpdateDriverRequest) GetVehicleGroupTagId() string {
	if o == nil || o.VehicleGroupTagId == nil {
		var ret string
		return ret
	}
	return *o.VehicleGroupTagId
}

// GetVehicleGroupTagIdOk returns a tuple with the VehicleGroupTagId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDriverRequest) GetVehicleGroupTagIdOk() (string, bool) {
	if o == nil || o.VehicleGroupTagId == nil {
		var ret string
		return ret, false
	}
	return *o.VehicleGroupTagId, true
}

// HasVehicleGroupTagId returns a boolean if a field has been set.
func (o *UpdateDriverRequest) HasVehicleGroupTagId() bool {
	if o != nil && o.VehicleGroupTagId != nil {
		return true
	}

	return false
}

// SetVehicleGroupTagId gets a reference to the given string and assigns it to the VehicleGroupTagId field.
func (o *UpdateDriverRequest) SetVehicleGroupTagId(v string) {
	o.VehicleGroupTagId = &v
}

type NullableUpdateDriverRequest struct {
	Value        UpdateDriverRequest
	ExplicitNull bool
}

func (v NullableUpdateDriverRequest) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableUpdateDriverRequest) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
