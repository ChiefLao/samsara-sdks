/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// CreateRouteRequest Route creation request.
type CreateRouteRequest struct {
	// If the route should be assigned to a driver, the ID of that driver.
	AssignedDriverId *string `json:"assignedDriverId,omitempty"`
	// If the route should be assigned to a vehicle, the ID of that vehicle.
	AssignedVehicleId *string `json:"assignedVehicleId,omitempty"`
	// Name of the route.
	Name *string `json:"name,omitempty"`
	// Notes about the route.
	Notes *string `json:"notes,omitempty"`
	// The number of meters that are planned to be driven during this route.
	PlannedMeters *float32 `json:"plannedMeters,omitempty"`
	// The route stops in the route. Stops will be ordered by `scheduledArrivalTime`. The start location of the route (stop with earliest `scheduledDepartureTime`) should not have `scheduledArrivalTime` populated. All other stops should `scheduledArrivalTime` and may optionally have `scheduledDepartureTime` populated.
	RouteStops *[]CreateRouteStopRequest `json:"routeStops,omitempty"`
}

// GetAssignedDriverId returns the AssignedDriverId field value if set, zero value otherwise.
func (o *CreateRouteRequest) GetAssignedDriverId() string {
	if o == nil || o.AssignedDriverId == nil {
		var ret string
		return ret
	}
	return *o.AssignedDriverId
}

// GetAssignedDriverIdOk returns a tuple with the AssignedDriverId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateRouteRequest) GetAssignedDriverIdOk() (string, bool) {
	if o == nil || o.AssignedDriverId == nil {
		var ret string
		return ret, false
	}
	return *o.AssignedDriverId, true
}

// HasAssignedDriverId returns a boolean if a field has been set.
func (o *CreateRouteRequest) HasAssignedDriverId() bool {
	if o != nil && o.AssignedDriverId != nil {
		return true
	}

	return false
}

// SetAssignedDriverId gets a reference to the given string and assigns it to the AssignedDriverId field.
func (o *CreateRouteRequest) SetAssignedDriverId(v string) {
	o.AssignedDriverId = &v
}

// GetAssignedVehicleId returns the AssignedVehicleId field value if set, zero value otherwise.
func (o *CreateRouteRequest) GetAssignedVehicleId() string {
	if o == nil || o.AssignedVehicleId == nil {
		var ret string
		return ret
	}
	return *o.AssignedVehicleId
}

// GetAssignedVehicleIdOk returns a tuple with the AssignedVehicleId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateRouteRequest) GetAssignedVehicleIdOk() (string, bool) {
	if o == nil || o.AssignedVehicleId == nil {
		var ret string
		return ret, false
	}
	return *o.AssignedVehicleId, true
}

// HasAssignedVehicleId returns a boolean if a field has been set.
func (o *CreateRouteRequest) HasAssignedVehicleId() bool {
	if o != nil && o.AssignedVehicleId != nil {
		return true
	}

	return false
}

// SetAssignedVehicleId gets a reference to the given string and assigns it to the AssignedVehicleId field.
func (o *CreateRouteRequest) SetAssignedVehicleId(v string) {
	o.AssignedVehicleId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateRouteRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateRouteRequest) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateRouteRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateRouteRequest) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *CreateRouteRequest) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateRouteRequest) GetNotesOk() (string, bool) {
	if o == nil || o.Notes == nil {
		var ret string
		return ret, false
	}
	return *o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *CreateRouteRequest) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *CreateRouteRequest) SetNotes(v string) {
	o.Notes = &v
}

// GetPlannedMeters returns the PlannedMeters field value if set, zero value otherwise.
func (o *CreateRouteRequest) GetPlannedMeters() float32 {
	if o == nil || o.PlannedMeters == nil {
		var ret float32
		return ret
	}
	return *o.PlannedMeters
}

// GetPlannedMetersOk returns a tuple with the PlannedMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateRouteRequest) GetPlannedMetersOk() (float32, bool) {
	if o == nil || o.PlannedMeters == nil {
		var ret float32
		return ret, false
	}
	return *o.PlannedMeters, true
}

// HasPlannedMeters returns a boolean if a field has been set.
func (o *CreateRouteRequest) HasPlannedMeters() bool {
	if o != nil && o.PlannedMeters != nil {
		return true
	}

	return false
}

// SetPlannedMeters gets a reference to the given float32 and assigns it to the PlannedMeters field.
func (o *CreateRouteRequest) SetPlannedMeters(v float32) {
	o.PlannedMeters = &v
}

// GetRouteStops returns the RouteStops field value if set, zero value otherwise.
func (o *CreateRouteRequest) GetRouteStops() []CreateRouteStopRequest {
	if o == nil || o.RouteStops == nil {
		var ret []CreateRouteStopRequest
		return ret
	}
	return *o.RouteStops
}

// GetRouteStopsOk returns a tuple with the RouteStops field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateRouteRequest) GetRouteStopsOk() ([]CreateRouteStopRequest, bool) {
	if o == nil || o.RouteStops == nil {
		var ret []CreateRouteStopRequest
		return ret, false
	}
	return *o.RouteStops, true
}

// HasRouteStops returns a boolean if a field has been set.
func (o *CreateRouteRequest) HasRouteStops() bool {
	if o != nil && o.RouteStops != nil {
		return true
	}

	return false
}

// SetRouteStops gets a reference to the given []CreateRouteStopRequest and assigns it to the RouteStops field.
func (o *CreateRouteRequest) SetRouteStops(v []CreateRouteStopRequest) {
	o.RouteStops = &v
}

type NullableCreateRouteRequest struct {
	Value        CreateRouteRequest
	ExplicitNull bool
}

func (v NullableCreateRouteRequest) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableCreateRouteRequest) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
