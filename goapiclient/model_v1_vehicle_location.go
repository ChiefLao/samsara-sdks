/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1VehicleLocation Contains the location, in latitude and longitude, of a vehicle.
type V1VehicleLocation struct {
	// The ID of the driver currently assigned to this vehicle.
	DriverId *int32 `json:"driverId,omitempty"`
	// Heading in degrees.
	Heading *float64 `json:"heading,omitempty"`
	// ID of the vehicle.
	Id int64 `json:"id"`
	// Latitude in decimal degrees.
	Latitude *float64 `json:"latitude,omitempty"`
	// Text representation of nearest identifiable location to (latitude, longitude) coordinates.
	Location *string `json:"location,omitempty"`
	// Longitude in decimal degrees.
	Longitude *float64 `json:"longitude,omitempty"`
	// Name of the vehicle.
	Name *string `json:"name,omitempty"`
	// The number of meters reported by the odometer.
	OdometerMeters *int64 `json:"odometerMeters,omitempty"`
	// The source of data for odometerMeters. Will be either GPS or OBD
	OdometerType *string `json:"odometerType,omitempty"`
	// Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.
	OnTrip *bool `json:"onTrip,omitempty"`
	// A list of currently active route IDs that the vehicle is in.
	RouteIds *[]int64 `json:"routeIds,omitempty"`
	// Speed in miles per hour.
	Speed *float64 `json:"speed,omitempty"`
	// The time the reported location was logged, reported as a UNIX timestamp in milliseconds.
	Time *int32 `json:"time,omitempty"`
	// Vehicle Identification Number (VIN) of the vehicle.
	Vin *string `json:"vin,omitempty"`
}

// GetDriverId returns the DriverId field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetDriverId() int32 {
	if o == nil || o.DriverId == nil {
		var ret int32
		return ret
	}
	return *o.DriverId
}

// GetDriverIdOk returns a tuple with the DriverId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetDriverIdOk() (int32, bool) {
	if o == nil || o.DriverId == nil {
		var ret int32
		return ret, false
	}
	return *o.DriverId, true
}

// HasDriverId returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasDriverId() bool {
	if o != nil && o.DriverId != nil {
		return true
	}

	return false
}

// SetDriverId gets a reference to the given int32 and assigns it to the DriverId field.
func (o *V1VehicleLocation) SetDriverId(v int32) {
	o.DriverId = &v
}

// GetHeading returns the Heading field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetHeading() float64 {
	if o == nil || o.Heading == nil {
		var ret float64
		return ret
	}
	return *o.Heading
}

// GetHeadingOk returns a tuple with the Heading field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetHeadingOk() (float64, bool) {
	if o == nil || o.Heading == nil {
		var ret float64
		return ret, false
	}
	return *o.Heading, true
}

// HasHeading returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasHeading() bool {
	if o != nil && o.Heading != nil {
		return true
	}

	return false
}

// SetHeading gets a reference to the given float64 and assigns it to the Heading field.
func (o *V1VehicleLocation) SetHeading(v float64) {
	o.Heading = &v
}

// GetId returns the Id field value
func (o *V1VehicleLocation) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *V1VehicleLocation) SetId(v int64) {
	o.Id = v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetLatitude() float64 {
	if o == nil || o.Latitude == nil {
		var ret float64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetLatitudeOk() (float64, bool) {
	if o == nil || o.Latitude == nil {
		var ret float64
		return ret, false
	}
	return *o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasLatitude() bool {
	if o != nil && o.Latitude != nil {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float64 and assigns it to the Latitude field.
func (o *V1VehicleLocation) SetLatitude(v float64) {
	o.Latitude = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetLocationOk() (string, bool) {
	if o == nil || o.Location == nil {
		var ret string
		return ret, false
	}
	return *o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *V1VehicleLocation) SetLocation(v string) {
	o.Location = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetLongitude() float64 {
	if o == nil || o.Longitude == nil {
		var ret float64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetLongitudeOk() (float64, bool) {
	if o == nil || o.Longitude == nil {
		var ret float64
		return ret, false
	}
	return *o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasLongitude() bool {
	if o != nil && o.Longitude != nil {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float64 and assigns it to the Longitude field.
func (o *V1VehicleLocation) SetLongitude(v float64) {
	o.Longitude = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1VehicleLocation) SetName(v string) {
	o.Name = &v
}

// GetOdometerMeters returns the OdometerMeters field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetOdometerMeters() int64 {
	if o == nil || o.OdometerMeters == nil {
		var ret int64
		return ret
	}
	return *o.OdometerMeters
}

// GetOdometerMetersOk returns a tuple with the OdometerMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetOdometerMetersOk() (int64, bool) {
	if o == nil || o.OdometerMeters == nil {
		var ret int64
		return ret, false
	}
	return *o.OdometerMeters, true
}

// HasOdometerMeters returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasOdometerMeters() bool {
	if o != nil && o.OdometerMeters != nil {
		return true
	}

	return false
}

// SetOdometerMeters gets a reference to the given int64 and assigns it to the OdometerMeters field.
func (o *V1VehicleLocation) SetOdometerMeters(v int64) {
	o.OdometerMeters = &v
}

// GetOdometerType returns the OdometerType field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetOdometerType() string {
	if o == nil || o.OdometerType == nil {
		var ret string
		return ret
	}
	return *o.OdometerType
}

// GetOdometerTypeOk returns a tuple with the OdometerType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetOdometerTypeOk() (string, bool) {
	if o == nil || o.OdometerType == nil {
		var ret string
		return ret, false
	}
	return *o.OdometerType, true
}

// HasOdometerType returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasOdometerType() bool {
	if o != nil && o.OdometerType != nil {
		return true
	}

	return false
}

// SetOdometerType gets a reference to the given string and assigns it to the OdometerType field.
func (o *V1VehicleLocation) SetOdometerType(v string) {
	o.OdometerType = &v
}

// GetOnTrip returns the OnTrip field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetOnTrip() bool {
	if o == nil || o.OnTrip == nil {
		var ret bool
		return ret
	}
	return *o.OnTrip
}

// GetOnTripOk returns a tuple with the OnTrip field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetOnTripOk() (bool, bool) {
	if o == nil || o.OnTrip == nil {
		var ret bool
		return ret, false
	}
	return *o.OnTrip, true
}

// HasOnTrip returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasOnTrip() bool {
	if o != nil && o.OnTrip != nil {
		return true
	}

	return false
}

// SetOnTrip gets a reference to the given bool and assigns it to the OnTrip field.
func (o *V1VehicleLocation) SetOnTrip(v bool) {
	o.OnTrip = &v
}

// GetRouteIds returns the RouteIds field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetRouteIds() []int64 {
	if o == nil || o.RouteIds == nil {
		var ret []int64
		return ret
	}
	return *o.RouteIds
}

// GetRouteIdsOk returns a tuple with the RouteIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetRouteIdsOk() ([]int64, bool) {
	if o == nil || o.RouteIds == nil {
		var ret []int64
		return ret, false
	}
	return *o.RouteIds, true
}

// HasRouteIds returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasRouteIds() bool {
	if o != nil && o.RouteIds != nil {
		return true
	}

	return false
}

// SetRouteIds gets a reference to the given []int64 and assigns it to the RouteIds field.
func (o *V1VehicleLocation) SetRouteIds(v []int64) {
	o.RouteIds = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetSpeed() float64 {
	if o == nil || o.Speed == nil {
		var ret float64
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetSpeedOk() (float64, bool) {
	if o == nil || o.Speed == nil {
		var ret float64
		return ret, false
	}
	return *o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasSpeed() bool {
	if o != nil && o.Speed != nil {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given float64 and assigns it to the Speed field.
func (o *V1VehicleLocation) SetSpeed(v float64) {
	o.Speed = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetTime() int32 {
	if o == nil || o.Time == nil {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetTimeOk() (int32, bool) {
	if o == nil || o.Time == nil {
		var ret int32
		return ret, false
	}
	return *o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *V1VehicleLocation) SetTime(v int32) {
	o.Time = &v
}

// GetVin returns the Vin field value if set, zero value otherwise.
func (o *V1VehicleLocation) GetVin() string {
	if o == nil || o.Vin == nil {
		var ret string
		return ret
	}
	return *o.Vin
}

// GetVinOk returns a tuple with the Vin field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleLocation) GetVinOk() (string, bool) {
	if o == nil || o.Vin == nil {
		var ret string
		return ret, false
	}
	return *o.Vin, true
}

// HasVin returns a boolean if a field has been set.
func (o *V1VehicleLocation) HasVin() bool {
	if o != nil && o.Vin != nil {
		return true
	}

	return false
}

// SetVin gets a reference to the given string and assigns it to the Vin field.
func (o *V1VehicleLocation) SetVin(v string) {
	o.Vin = &v
}

type NullableV1VehicleLocation struct {
	Value        V1VehicleLocation
	ExplicitNull bool
}

func (v NullableV1VehicleLocation) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1VehicleLocation) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
