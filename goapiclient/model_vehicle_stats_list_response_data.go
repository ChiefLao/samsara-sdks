/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// VehicleStatsListResponseData A vehicle and its list of stat events.
type VehicleStatsListResponseData struct {
	// Required data for one CTP smog test.
	CtpSmogTestData *[]VehicleStatsCtpSmogTestData `json:"ctpSmogTestData,omitempty"`
	// A list of engine state events for the given vehicle.
	EngineStates *[]VehicleStatsEngineState `json:"engineStates,omitempty"`
	// A list of fuel percentage readings for the given vehicle.
	FuelPercent *[]VehicleStatsFuelPercent `json:"fuelPercent,omitempty"`
	// A list of GPS distance events for the given vehicle.
	GpsDistanceMeters *[]VehicleStatsGpsDistanceMeters `json:"gpsDistanceMeters,omitempty"`
	// A list of GPS odometer events for the given vehicle.
	GpsOdometerMeters *[]VehicleStatsGpsOdometerMeters `json:"gpsOdometerMeters,omitempty"`
	// The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.
	Id string `json:"id"`
	// The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsaraâ€™s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
	Name string `json:"name"`
	// A list of OBD engine seconds readings for the given vehicle.
	ObdEngineSeconds *[]VehicleStatsObdEngineSeconds `json:"obdEngineSeconds,omitempty"`
	// A list of OBD odometer readings for the given vehicle.
	ObdOdometerMeters *[]VehicleStatsObdOdometerMeters `json:"obdOdometerMeters,omitempty"`
}

// GetCtpSmogTestData returns the CtpSmogTestData field value if set, zero value otherwise.
func (o *VehicleStatsListResponseData) GetCtpSmogTestData() []VehicleStatsCtpSmogTestData {
	if o == nil || o.CtpSmogTestData == nil {
		var ret []VehicleStatsCtpSmogTestData
		return ret
	}
	return *o.CtpSmogTestData
}

// GetCtpSmogTestDataOk returns a tuple with the CtpSmogTestData field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseData) GetCtpSmogTestDataOk() ([]VehicleStatsCtpSmogTestData, bool) {
	if o == nil || o.CtpSmogTestData == nil {
		var ret []VehicleStatsCtpSmogTestData
		return ret, false
	}
	return *o.CtpSmogTestData, true
}

// HasCtpSmogTestData returns a boolean if a field has been set.
func (o *VehicleStatsListResponseData) HasCtpSmogTestData() bool {
	if o != nil && o.CtpSmogTestData != nil {
		return true
	}

	return false
}

// SetCtpSmogTestData gets a reference to the given []VehicleStatsCtpSmogTestData and assigns it to the CtpSmogTestData field.
func (o *VehicleStatsListResponseData) SetCtpSmogTestData(v []VehicleStatsCtpSmogTestData) {
	o.CtpSmogTestData = &v
}

// GetEngineStates returns the EngineStates field value if set, zero value otherwise.
func (o *VehicleStatsListResponseData) GetEngineStates() []VehicleStatsEngineState {
	if o == nil || o.EngineStates == nil {
		var ret []VehicleStatsEngineState
		return ret
	}
	return *o.EngineStates
}

// GetEngineStatesOk returns a tuple with the EngineStates field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseData) GetEngineStatesOk() ([]VehicleStatsEngineState, bool) {
	if o == nil || o.EngineStates == nil {
		var ret []VehicleStatsEngineState
		return ret, false
	}
	return *o.EngineStates, true
}

// HasEngineStates returns a boolean if a field has been set.
func (o *VehicleStatsListResponseData) HasEngineStates() bool {
	if o != nil && o.EngineStates != nil {
		return true
	}

	return false
}

// SetEngineStates gets a reference to the given []VehicleStatsEngineState and assigns it to the EngineStates field.
func (o *VehicleStatsListResponseData) SetEngineStates(v []VehicleStatsEngineState) {
	o.EngineStates = &v
}

// GetFuelPercent returns the FuelPercent field value if set, zero value otherwise.
func (o *VehicleStatsListResponseData) GetFuelPercent() []VehicleStatsFuelPercent {
	if o == nil || o.FuelPercent == nil {
		var ret []VehicleStatsFuelPercent
		return ret
	}
	return *o.FuelPercent
}

// GetFuelPercentOk returns a tuple with the FuelPercent field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseData) GetFuelPercentOk() ([]VehicleStatsFuelPercent, bool) {
	if o == nil || o.FuelPercent == nil {
		var ret []VehicleStatsFuelPercent
		return ret, false
	}
	return *o.FuelPercent, true
}

// HasFuelPercent returns a boolean if a field has been set.
func (o *VehicleStatsListResponseData) HasFuelPercent() bool {
	if o != nil && o.FuelPercent != nil {
		return true
	}

	return false
}

// SetFuelPercent gets a reference to the given []VehicleStatsFuelPercent and assigns it to the FuelPercent field.
func (o *VehicleStatsListResponseData) SetFuelPercent(v []VehicleStatsFuelPercent) {
	o.FuelPercent = &v
}

// GetGpsDistanceMeters returns the GpsDistanceMeters field value if set, zero value otherwise.
func (o *VehicleStatsListResponseData) GetGpsDistanceMeters() []VehicleStatsGpsDistanceMeters {
	if o == nil || o.GpsDistanceMeters == nil {
		var ret []VehicleStatsGpsDistanceMeters
		return ret
	}
	return *o.GpsDistanceMeters
}

// GetGpsDistanceMetersOk returns a tuple with the GpsDistanceMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseData) GetGpsDistanceMetersOk() ([]VehicleStatsGpsDistanceMeters, bool) {
	if o == nil || o.GpsDistanceMeters == nil {
		var ret []VehicleStatsGpsDistanceMeters
		return ret, false
	}
	return *o.GpsDistanceMeters, true
}

// HasGpsDistanceMeters returns a boolean if a field has been set.
func (o *VehicleStatsListResponseData) HasGpsDistanceMeters() bool {
	if o != nil && o.GpsDistanceMeters != nil {
		return true
	}

	return false
}

// SetGpsDistanceMeters gets a reference to the given []VehicleStatsGpsDistanceMeters and assigns it to the GpsDistanceMeters field.
func (o *VehicleStatsListResponseData) SetGpsDistanceMeters(v []VehicleStatsGpsDistanceMeters) {
	o.GpsDistanceMeters = &v
}

// GetGpsOdometerMeters returns the GpsOdometerMeters field value if set, zero value otherwise.
func (o *VehicleStatsListResponseData) GetGpsOdometerMeters() []VehicleStatsGpsOdometerMeters {
	if o == nil || o.GpsOdometerMeters == nil {
		var ret []VehicleStatsGpsOdometerMeters
		return ret
	}
	return *o.GpsOdometerMeters
}

// GetGpsOdometerMetersOk returns a tuple with the GpsOdometerMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseData) GetGpsOdometerMetersOk() ([]VehicleStatsGpsOdometerMeters, bool) {
	if o == nil || o.GpsOdometerMeters == nil {
		var ret []VehicleStatsGpsOdometerMeters
		return ret, false
	}
	return *o.GpsOdometerMeters, true
}

// HasGpsOdometerMeters returns a boolean if a field has been set.
func (o *VehicleStatsListResponseData) HasGpsOdometerMeters() bool {
	if o != nil && o.GpsOdometerMeters != nil {
		return true
	}

	return false
}

// SetGpsOdometerMeters gets a reference to the given []VehicleStatsGpsOdometerMeters and assigns it to the GpsOdometerMeters field.
func (o *VehicleStatsListResponseData) SetGpsOdometerMeters(v []VehicleStatsGpsOdometerMeters) {
	o.GpsOdometerMeters = &v
}

// GetId returns the Id field value
func (o *VehicleStatsListResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *VehicleStatsListResponseData) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VehicleStatsListResponseData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *VehicleStatsListResponseData) SetName(v string) {
	o.Name = v
}

// GetObdEngineSeconds returns the ObdEngineSeconds field value if set, zero value otherwise.
func (o *VehicleStatsListResponseData) GetObdEngineSeconds() []VehicleStatsObdEngineSeconds {
	if o == nil || o.ObdEngineSeconds == nil {
		var ret []VehicleStatsObdEngineSeconds
		return ret
	}
	return *o.ObdEngineSeconds
}

// GetObdEngineSecondsOk returns a tuple with the ObdEngineSeconds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseData) GetObdEngineSecondsOk() ([]VehicleStatsObdEngineSeconds, bool) {
	if o == nil || o.ObdEngineSeconds == nil {
		var ret []VehicleStatsObdEngineSeconds
		return ret, false
	}
	return *o.ObdEngineSeconds, true
}

// HasObdEngineSeconds returns a boolean if a field has been set.
func (o *VehicleStatsListResponseData) HasObdEngineSeconds() bool {
	if o != nil && o.ObdEngineSeconds != nil {
		return true
	}

	return false
}

// SetObdEngineSeconds gets a reference to the given []VehicleStatsObdEngineSeconds and assigns it to the ObdEngineSeconds field.
func (o *VehicleStatsListResponseData) SetObdEngineSeconds(v []VehicleStatsObdEngineSeconds) {
	o.ObdEngineSeconds = &v
}

// GetObdOdometerMeters returns the ObdOdometerMeters field value if set, zero value otherwise.
func (o *VehicleStatsListResponseData) GetObdOdometerMeters() []VehicleStatsObdOdometerMeters {
	if o == nil || o.ObdOdometerMeters == nil {
		var ret []VehicleStatsObdOdometerMeters
		return ret
	}
	return *o.ObdOdometerMeters
}

// GetObdOdometerMetersOk returns a tuple with the ObdOdometerMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsListResponseData) GetObdOdometerMetersOk() ([]VehicleStatsObdOdometerMeters, bool) {
	if o == nil || o.ObdOdometerMeters == nil {
		var ret []VehicleStatsObdOdometerMeters
		return ret, false
	}
	return *o.ObdOdometerMeters, true
}

// HasObdOdometerMeters returns a boolean if a field has been set.
func (o *VehicleStatsListResponseData) HasObdOdometerMeters() bool {
	if o != nil && o.ObdOdometerMeters != nil {
		return true
	}

	return false
}

// SetObdOdometerMeters gets a reference to the given []VehicleStatsObdOdometerMeters and assigns it to the ObdOdometerMeters field.
func (o *VehicleStatsListResponseData) SetObdOdometerMeters(v []VehicleStatsObdOdometerMeters) {
	o.ObdOdometerMeters = &v
}

type NullableVehicleStatsListResponseData struct {
	Value        VehicleStatsListResponseData
	ExplicitNull bool
}

func (v NullableVehicleStatsListResponseData) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableVehicleStatsListResponseData) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
