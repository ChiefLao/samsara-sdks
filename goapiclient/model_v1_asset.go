/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1Asset Basic information of an asset
type V1Asset struct {
	// Serial number of the host asset
	AssetSerialNumber *string `json:"assetSerialNumber,omitempty"`
	// The cable connected to the asset
	Cable *[]V1AssetCable `json:"cable,omitempty"`
	// Engine hours
	EngineHours *int32 `json:"engineHours,omitempty"`
	// Asset ID
	Id int64 `json:"id"`
	// Asset name
	Name *string `json:"name,omitempty"`
	// The ID of the Vehicle associated to the Asset (if present)
	VehicleId *int64 `json:"vehicleId,omitempty"`
}

// GetAssetSerialNumber returns the AssetSerialNumber field value if set, zero value otherwise.
func (o *V1Asset) GetAssetSerialNumber() string {
	if o == nil || o.AssetSerialNumber == nil {
		var ret string
		return ret
	}
	return *o.AssetSerialNumber
}

// GetAssetSerialNumberOk returns a tuple with the AssetSerialNumber field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1Asset) GetAssetSerialNumberOk() (string, bool) {
	if o == nil || o.AssetSerialNumber == nil {
		var ret string
		return ret, false
	}
	return *o.AssetSerialNumber, true
}

// HasAssetSerialNumber returns a boolean if a field has been set.
func (o *V1Asset) HasAssetSerialNumber() bool {
	if o != nil && o.AssetSerialNumber != nil {
		return true
	}

	return false
}

// SetAssetSerialNumber gets a reference to the given string and assigns it to the AssetSerialNumber field.
func (o *V1Asset) SetAssetSerialNumber(v string) {
	o.AssetSerialNumber = &v
}

// GetCable returns the Cable field value if set, zero value otherwise.
func (o *V1Asset) GetCable() []V1AssetCable {
	if o == nil || o.Cable == nil {
		var ret []V1AssetCable
		return ret
	}
	return *o.Cable
}

// GetCableOk returns a tuple with the Cable field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1Asset) GetCableOk() ([]V1AssetCable, bool) {
	if o == nil || o.Cable == nil {
		var ret []V1AssetCable
		return ret, false
	}
	return *o.Cable, true
}

// HasCable returns a boolean if a field has been set.
func (o *V1Asset) HasCable() bool {
	if o != nil && o.Cable != nil {
		return true
	}

	return false
}

// SetCable gets a reference to the given []V1AssetCable and assigns it to the Cable field.
func (o *V1Asset) SetCable(v []V1AssetCable) {
	o.Cable = &v
}

// GetEngineHours returns the EngineHours field value if set, zero value otherwise.
func (o *V1Asset) GetEngineHours() int32 {
	if o == nil || o.EngineHours == nil {
		var ret int32
		return ret
	}
	return *o.EngineHours
}

// GetEngineHoursOk returns a tuple with the EngineHours field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1Asset) GetEngineHoursOk() (int32, bool) {
	if o == nil || o.EngineHours == nil {
		var ret int32
		return ret, false
	}
	return *o.EngineHours, true
}

// HasEngineHours returns a boolean if a field has been set.
func (o *V1Asset) HasEngineHours() bool {
	if o != nil && o.EngineHours != nil {
		return true
	}

	return false
}

// SetEngineHours gets a reference to the given int32 and assigns it to the EngineHours field.
func (o *V1Asset) SetEngineHours(v int32) {
	o.EngineHours = &v
}

// GetId returns the Id field value
func (o *V1Asset) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *V1Asset) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1Asset) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1Asset) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1Asset) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1Asset) SetName(v string) {
	o.Name = &v
}

// GetVehicleId returns the VehicleId field value if set, zero value otherwise.
func (o *V1Asset) GetVehicleId() int64 {
	if o == nil || o.VehicleId == nil {
		var ret int64
		return ret
	}
	return *o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1Asset) GetVehicleIdOk() (int64, bool) {
	if o == nil || o.VehicleId == nil {
		var ret int64
		return ret, false
	}
	return *o.VehicleId, true
}

// HasVehicleId returns a boolean if a field has been set.
func (o *V1Asset) HasVehicleId() bool {
	if o != nil && o.VehicleId != nil {
		return true
	}

	return false
}

// SetVehicleId gets a reference to the given int64 and assigns it to the VehicleId field.
func (o *V1Asset) SetVehicleId(v int64) {
	o.VehicleId = &v
}

type NullableV1Asset struct {
	Value        V1Asset
	ExplicitNull bool
}

func (v NullableV1Asset) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1Asset) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
