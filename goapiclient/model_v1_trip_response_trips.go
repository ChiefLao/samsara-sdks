/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1TripResponseTrips struct for V1TripResponseTrips
type V1TripResponseTrips struct {
	// List of associated asset IDs
	AssetIds *[]int64 `json:"assetIds,omitempty"`
	// List of codriver IDs
	CodriverIds *[]int64 `json:"codriverIds,omitempty"`
	// Length of the trip in meters. This value is calculated from the GPS data collected by the Samsara Vehicle Gateway.
	DistanceMeters *int32 `json:"distanceMeters,omitempty"`
	// ID of the driver.
	DriverId       *int32                        `json:"driverId,omitempty"`
	EndAddress     *V1TripResponseEndAddress     `json:"endAddress,omitempty"`
	EndCoordinates *V1TripResponseEndCoordinates `json:"endCoordinates,omitempty"`
	// Geocoded street address of start (latitude, longitude) coordinates.
	EndLocation *string `json:"endLocation,omitempty"`
	// End of the trip in UNIX milliseconds. Ongoing trips are indicated by an endMs value of 9223372036854775807.
	EndMs *int32 `json:"endMs,omitempty"`
	// Odometer reading (in meters) at the end of the trip. This is read from the vehicle's on-board diagnostics. If Samsara cannot read the vehicle's odometer values from on-board diagnostics, this value will be 0.
	EndOdometer *int32 `json:"endOdometer,omitempty"`
	// Amount in milliliters of fuel consumed on this trip.
	FuelConsumedMl   *int32                          `json:"fuelConsumedMl,omitempty"`
	StartAddress     *V1TripResponseStartAddress     `json:"startAddress,omitempty"`
	StartCoordinates *V1TripResponseStartCoordinates `json:"startCoordinates,omitempty"`
	// Geocoded street address of start (latitude, longitude) coordinates.
	StartLocation *string `json:"startLocation,omitempty"`
	// Beginning of the trip in UNIX milliseconds.
	StartMs *int32 `json:"startMs,omitempty"`
	// Odometer reading (in meters) at the beginning of the trip. This is read from the vehicle's on-board diagnostics. If Samsara cannot read the vehicle's odometer values from on-board diagnostics, this value will be 0.
	StartOdometer *int32 `json:"startOdometer,omitempty"`
	// Length in meters trip spent on toll roads.
	TollMeters *int32 `json:"tollMeters,omitempty"`
}

// GetAssetIds returns the AssetIds field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetAssetIds() []int64 {
	if o == nil || o.AssetIds == nil {
		var ret []int64
		return ret
	}
	return *o.AssetIds
}

// GetAssetIdsOk returns a tuple with the AssetIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetAssetIdsOk() ([]int64, bool) {
	if o == nil || o.AssetIds == nil {
		var ret []int64
		return ret, false
	}
	return *o.AssetIds, true
}

// HasAssetIds returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasAssetIds() bool {
	if o != nil && o.AssetIds != nil {
		return true
	}

	return false
}

// SetAssetIds gets a reference to the given []int64 and assigns it to the AssetIds field.
func (o *V1TripResponseTrips) SetAssetIds(v []int64) {
	o.AssetIds = &v
}

// GetCodriverIds returns the CodriverIds field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetCodriverIds() []int64 {
	if o == nil || o.CodriverIds == nil {
		var ret []int64
		return ret
	}
	return *o.CodriverIds
}

// GetCodriverIdsOk returns a tuple with the CodriverIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetCodriverIdsOk() ([]int64, bool) {
	if o == nil || o.CodriverIds == nil {
		var ret []int64
		return ret, false
	}
	return *o.CodriverIds, true
}

// HasCodriverIds returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasCodriverIds() bool {
	if o != nil && o.CodriverIds != nil {
		return true
	}

	return false
}

// SetCodriverIds gets a reference to the given []int64 and assigns it to the CodriverIds field.
func (o *V1TripResponseTrips) SetCodriverIds(v []int64) {
	o.CodriverIds = &v
}

// GetDistanceMeters returns the DistanceMeters field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetDistanceMeters() int32 {
	if o == nil || o.DistanceMeters == nil {
		var ret int32
		return ret
	}
	return *o.DistanceMeters
}

// GetDistanceMetersOk returns a tuple with the DistanceMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetDistanceMetersOk() (int32, bool) {
	if o == nil || o.DistanceMeters == nil {
		var ret int32
		return ret, false
	}
	return *o.DistanceMeters, true
}

// HasDistanceMeters returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasDistanceMeters() bool {
	if o != nil && o.DistanceMeters != nil {
		return true
	}

	return false
}

// SetDistanceMeters gets a reference to the given int32 and assigns it to the DistanceMeters field.
func (o *V1TripResponseTrips) SetDistanceMeters(v int32) {
	o.DistanceMeters = &v
}

// GetDriverId returns the DriverId field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetDriverId() int32 {
	if o == nil || o.DriverId == nil {
		var ret int32
		return ret
	}
	return *o.DriverId
}

// GetDriverIdOk returns a tuple with the DriverId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetDriverIdOk() (int32, bool) {
	if o == nil || o.DriverId == nil {
		var ret int32
		return ret, false
	}
	return *o.DriverId, true
}

// HasDriverId returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasDriverId() bool {
	if o != nil && o.DriverId != nil {
		return true
	}

	return false
}

// SetDriverId gets a reference to the given int32 and assigns it to the DriverId field.
func (o *V1TripResponseTrips) SetDriverId(v int32) {
	o.DriverId = &v
}

// GetEndAddress returns the EndAddress field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetEndAddress() V1TripResponseEndAddress {
	if o == nil || o.EndAddress == nil {
		var ret V1TripResponseEndAddress
		return ret
	}
	return *o.EndAddress
}

// GetEndAddressOk returns a tuple with the EndAddress field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetEndAddressOk() (V1TripResponseEndAddress, bool) {
	if o == nil || o.EndAddress == nil {
		var ret V1TripResponseEndAddress
		return ret, false
	}
	return *o.EndAddress, true
}

// HasEndAddress returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasEndAddress() bool {
	if o != nil && o.EndAddress != nil {
		return true
	}

	return false
}

// SetEndAddress gets a reference to the given V1TripResponseEndAddress and assigns it to the EndAddress field.
func (o *V1TripResponseTrips) SetEndAddress(v V1TripResponseEndAddress) {
	o.EndAddress = &v
}

// GetEndCoordinates returns the EndCoordinates field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetEndCoordinates() V1TripResponseEndCoordinates {
	if o == nil || o.EndCoordinates == nil {
		var ret V1TripResponseEndCoordinates
		return ret
	}
	return *o.EndCoordinates
}

// GetEndCoordinatesOk returns a tuple with the EndCoordinates field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetEndCoordinatesOk() (V1TripResponseEndCoordinates, bool) {
	if o == nil || o.EndCoordinates == nil {
		var ret V1TripResponseEndCoordinates
		return ret, false
	}
	return *o.EndCoordinates, true
}

// HasEndCoordinates returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasEndCoordinates() bool {
	if o != nil && o.EndCoordinates != nil {
		return true
	}

	return false
}

// SetEndCoordinates gets a reference to the given V1TripResponseEndCoordinates and assigns it to the EndCoordinates field.
func (o *V1TripResponseTrips) SetEndCoordinates(v V1TripResponseEndCoordinates) {
	o.EndCoordinates = &v
}

// GetEndLocation returns the EndLocation field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetEndLocation() string {
	if o == nil || o.EndLocation == nil {
		var ret string
		return ret
	}
	return *o.EndLocation
}

// GetEndLocationOk returns a tuple with the EndLocation field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetEndLocationOk() (string, bool) {
	if o == nil || o.EndLocation == nil {
		var ret string
		return ret, false
	}
	return *o.EndLocation, true
}

// HasEndLocation returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasEndLocation() bool {
	if o != nil && o.EndLocation != nil {
		return true
	}

	return false
}

// SetEndLocation gets a reference to the given string and assigns it to the EndLocation field.
func (o *V1TripResponseTrips) SetEndLocation(v string) {
	o.EndLocation = &v
}

// GetEndMs returns the EndMs field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetEndMs() int32 {
	if o == nil || o.EndMs == nil {
		var ret int32
		return ret
	}
	return *o.EndMs
}

// GetEndMsOk returns a tuple with the EndMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetEndMsOk() (int32, bool) {
	if o == nil || o.EndMs == nil {
		var ret int32
		return ret, false
	}
	return *o.EndMs, true
}

// HasEndMs returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasEndMs() bool {
	if o != nil && o.EndMs != nil {
		return true
	}

	return false
}

// SetEndMs gets a reference to the given int32 and assigns it to the EndMs field.
func (o *V1TripResponseTrips) SetEndMs(v int32) {
	o.EndMs = &v
}

// GetEndOdometer returns the EndOdometer field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetEndOdometer() int32 {
	if o == nil || o.EndOdometer == nil {
		var ret int32
		return ret
	}
	return *o.EndOdometer
}

// GetEndOdometerOk returns a tuple with the EndOdometer field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetEndOdometerOk() (int32, bool) {
	if o == nil || o.EndOdometer == nil {
		var ret int32
		return ret, false
	}
	return *o.EndOdometer, true
}

// HasEndOdometer returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasEndOdometer() bool {
	if o != nil && o.EndOdometer != nil {
		return true
	}

	return false
}

// SetEndOdometer gets a reference to the given int32 and assigns it to the EndOdometer field.
func (o *V1TripResponseTrips) SetEndOdometer(v int32) {
	o.EndOdometer = &v
}

// GetFuelConsumedMl returns the FuelConsumedMl field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetFuelConsumedMl() int32 {
	if o == nil || o.FuelConsumedMl == nil {
		var ret int32
		return ret
	}
	return *o.FuelConsumedMl
}

// GetFuelConsumedMlOk returns a tuple with the FuelConsumedMl field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetFuelConsumedMlOk() (int32, bool) {
	if o == nil || o.FuelConsumedMl == nil {
		var ret int32
		return ret, false
	}
	return *o.FuelConsumedMl, true
}

// HasFuelConsumedMl returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasFuelConsumedMl() bool {
	if o != nil && o.FuelConsumedMl != nil {
		return true
	}

	return false
}

// SetFuelConsumedMl gets a reference to the given int32 and assigns it to the FuelConsumedMl field.
func (o *V1TripResponseTrips) SetFuelConsumedMl(v int32) {
	o.FuelConsumedMl = &v
}

// GetStartAddress returns the StartAddress field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetStartAddress() V1TripResponseStartAddress {
	if o == nil || o.StartAddress == nil {
		var ret V1TripResponseStartAddress
		return ret
	}
	return *o.StartAddress
}

// GetStartAddressOk returns a tuple with the StartAddress field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetStartAddressOk() (V1TripResponseStartAddress, bool) {
	if o == nil || o.StartAddress == nil {
		var ret V1TripResponseStartAddress
		return ret, false
	}
	return *o.StartAddress, true
}

// HasStartAddress returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasStartAddress() bool {
	if o != nil && o.StartAddress != nil {
		return true
	}

	return false
}

// SetStartAddress gets a reference to the given V1TripResponseStartAddress and assigns it to the StartAddress field.
func (o *V1TripResponseTrips) SetStartAddress(v V1TripResponseStartAddress) {
	o.StartAddress = &v
}

// GetStartCoordinates returns the StartCoordinates field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetStartCoordinates() V1TripResponseStartCoordinates {
	if o == nil || o.StartCoordinates == nil {
		var ret V1TripResponseStartCoordinates
		return ret
	}
	return *o.StartCoordinates
}

// GetStartCoordinatesOk returns a tuple with the StartCoordinates field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetStartCoordinatesOk() (V1TripResponseStartCoordinates, bool) {
	if o == nil || o.StartCoordinates == nil {
		var ret V1TripResponseStartCoordinates
		return ret, false
	}
	return *o.StartCoordinates, true
}

// HasStartCoordinates returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasStartCoordinates() bool {
	if o != nil && o.StartCoordinates != nil {
		return true
	}

	return false
}

// SetStartCoordinates gets a reference to the given V1TripResponseStartCoordinates and assigns it to the StartCoordinates field.
func (o *V1TripResponseTrips) SetStartCoordinates(v V1TripResponseStartCoordinates) {
	o.StartCoordinates = &v
}

// GetStartLocation returns the StartLocation field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetStartLocation() string {
	if o == nil || o.StartLocation == nil {
		var ret string
		return ret
	}
	return *o.StartLocation
}

// GetStartLocationOk returns a tuple with the StartLocation field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetStartLocationOk() (string, bool) {
	if o == nil || o.StartLocation == nil {
		var ret string
		return ret, false
	}
	return *o.StartLocation, true
}

// HasStartLocation returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasStartLocation() bool {
	if o != nil && o.StartLocation != nil {
		return true
	}

	return false
}

// SetStartLocation gets a reference to the given string and assigns it to the StartLocation field.
func (o *V1TripResponseTrips) SetStartLocation(v string) {
	o.StartLocation = &v
}

// GetStartMs returns the StartMs field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetStartMs() int32 {
	if o == nil || o.StartMs == nil {
		var ret int32
		return ret
	}
	return *o.StartMs
}

// GetStartMsOk returns a tuple with the StartMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetStartMsOk() (int32, bool) {
	if o == nil || o.StartMs == nil {
		var ret int32
		return ret, false
	}
	return *o.StartMs, true
}

// HasStartMs returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasStartMs() bool {
	if o != nil && o.StartMs != nil {
		return true
	}

	return false
}

// SetStartMs gets a reference to the given int32 and assigns it to the StartMs field.
func (o *V1TripResponseTrips) SetStartMs(v int32) {
	o.StartMs = &v
}

// GetStartOdometer returns the StartOdometer field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetStartOdometer() int32 {
	if o == nil || o.StartOdometer == nil {
		var ret int32
		return ret
	}
	return *o.StartOdometer
}

// GetStartOdometerOk returns a tuple with the StartOdometer field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetStartOdometerOk() (int32, bool) {
	if o == nil || o.StartOdometer == nil {
		var ret int32
		return ret, false
	}
	return *o.StartOdometer, true
}

// HasStartOdometer returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasStartOdometer() bool {
	if o != nil && o.StartOdometer != nil {
		return true
	}

	return false
}

// SetStartOdometer gets a reference to the given int32 and assigns it to the StartOdometer field.
func (o *V1TripResponseTrips) SetStartOdometer(v int32) {
	o.StartOdometer = &v
}

// GetTollMeters returns the TollMeters field value if set, zero value otherwise.
func (o *V1TripResponseTrips) GetTollMeters() int32 {
	if o == nil || o.TollMeters == nil {
		var ret int32
		return ret
	}
	return *o.TollMeters
}

// GetTollMetersOk returns a tuple with the TollMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1TripResponseTrips) GetTollMetersOk() (int32, bool) {
	if o == nil || o.TollMeters == nil {
		var ret int32
		return ret, false
	}
	return *o.TollMeters, true
}

// HasTollMeters returns a boolean if a field has been set.
func (o *V1TripResponseTrips) HasTollMeters() bool {
	if o != nil && o.TollMeters != nil {
		return true
	}

	return false
}

// SetTollMeters gets a reference to the given int32 and assigns it to the TollMeters field.
func (o *V1TripResponseTrips) SetTollMeters(v int32) {
	o.TollMeters = &v
}

type NullableV1TripResponseTrips struct {
	Value        V1TripResponseTrips
	ExplicitNull bool
}

func (v NullableV1TripResponseTrips) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1TripResponseTrips) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
