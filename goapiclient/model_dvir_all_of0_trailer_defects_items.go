/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// DvirAllOf0TrailerDefectsItems struct for DvirAllOf0TrailerDefectsItems
type DvirAllOf0TrailerDefectsItems struct {
	// The comment describing the type of DVIR defect.
	Comment       *string                 `json:"comment,omitempty"`
	CreatedAtTime *map[string]interface{} `json:"createdAtTime,omitempty"`
	// The type of DVIR defect.
	DefectType *string `json:"defectType,omitempty"`
	// ID of the defect.
	Id string `json:"id"`
	// Signifies if this defect is resolved.
	IsResolved     bool                    `json:"isResolved"`
	ResolvedAtTime *map[string]interface{} `json:"resolvedAtTime,omitempty"`
	ResolvedBy     *DefectResolvedBy       `json:"resolvedBy,omitempty"`
	Trailer        *map[string]interface{} `json:"trailer,omitempty"`
	Vehicle        *map[string]interface{} `json:"vehicle,omitempty"`
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DvirAllOf0TrailerDefectsItems) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DvirAllOf0TrailerDefectsItems) GetCommentOk() (string, bool) {
	if o == nil || o.Comment == nil {
		var ret string
		return ret, false
	}
	return *o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DvirAllOf0TrailerDefectsItems) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DvirAllOf0TrailerDefectsItems) SetComment(v string) {
	o.Comment = &v
}

// GetCreatedAtTime returns the CreatedAtTime field value if set, zero value otherwise.
func (o *DvirAllOf0TrailerDefectsItems) GetCreatedAtTime() map[string]interface{} {
	if o == nil || o.CreatedAtTime == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CreatedAtTime
}

// GetCreatedAtTimeOk returns a tuple with the CreatedAtTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DvirAllOf0TrailerDefectsItems) GetCreatedAtTimeOk() (map[string]interface{}, bool) {
	if o == nil || o.CreatedAtTime == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.CreatedAtTime, true
}

// HasCreatedAtTime returns a boolean if a field has been set.
func (o *DvirAllOf0TrailerDefectsItems) HasCreatedAtTime() bool {
	if o != nil && o.CreatedAtTime != nil {
		return true
	}

	return false
}

// SetCreatedAtTime gets a reference to the given map[string]interface{} and assigns it to the CreatedAtTime field.
func (o *DvirAllOf0TrailerDefectsItems) SetCreatedAtTime(v map[string]interface{}) {
	o.CreatedAtTime = &v
}

// GetDefectType returns the DefectType field value if set, zero value otherwise.
func (o *DvirAllOf0TrailerDefectsItems) GetDefectType() string {
	if o == nil || o.DefectType == nil {
		var ret string
		return ret
	}
	return *o.DefectType
}

// GetDefectTypeOk returns a tuple with the DefectType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DvirAllOf0TrailerDefectsItems) GetDefectTypeOk() (string, bool) {
	if o == nil || o.DefectType == nil {
		var ret string
		return ret, false
	}
	return *o.DefectType, true
}

// HasDefectType returns a boolean if a field has been set.
func (o *DvirAllOf0TrailerDefectsItems) HasDefectType() bool {
	if o != nil && o.DefectType != nil {
		return true
	}

	return false
}

// SetDefectType gets a reference to the given string and assigns it to the DefectType field.
func (o *DvirAllOf0TrailerDefectsItems) SetDefectType(v string) {
	o.DefectType = &v
}

// GetId returns the Id field value
func (o *DvirAllOf0TrailerDefectsItems) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *DvirAllOf0TrailerDefectsItems) SetId(v string) {
	o.Id = v
}

// GetIsResolved returns the IsResolved field value
func (o *DvirAllOf0TrailerDefectsItems) GetIsResolved() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsResolved
}

// SetIsResolved sets field value
func (o *DvirAllOf0TrailerDefectsItems) SetIsResolved(v bool) {
	o.IsResolved = v
}

// GetResolvedAtTime returns the ResolvedAtTime field value if set, zero value otherwise.
func (o *DvirAllOf0TrailerDefectsItems) GetResolvedAtTime() map[string]interface{} {
	if o == nil || o.ResolvedAtTime == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ResolvedAtTime
}

// GetResolvedAtTimeOk returns a tuple with the ResolvedAtTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DvirAllOf0TrailerDefectsItems) GetResolvedAtTimeOk() (map[string]interface{}, bool) {
	if o == nil || o.ResolvedAtTime == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.ResolvedAtTime, true
}

// HasResolvedAtTime returns a boolean if a field has been set.
func (o *DvirAllOf0TrailerDefectsItems) HasResolvedAtTime() bool {
	if o != nil && o.ResolvedAtTime != nil {
		return true
	}

	return false
}

// SetResolvedAtTime gets a reference to the given map[string]interface{} and assigns it to the ResolvedAtTime field.
func (o *DvirAllOf0TrailerDefectsItems) SetResolvedAtTime(v map[string]interface{}) {
	o.ResolvedAtTime = &v
}

// GetResolvedBy returns the ResolvedBy field value if set, zero value otherwise.
func (o *DvirAllOf0TrailerDefectsItems) GetResolvedBy() DefectResolvedBy {
	if o == nil || o.ResolvedBy == nil {
		var ret DefectResolvedBy
		return ret
	}
	return *o.ResolvedBy
}

// GetResolvedByOk returns a tuple with the ResolvedBy field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DvirAllOf0TrailerDefectsItems) GetResolvedByOk() (DefectResolvedBy, bool) {
	if o == nil || o.ResolvedBy == nil {
		var ret DefectResolvedBy
		return ret, false
	}
	return *o.ResolvedBy, true
}

// HasResolvedBy returns a boolean if a field has been set.
func (o *DvirAllOf0TrailerDefectsItems) HasResolvedBy() bool {
	if o != nil && o.ResolvedBy != nil {
		return true
	}

	return false
}

// SetResolvedBy gets a reference to the given DefectResolvedBy and assigns it to the ResolvedBy field.
func (o *DvirAllOf0TrailerDefectsItems) SetResolvedBy(v DefectResolvedBy) {
	o.ResolvedBy = &v
}

// GetTrailer returns the Trailer field value if set, zero value otherwise.
func (o *DvirAllOf0TrailerDefectsItems) GetTrailer() map[string]interface{} {
	if o == nil || o.Trailer == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Trailer
}

// GetTrailerOk returns a tuple with the Trailer field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DvirAllOf0TrailerDefectsItems) GetTrailerOk() (map[string]interface{}, bool) {
	if o == nil || o.Trailer == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.Trailer, true
}

// HasTrailer returns a boolean if a field has been set.
func (o *DvirAllOf0TrailerDefectsItems) HasTrailer() bool {
	if o != nil && o.Trailer != nil {
		return true
	}

	return false
}

// SetTrailer gets a reference to the given map[string]interface{} and assigns it to the Trailer field.
func (o *DvirAllOf0TrailerDefectsItems) SetTrailer(v map[string]interface{}) {
	o.Trailer = &v
}

// GetVehicle returns the Vehicle field value if set, zero value otherwise.
func (o *DvirAllOf0TrailerDefectsItems) GetVehicle() map[string]interface{} {
	if o == nil || o.Vehicle == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Vehicle
}

// GetVehicleOk returns a tuple with the Vehicle field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DvirAllOf0TrailerDefectsItems) GetVehicleOk() (map[string]interface{}, bool) {
	if o == nil || o.Vehicle == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.Vehicle, true
}

// HasVehicle returns a boolean if a field has been set.
func (o *DvirAllOf0TrailerDefectsItems) HasVehicle() bool {
	if o != nil && o.Vehicle != nil {
		return true
	}

	return false
}

// SetVehicle gets a reference to the given map[string]interface{} and assigns it to the Vehicle field.
func (o *DvirAllOf0TrailerDefectsItems) SetVehicle(v map[string]interface{}) {
	o.Vehicle = &v
}

type NullableDvirAllOf0TrailerDefectsItems struct {
	Value        DvirAllOf0TrailerDefectsItems
	ExplicitNull bool
}

func (v NullableDvirAllOf0TrailerDefectsItems) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableDvirAllOf0TrailerDefectsItems) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
