/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1HosLogsResponseLogs struct for V1HosLogsResponseLogs
type V1HosLogsResponseLogs struct {
	CodriverIds *[]float32 `json:"codriverIds,omitempty"`
	// ID of the driver.
	DriverId *int64 `json:"driverId,omitempty"`
	// Deprecated.
	GroupId *int64 `json:"groupId,omitempty"`
	// The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
	HosStatusType *string `json:"hosStatusType,omitempty"`
	// City in which the log was recorded.
	LocCity *string `json:"locCity,omitempty"`
	// Latitude at which the log was recorded.
	LocLat *float32 `json:"locLat,omitempty"`
	// Longitude at which the log was recorded.
	LocLng *float32 `json:"locLng,omitempty"`
	// Name of location at which the log was recorded.
	LocName *string `json:"locName,omitempty"`
	// State in which the log was recorded.
	LocState *string `json:"locState,omitempty"`
	// The time at which the log/HOS status started in UNIX milliseconds.
	LogStartMs *int64 `json:"logStartMs,omitempty"`
	// Remark associated with the log entry.
	Remark *string `json:"remark,omitempty"`
	// ID of the vehicle.
	VehicleId *int64 `json:"vehicleId,omitempty"`
}

// GetCodriverIds returns the CodriverIds field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetCodriverIds() []float32 {
	if o == nil || o.CodriverIds == nil {
		var ret []float32
		return ret
	}
	return *o.CodriverIds
}

// GetCodriverIdsOk returns a tuple with the CodriverIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetCodriverIdsOk() ([]float32, bool) {
	if o == nil || o.CodriverIds == nil {
		var ret []float32
		return ret, false
	}
	return *o.CodriverIds, true
}

// HasCodriverIds returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasCodriverIds() bool {
	if o != nil && o.CodriverIds != nil {
		return true
	}

	return false
}

// SetCodriverIds gets a reference to the given []float32 and assigns it to the CodriverIds field.
func (o *V1HosLogsResponseLogs) SetCodriverIds(v []float32) {
	o.CodriverIds = &v
}

// GetDriverId returns the DriverId field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetDriverId() int64 {
	if o == nil || o.DriverId == nil {
		var ret int64
		return ret
	}
	return *o.DriverId
}

// GetDriverIdOk returns a tuple with the DriverId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetDriverIdOk() (int64, bool) {
	if o == nil || o.DriverId == nil {
		var ret int64
		return ret, false
	}
	return *o.DriverId, true
}

// HasDriverId returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasDriverId() bool {
	if o != nil && o.DriverId != nil {
		return true
	}

	return false
}

// SetDriverId gets a reference to the given int64 and assigns it to the DriverId field.
func (o *V1HosLogsResponseLogs) SetDriverId(v int64) {
	o.DriverId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetGroupId() int64 {
	if o == nil || o.GroupId == nil {
		var ret int64
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetGroupIdOk() (int64, bool) {
	if o == nil || o.GroupId == nil {
		var ret int64
		return ret, false
	}
	return *o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int64 and assigns it to the GroupId field.
func (o *V1HosLogsResponseLogs) SetGroupId(v int64) {
	o.GroupId = &v
}

// GetHosStatusType returns the HosStatusType field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetHosStatusType() string {
	if o == nil || o.HosStatusType == nil {
		var ret string
		return ret
	}
	return *o.HosStatusType
}

// GetHosStatusTypeOk returns a tuple with the HosStatusType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetHosStatusTypeOk() (string, bool) {
	if o == nil || o.HosStatusType == nil {
		var ret string
		return ret, false
	}
	return *o.HosStatusType, true
}

// HasHosStatusType returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasHosStatusType() bool {
	if o != nil && o.HosStatusType != nil {
		return true
	}

	return false
}

// SetHosStatusType gets a reference to the given string and assigns it to the HosStatusType field.
func (o *V1HosLogsResponseLogs) SetHosStatusType(v string) {
	o.HosStatusType = &v
}

// GetLocCity returns the LocCity field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetLocCity() string {
	if o == nil || o.LocCity == nil {
		var ret string
		return ret
	}
	return *o.LocCity
}

// GetLocCityOk returns a tuple with the LocCity field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetLocCityOk() (string, bool) {
	if o == nil || o.LocCity == nil {
		var ret string
		return ret, false
	}
	return *o.LocCity, true
}

// HasLocCity returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasLocCity() bool {
	if o != nil && o.LocCity != nil {
		return true
	}

	return false
}

// SetLocCity gets a reference to the given string and assigns it to the LocCity field.
func (o *V1HosLogsResponseLogs) SetLocCity(v string) {
	o.LocCity = &v
}

// GetLocLat returns the LocLat field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetLocLat() float32 {
	if o == nil || o.LocLat == nil {
		var ret float32
		return ret
	}
	return *o.LocLat
}

// GetLocLatOk returns a tuple with the LocLat field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetLocLatOk() (float32, bool) {
	if o == nil || o.LocLat == nil {
		var ret float32
		return ret, false
	}
	return *o.LocLat, true
}

// HasLocLat returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasLocLat() bool {
	if o != nil && o.LocLat != nil {
		return true
	}

	return false
}

// SetLocLat gets a reference to the given float32 and assigns it to the LocLat field.
func (o *V1HosLogsResponseLogs) SetLocLat(v float32) {
	o.LocLat = &v
}

// GetLocLng returns the LocLng field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetLocLng() float32 {
	if o == nil || o.LocLng == nil {
		var ret float32
		return ret
	}
	return *o.LocLng
}

// GetLocLngOk returns a tuple with the LocLng field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetLocLngOk() (float32, bool) {
	if o == nil || o.LocLng == nil {
		var ret float32
		return ret, false
	}
	return *o.LocLng, true
}

// HasLocLng returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasLocLng() bool {
	if o != nil && o.LocLng != nil {
		return true
	}

	return false
}

// SetLocLng gets a reference to the given float32 and assigns it to the LocLng field.
func (o *V1HosLogsResponseLogs) SetLocLng(v float32) {
	o.LocLng = &v
}

// GetLocName returns the LocName field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetLocName() string {
	if o == nil || o.LocName == nil {
		var ret string
		return ret
	}
	return *o.LocName
}

// GetLocNameOk returns a tuple with the LocName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetLocNameOk() (string, bool) {
	if o == nil || o.LocName == nil {
		var ret string
		return ret, false
	}
	return *o.LocName, true
}

// HasLocName returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasLocName() bool {
	if o != nil && o.LocName != nil {
		return true
	}

	return false
}

// SetLocName gets a reference to the given string and assigns it to the LocName field.
func (o *V1HosLogsResponseLogs) SetLocName(v string) {
	o.LocName = &v
}

// GetLocState returns the LocState field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetLocState() string {
	if o == nil || o.LocState == nil {
		var ret string
		return ret
	}
	return *o.LocState
}

// GetLocStateOk returns a tuple with the LocState field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetLocStateOk() (string, bool) {
	if o == nil || o.LocState == nil {
		var ret string
		return ret, false
	}
	return *o.LocState, true
}

// HasLocState returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasLocState() bool {
	if o != nil && o.LocState != nil {
		return true
	}

	return false
}

// SetLocState gets a reference to the given string and assigns it to the LocState field.
func (o *V1HosLogsResponseLogs) SetLocState(v string) {
	o.LocState = &v
}

// GetLogStartMs returns the LogStartMs field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetLogStartMs() int64 {
	if o == nil || o.LogStartMs == nil {
		var ret int64
		return ret
	}
	return *o.LogStartMs
}

// GetLogStartMsOk returns a tuple with the LogStartMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetLogStartMsOk() (int64, bool) {
	if o == nil || o.LogStartMs == nil {
		var ret int64
		return ret, false
	}
	return *o.LogStartMs, true
}

// HasLogStartMs returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasLogStartMs() bool {
	if o != nil && o.LogStartMs != nil {
		return true
	}

	return false
}

// SetLogStartMs gets a reference to the given int64 and assigns it to the LogStartMs field.
func (o *V1HosLogsResponseLogs) SetLogStartMs(v int64) {
	o.LogStartMs = &v
}

// GetRemark returns the Remark field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetRemark() string {
	if o == nil || o.Remark == nil {
		var ret string
		return ret
	}
	return *o.Remark
}

// GetRemarkOk returns a tuple with the Remark field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetRemarkOk() (string, bool) {
	if o == nil || o.Remark == nil {
		var ret string
		return ret, false
	}
	return *o.Remark, true
}

// HasRemark returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasRemark() bool {
	if o != nil && o.Remark != nil {
		return true
	}

	return false
}

// SetRemark gets a reference to the given string and assigns it to the Remark field.
func (o *V1HosLogsResponseLogs) SetRemark(v string) {
	o.Remark = &v
}

// GetVehicleId returns the VehicleId field value if set, zero value otherwise.
func (o *V1HosLogsResponseLogs) GetVehicleId() int64 {
	if o == nil || o.VehicleId == nil {
		var ret int64
		return ret
	}
	return *o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1HosLogsResponseLogs) GetVehicleIdOk() (int64, bool) {
	if o == nil || o.VehicleId == nil {
		var ret int64
		return ret, false
	}
	return *o.VehicleId, true
}

// HasVehicleId returns a boolean if a field has been set.
func (o *V1HosLogsResponseLogs) HasVehicleId() bool {
	if o != nil && o.VehicleId != nil {
		return true
	}

	return false
}

// SetVehicleId gets a reference to the given int64 and assigns it to the VehicleId field.
func (o *V1HosLogsResponseLogs) SetVehicleId(v int64) {
	o.VehicleId = &v
}

type NullableV1HosLogsResponseLogs struct {
	Value        V1HosLogsResponseLogs
	ExplicitNull bool
}

func (v NullableV1HosLogsResponseLogs) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1HosLogsResponseLogs) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
