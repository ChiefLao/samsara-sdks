/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// RemoteObdTestRecords CTP test data reported from one ECU.
type RemoteObdTestRecords struct {
	// Calibration Verification Numbers read from the CAN bus, separated by a pipe character.
	CalCvn *string `json:"calCvn,omitempty"`
	// Indicates CalCvnCount was successfully read from the CAN bus.
	CalCvnValid *bool `json:"calCvnValid,omitempty"`
	// Calibration IDs read from the CAN bus, separated by a pipe character.
	CalId *string `json:"calId,omitempty"`
	// Indicates CalId was successfully read from the CAN bus.
	CalIdValid *bool `json:"calIdValid,omitempty"`
	// OBD Monitor Status - Catalyst or NMHC Catalyst as read from the CAN bus.
	Catalyst *string `json:"catalyst,omitempty"`
	// OBD Monitor Status - Comprehensive as read from the CAN bus.
	Comprehensive *string `json:"comprehensive,omitempty"`
	// Compression ignition monitor supported as read from the CAN bus.
	CompressionIgnitionMonitorSupported *string `json:"compressionIgnitionMonitorSupported,omitempty"`
	// Indicates CompressionIgnitionMonitorSupported was successfully read from the CAN bus.
	CompressionIgnitionMonitorSupportedValid *bool `json:"compressionIgnitionMonitorSupportedValid,omitempty"`
	// Distance Traveled Since Codes Cleared as read from the CAN bus.
	DistanceTraveledSinceCodesCleared *int32 `json:"distanceTraveledSinceCodesCleared,omitempty"`
	// Indicates DistanceTraveledSinceCodesCleared was successfully read from the CAN bus.
	DistanceTraveledSinceCodesClearedValid *bool `json:"distanceTraveledSinceCodesClearedValid,omitempty"`
	// Distance Traveled With MIL On as read from the CAN bus.
	DistanceTraveledWithMilOn *int32 `json:"distanceTraveledWithMilOn,omitempty"`
	// Indicates DistanceTraveledWithMilOn was successfully read from the CAN bus.
	DistanceTraveledWithMilOnValid *bool `json:"distanceTraveledWithMilOnValid,omitempty"`
	// Number of emissions related DTCs read from the CAN bus.
	DtcCount *int32 `json:"dtcCount,omitempty"`
	// OBD Monitor Status - EGR/VVT as read from the CAN bus.
	Egr *string `json:"egr,omitempty"`
	// Emission related DTCs as read from the CAN bus, separated by pipe characters.
	EmissionRelatedDtcs *string `json:"emissionRelatedDtcs,omitempty"`
	// Indicates EmissionRelatedDtcs was successfully read from the CAN bus.
	EmissionRelatedDtcsValid *bool `json:"emissionRelatedDtcsValid,omitempty"`
	// OBD Monitor Status - Evaporative System or ISO/SAE Reserved as read from the CAN bus.
	EvapSystem *string `json:"evapSystem,omitempty"`
	// OBD Monitor Status - Fuel as read from the CAN bus.
	Fuel *string `json:"fuel,omitempty"`
	// OBD Monitor Status - Heated Catalyst or NOx/SCR aftertreatment as read from the CAN bus.
	HeatedCatalyst *string `json:"heatedCatalyst,omitempty"`
	// OBD Monitor Status - Oxygen Sensor Heater or PM Filter as read from the CAN bus.
	HeatedO2Sensor *string `json:"heatedO2Sensor,omitempty"`
	// OBD Monitor Status - ISO/SAE Reserved as read from the CAN bus.
	IsoSaeReserved *string `json:"isoSaeReserved,omitempty"`
	// Malfunction indicator lamp status as read from the CAN bus.
	Mil *string `json:"mil,omitempty"`
	// Indicates Mil was successfully read from the CAN bus.
	MilValid *bool `json:"milValid,omitempty"`
	// Minutes Since Codes Cleared as read from the CAN bus.
	MinutesSinceCodesCleared *int32 `json:"minutesSinceCodesCleared,omitempty"`
	// Indicates MinutesSinceCodesCleared was successfully read from the CAN bus.
	MinutesSinceCodesClearedValid *bool `json:"minutesSinceCodesClearedValid,omitempty"`
	// Minutes Since MIL On as read from the CAN bus.
	MinutesSinceMil *int32 `json:"minutesSinceMil,omitempty"`
	// Indicates MinutesSinceMil was successfully read from the CAN bus.
	MinutesSinceMilValid *bool `json:"minutesSinceMilValid,omitempty"`
	// OBD Monitor Status - Misfire as read from the CAN bus.
	Misfire *string `json:"misfire,omitempty"`
	// Number of OBD Monitor Statuses reporting 'Supported and not ready'.
	NotReadyCount *int32 `json:"notReadyCount,omitempty"`
	// OBD Monitor Status - Oxygen Sensor or Exhaust Gas Sensor as read from the CAN bus.
	O2Sensor *string `json:"o2Sensor,omitempty"`
	// Indicates Obd Monitor Statuses were successfully read from the CAN bus.
	ObdMonitorStatusValid *bool `json:"obdMonitorStatusValid,omitempty"`
	// Vehicle identification number as read from the CAN bus.
	ObdVin *string `json:"obdVin,omitempty"`
	// Indicates ObdVin was successfully read from the CAN bus.
	ObdVinValid *bool `json:"obdVinValid,omitempty"`
	// ECU Address for the ECU that was read from the CAN bus.
	PcmId *string `json:"pcmId,omitempty"`
	// Number of pending DTCs read from the CAN bus.
	PendingDtcCount *int32 `json:"pendingDtcCount,omitempty"`
	// Pending DTCs as read from the CAN bus, separated by pipe characters.
	PendingDtcs *string `json:"pendingDtcs,omitempty"`
	// Indicates PendingDtcs was successfully read from the CAN bus.
	PendingDtcsValid *bool `json:"pendingDtcsValid,omitempty"`
	// Number of permanent DTCs read from the CAN bus.
	PermanentDtcCount *int32 `json:"permanentDtcCount,omitempty"`
	// Permanent DTCs as read from the CAN bus, separated by pipe characters.
	PermanentDtcs *string `json:"permanentDtcs,omitempty"`
	// Indicates PermanentDtcs was successfully read from the CAN bus.
	PermanentDtcsValid *bool `json:"permanentDtcsValid,omitempty"`
	// PidCount is a count of all PIDs supported for this control module as read from the CAN bus
	PidCount *int32 `json:"pidCount,omitempty"`
	// Indicates PidCount was successfully read from the CAN bus.
	PidCountValid *bool `json:"pidCountValid,omitempty"`
	// Revolutions per minute as read from the CAN bus.
	Rpm *int32 `json:"rpm,omitempty"`
	// Indicates Rpm was successfully read from the CAN bus.
	RpmValid *bool `json:"rpmValid,omitempty"`
	// OBD Monitor Status - Secondary Air System or Boost Pressure System as read from the CAN bus.
	SecondaryAir *string `json:"secondaryAir,omitempty"`
	// Warmups Since Codes Cleared as read from the CAN bus.
	WarmupsSinceCodesCleared *int32 `json:"warmupsSinceCodesCleared,omitempty"`
	// Indicates WarmupsSinceCodesCleared was successfully read from the CAN bus.
	WarmupsSinceCodesClearedValid *bool `json:"warmupsSinceCodesClearedValid,omitempty"`
}

// GetCalCvn returns the CalCvn field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetCalCvn() string {
	if o == nil || o.CalCvn == nil {
		var ret string
		return ret
	}
	return *o.CalCvn
}

// GetCalCvnOk returns a tuple with the CalCvn field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetCalCvnOk() (string, bool) {
	if o == nil || o.CalCvn == nil {
		var ret string
		return ret, false
	}
	return *o.CalCvn, true
}

// HasCalCvn returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasCalCvn() bool {
	if o != nil && o.CalCvn != nil {
		return true
	}

	return false
}

// SetCalCvn gets a reference to the given string and assigns it to the CalCvn field.
func (o *RemoteObdTestRecords) SetCalCvn(v string) {
	o.CalCvn = &v
}

// GetCalCvnValid returns the CalCvnValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetCalCvnValid() bool {
	if o == nil || o.CalCvnValid == nil {
		var ret bool
		return ret
	}
	return *o.CalCvnValid
}

// GetCalCvnValidOk returns a tuple with the CalCvnValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetCalCvnValidOk() (bool, bool) {
	if o == nil || o.CalCvnValid == nil {
		var ret bool
		return ret, false
	}
	return *o.CalCvnValid, true
}

// HasCalCvnValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasCalCvnValid() bool {
	if o != nil && o.CalCvnValid != nil {
		return true
	}

	return false
}

// SetCalCvnValid gets a reference to the given bool and assigns it to the CalCvnValid field.
func (o *RemoteObdTestRecords) SetCalCvnValid(v bool) {
	o.CalCvnValid = &v
}

// GetCalId returns the CalId field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetCalId() string {
	if o == nil || o.CalId == nil {
		var ret string
		return ret
	}
	return *o.CalId
}

// GetCalIdOk returns a tuple with the CalId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetCalIdOk() (string, bool) {
	if o == nil || o.CalId == nil {
		var ret string
		return ret, false
	}
	return *o.CalId, true
}

// HasCalId returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasCalId() bool {
	if o != nil && o.CalId != nil {
		return true
	}

	return false
}

// SetCalId gets a reference to the given string and assigns it to the CalId field.
func (o *RemoteObdTestRecords) SetCalId(v string) {
	o.CalId = &v
}

// GetCalIdValid returns the CalIdValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetCalIdValid() bool {
	if o == nil || o.CalIdValid == nil {
		var ret bool
		return ret
	}
	return *o.CalIdValid
}

// GetCalIdValidOk returns a tuple with the CalIdValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetCalIdValidOk() (bool, bool) {
	if o == nil || o.CalIdValid == nil {
		var ret bool
		return ret, false
	}
	return *o.CalIdValid, true
}

// HasCalIdValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasCalIdValid() bool {
	if o != nil && o.CalIdValid != nil {
		return true
	}

	return false
}

// SetCalIdValid gets a reference to the given bool and assigns it to the CalIdValid field.
func (o *RemoteObdTestRecords) SetCalIdValid(v bool) {
	o.CalIdValid = &v
}

// GetCatalyst returns the Catalyst field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetCatalyst() string {
	if o == nil || o.Catalyst == nil {
		var ret string
		return ret
	}
	return *o.Catalyst
}

// GetCatalystOk returns a tuple with the Catalyst field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetCatalystOk() (string, bool) {
	if o == nil || o.Catalyst == nil {
		var ret string
		return ret, false
	}
	return *o.Catalyst, true
}

// HasCatalyst returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasCatalyst() bool {
	if o != nil && o.Catalyst != nil {
		return true
	}

	return false
}

// SetCatalyst gets a reference to the given string and assigns it to the Catalyst field.
func (o *RemoteObdTestRecords) SetCatalyst(v string) {
	o.Catalyst = &v
}

// GetComprehensive returns the Comprehensive field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetComprehensive() string {
	if o == nil || o.Comprehensive == nil {
		var ret string
		return ret
	}
	return *o.Comprehensive
}

// GetComprehensiveOk returns a tuple with the Comprehensive field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetComprehensiveOk() (string, bool) {
	if o == nil || o.Comprehensive == nil {
		var ret string
		return ret, false
	}
	return *o.Comprehensive, true
}

// HasComprehensive returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasComprehensive() bool {
	if o != nil && o.Comprehensive != nil {
		return true
	}

	return false
}

// SetComprehensive gets a reference to the given string and assigns it to the Comprehensive field.
func (o *RemoteObdTestRecords) SetComprehensive(v string) {
	o.Comprehensive = &v
}

// GetCompressionIgnitionMonitorSupported returns the CompressionIgnitionMonitorSupported field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetCompressionIgnitionMonitorSupported() string {
	if o == nil || o.CompressionIgnitionMonitorSupported == nil {
		var ret string
		return ret
	}
	return *o.CompressionIgnitionMonitorSupported
}

// GetCompressionIgnitionMonitorSupportedOk returns a tuple with the CompressionIgnitionMonitorSupported field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetCompressionIgnitionMonitorSupportedOk() (string, bool) {
	if o == nil || o.CompressionIgnitionMonitorSupported == nil {
		var ret string
		return ret, false
	}
	return *o.CompressionIgnitionMonitorSupported, true
}

// HasCompressionIgnitionMonitorSupported returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasCompressionIgnitionMonitorSupported() bool {
	if o != nil && o.CompressionIgnitionMonitorSupported != nil {
		return true
	}

	return false
}

// SetCompressionIgnitionMonitorSupported gets a reference to the given string and assigns it to the CompressionIgnitionMonitorSupported field.
func (o *RemoteObdTestRecords) SetCompressionIgnitionMonitorSupported(v string) {
	o.CompressionIgnitionMonitorSupported = &v
}

// GetCompressionIgnitionMonitorSupportedValid returns the CompressionIgnitionMonitorSupportedValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetCompressionIgnitionMonitorSupportedValid() bool {
	if o == nil || o.CompressionIgnitionMonitorSupportedValid == nil {
		var ret bool
		return ret
	}
	return *o.CompressionIgnitionMonitorSupportedValid
}

// GetCompressionIgnitionMonitorSupportedValidOk returns a tuple with the CompressionIgnitionMonitorSupportedValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetCompressionIgnitionMonitorSupportedValidOk() (bool, bool) {
	if o == nil || o.CompressionIgnitionMonitorSupportedValid == nil {
		var ret bool
		return ret, false
	}
	return *o.CompressionIgnitionMonitorSupportedValid, true
}

// HasCompressionIgnitionMonitorSupportedValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasCompressionIgnitionMonitorSupportedValid() bool {
	if o != nil && o.CompressionIgnitionMonitorSupportedValid != nil {
		return true
	}

	return false
}

// SetCompressionIgnitionMonitorSupportedValid gets a reference to the given bool and assigns it to the CompressionIgnitionMonitorSupportedValid field.
func (o *RemoteObdTestRecords) SetCompressionIgnitionMonitorSupportedValid(v bool) {
	o.CompressionIgnitionMonitorSupportedValid = &v
}

// GetDistanceTraveledSinceCodesCleared returns the DistanceTraveledSinceCodesCleared field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetDistanceTraveledSinceCodesCleared() int32 {
	if o == nil || o.DistanceTraveledSinceCodesCleared == nil {
		var ret int32
		return ret
	}
	return *o.DistanceTraveledSinceCodesCleared
}

// GetDistanceTraveledSinceCodesClearedOk returns a tuple with the DistanceTraveledSinceCodesCleared field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetDistanceTraveledSinceCodesClearedOk() (int32, bool) {
	if o == nil || o.DistanceTraveledSinceCodesCleared == nil {
		var ret int32
		return ret, false
	}
	return *o.DistanceTraveledSinceCodesCleared, true
}

// HasDistanceTraveledSinceCodesCleared returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasDistanceTraveledSinceCodesCleared() bool {
	if o != nil && o.DistanceTraveledSinceCodesCleared != nil {
		return true
	}

	return false
}

// SetDistanceTraveledSinceCodesCleared gets a reference to the given int32 and assigns it to the DistanceTraveledSinceCodesCleared field.
func (o *RemoteObdTestRecords) SetDistanceTraveledSinceCodesCleared(v int32) {
	o.DistanceTraveledSinceCodesCleared = &v
}

// GetDistanceTraveledSinceCodesClearedValid returns the DistanceTraveledSinceCodesClearedValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetDistanceTraveledSinceCodesClearedValid() bool {
	if o == nil || o.DistanceTraveledSinceCodesClearedValid == nil {
		var ret bool
		return ret
	}
	return *o.DistanceTraveledSinceCodesClearedValid
}

// GetDistanceTraveledSinceCodesClearedValidOk returns a tuple with the DistanceTraveledSinceCodesClearedValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetDistanceTraveledSinceCodesClearedValidOk() (bool, bool) {
	if o == nil || o.DistanceTraveledSinceCodesClearedValid == nil {
		var ret bool
		return ret, false
	}
	return *o.DistanceTraveledSinceCodesClearedValid, true
}

// HasDistanceTraveledSinceCodesClearedValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasDistanceTraveledSinceCodesClearedValid() bool {
	if o != nil && o.DistanceTraveledSinceCodesClearedValid != nil {
		return true
	}

	return false
}

// SetDistanceTraveledSinceCodesClearedValid gets a reference to the given bool and assigns it to the DistanceTraveledSinceCodesClearedValid field.
func (o *RemoteObdTestRecords) SetDistanceTraveledSinceCodesClearedValid(v bool) {
	o.DistanceTraveledSinceCodesClearedValid = &v
}

// GetDistanceTraveledWithMilOn returns the DistanceTraveledWithMilOn field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetDistanceTraveledWithMilOn() int32 {
	if o == nil || o.DistanceTraveledWithMilOn == nil {
		var ret int32
		return ret
	}
	return *o.DistanceTraveledWithMilOn
}

// GetDistanceTraveledWithMilOnOk returns a tuple with the DistanceTraveledWithMilOn field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetDistanceTraveledWithMilOnOk() (int32, bool) {
	if o == nil || o.DistanceTraveledWithMilOn == nil {
		var ret int32
		return ret, false
	}
	return *o.DistanceTraveledWithMilOn, true
}

// HasDistanceTraveledWithMilOn returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasDistanceTraveledWithMilOn() bool {
	if o != nil && o.DistanceTraveledWithMilOn != nil {
		return true
	}

	return false
}

// SetDistanceTraveledWithMilOn gets a reference to the given int32 and assigns it to the DistanceTraveledWithMilOn field.
func (o *RemoteObdTestRecords) SetDistanceTraveledWithMilOn(v int32) {
	o.DistanceTraveledWithMilOn = &v
}

// GetDistanceTraveledWithMilOnValid returns the DistanceTraveledWithMilOnValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetDistanceTraveledWithMilOnValid() bool {
	if o == nil || o.DistanceTraveledWithMilOnValid == nil {
		var ret bool
		return ret
	}
	return *o.DistanceTraveledWithMilOnValid
}

// GetDistanceTraveledWithMilOnValidOk returns a tuple with the DistanceTraveledWithMilOnValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetDistanceTraveledWithMilOnValidOk() (bool, bool) {
	if o == nil || o.DistanceTraveledWithMilOnValid == nil {
		var ret bool
		return ret, false
	}
	return *o.DistanceTraveledWithMilOnValid, true
}

// HasDistanceTraveledWithMilOnValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasDistanceTraveledWithMilOnValid() bool {
	if o != nil && o.DistanceTraveledWithMilOnValid != nil {
		return true
	}

	return false
}

// SetDistanceTraveledWithMilOnValid gets a reference to the given bool and assigns it to the DistanceTraveledWithMilOnValid field.
func (o *RemoteObdTestRecords) SetDistanceTraveledWithMilOnValid(v bool) {
	o.DistanceTraveledWithMilOnValid = &v
}

// GetDtcCount returns the DtcCount field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetDtcCount() int32 {
	if o == nil || o.DtcCount == nil {
		var ret int32
		return ret
	}
	return *o.DtcCount
}

// GetDtcCountOk returns a tuple with the DtcCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetDtcCountOk() (int32, bool) {
	if o == nil || o.DtcCount == nil {
		var ret int32
		return ret, false
	}
	return *o.DtcCount, true
}

// HasDtcCount returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasDtcCount() bool {
	if o != nil && o.DtcCount != nil {
		return true
	}

	return false
}

// SetDtcCount gets a reference to the given int32 and assigns it to the DtcCount field.
func (o *RemoteObdTestRecords) SetDtcCount(v int32) {
	o.DtcCount = &v
}

// GetEgr returns the Egr field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetEgr() string {
	if o == nil || o.Egr == nil {
		var ret string
		return ret
	}
	return *o.Egr
}

// GetEgrOk returns a tuple with the Egr field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetEgrOk() (string, bool) {
	if o == nil || o.Egr == nil {
		var ret string
		return ret, false
	}
	return *o.Egr, true
}

// HasEgr returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasEgr() bool {
	if o != nil && o.Egr != nil {
		return true
	}

	return false
}

// SetEgr gets a reference to the given string and assigns it to the Egr field.
func (o *RemoteObdTestRecords) SetEgr(v string) {
	o.Egr = &v
}

// GetEmissionRelatedDtcs returns the EmissionRelatedDtcs field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetEmissionRelatedDtcs() string {
	if o == nil || o.EmissionRelatedDtcs == nil {
		var ret string
		return ret
	}
	return *o.EmissionRelatedDtcs
}

// GetEmissionRelatedDtcsOk returns a tuple with the EmissionRelatedDtcs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetEmissionRelatedDtcsOk() (string, bool) {
	if o == nil || o.EmissionRelatedDtcs == nil {
		var ret string
		return ret, false
	}
	return *o.EmissionRelatedDtcs, true
}

// HasEmissionRelatedDtcs returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasEmissionRelatedDtcs() bool {
	if o != nil && o.EmissionRelatedDtcs != nil {
		return true
	}

	return false
}

// SetEmissionRelatedDtcs gets a reference to the given string and assigns it to the EmissionRelatedDtcs field.
func (o *RemoteObdTestRecords) SetEmissionRelatedDtcs(v string) {
	o.EmissionRelatedDtcs = &v
}

// GetEmissionRelatedDtcsValid returns the EmissionRelatedDtcsValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetEmissionRelatedDtcsValid() bool {
	if o == nil || o.EmissionRelatedDtcsValid == nil {
		var ret bool
		return ret
	}
	return *o.EmissionRelatedDtcsValid
}

// GetEmissionRelatedDtcsValidOk returns a tuple with the EmissionRelatedDtcsValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetEmissionRelatedDtcsValidOk() (bool, bool) {
	if o == nil || o.EmissionRelatedDtcsValid == nil {
		var ret bool
		return ret, false
	}
	return *o.EmissionRelatedDtcsValid, true
}

// HasEmissionRelatedDtcsValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasEmissionRelatedDtcsValid() bool {
	if o != nil && o.EmissionRelatedDtcsValid != nil {
		return true
	}

	return false
}

// SetEmissionRelatedDtcsValid gets a reference to the given bool and assigns it to the EmissionRelatedDtcsValid field.
func (o *RemoteObdTestRecords) SetEmissionRelatedDtcsValid(v bool) {
	o.EmissionRelatedDtcsValid = &v
}

// GetEvapSystem returns the EvapSystem field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetEvapSystem() string {
	if o == nil || o.EvapSystem == nil {
		var ret string
		return ret
	}
	return *o.EvapSystem
}

// GetEvapSystemOk returns a tuple with the EvapSystem field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetEvapSystemOk() (string, bool) {
	if o == nil || o.EvapSystem == nil {
		var ret string
		return ret, false
	}
	return *o.EvapSystem, true
}

// HasEvapSystem returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasEvapSystem() bool {
	if o != nil && o.EvapSystem != nil {
		return true
	}

	return false
}

// SetEvapSystem gets a reference to the given string and assigns it to the EvapSystem field.
func (o *RemoteObdTestRecords) SetEvapSystem(v string) {
	o.EvapSystem = &v
}

// GetFuel returns the Fuel field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetFuel() string {
	if o == nil || o.Fuel == nil {
		var ret string
		return ret
	}
	return *o.Fuel
}

// GetFuelOk returns a tuple with the Fuel field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetFuelOk() (string, bool) {
	if o == nil || o.Fuel == nil {
		var ret string
		return ret, false
	}
	return *o.Fuel, true
}

// HasFuel returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasFuel() bool {
	if o != nil && o.Fuel != nil {
		return true
	}

	return false
}

// SetFuel gets a reference to the given string and assigns it to the Fuel field.
func (o *RemoteObdTestRecords) SetFuel(v string) {
	o.Fuel = &v
}

// GetHeatedCatalyst returns the HeatedCatalyst field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetHeatedCatalyst() string {
	if o == nil || o.HeatedCatalyst == nil {
		var ret string
		return ret
	}
	return *o.HeatedCatalyst
}

// GetHeatedCatalystOk returns a tuple with the HeatedCatalyst field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetHeatedCatalystOk() (string, bool) {
	if o == nil || o.HeatedCatalyst == nil {
		var ret string
		return ret, false
	}
	return *o.HeatedCatalyst, true
}

// HasHeatedCatalyst returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasHeatedCatalyst() bool {
	if o != nil && o.HeatedCatalyst != nil {
		return true
	}

	return false
}

// SetHeatedCatalyst gets a reference to the given string and assigns it to the HeatedCatalyst field.
func (o *RemoteObdTestRecords) SetHeatedCatalyst(v string) {
	o.HeatedCatalyst = &v
}

// GetHeatedO2Sensor returns the HeatedO2Sensor field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetHeatedO2Sensor() string {
	if o == nil || o.HeatedO2Sensor == nil {
		var ret string
		return ret
	}
	return *o.HeatedO2Sensor
}

// GetHeatedO2SensorOk returns a tuple with the HeatedO2Sensor field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetHeatedO2SensorOk() (string, bool) {
	if o == nil || o.HeatedO2Sensor == nil {
		var ret string
		return ret, false
	}
	return *o.HeatedO2Sensor, true
}

// HasHeatedO2Sensor returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasHeatedO2Sensor() bool {
	if o != nil && o.HeatedO2Sensor != nil {
		return true
	}

	return false
}

// SetHeatedO2Sensor gets a reference to the given string and assigns it to the HeatedO2Sensor field.
func (o *RemoteObdTestRecords) SetHeatedO2Sensor(v string) {
	o.HeatedO2Sensor = &v
}

// GetIsoSaeReserved returns the IsoSaeReserved field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetIsoSaeReserved() string {
	if o == nil || o.IsoSaeReserved == nil {
		var ret string
		return ret
	}
	return *o.IsoSaeReserved
}

// GetIsoSaeReservedOk returns a tuple with the IsoSaeReserved field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetIsoSaeReservedOk() (string, bool) {
	if o == nil || o.IsoSaeReserved == nil {
		var ret string
		return ret, false
	}
	return *o.IsoSaeReserved, true
}

// HasIsoSaeReserved returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasIsoSaeReserved() bool {
	if o != nil && o.IsoSaeReserved != nil {
		return true
	}

	return false
}

// SetIsoSaeReserved gets a reference to the given string and assigns it to the IsoSaeReserved field.
func (o *RemoteObdTestRecords) SetIsoSaeReserved(v string) {
	o.IsoSaeReserved = &v
}

// GetMil returns the Mil field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetMil() string {
	if o == nil || o.Mil == nil {
		var ret string
		return ret
	}
	return *o.Mil
}

// GetMilOk returns a tuple with the Mil field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetMilOk() (string, bool) {
	if o == nil || o.Mil == nil {
		var ret string
		return ret, false
	}
	return *o.Mil, true
}

// HasMil returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasMil() bool {
	if o != nil && o.Mil != nil {
		return true
	}

	return false
}

// SetMil gets a reference to the given string and assigns it to the Mil field.
func (o *RemoteObdTestRecords) SetMil(v string) {
	o.Mil = &v
}

// GetMilValid returns the MilValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetMilValid() bool {
	if o == nil || o.MilValid == nil {
		var ret bool
		return ret
	}
	return *o.MilValid
}

// GetMilValidOk returns a tuple with the MilValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetMilValidOk() (bool, bool) {
	if o == nil || o.MilValid == nil {
		var ret bool
		return ret, false
	}
	return *o.MilValid, true
}

// HasMilValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasMilValid() bool {
	if o != nil && o.MilValid != nil {
		return true
	}

	return false
}

// SetMilValid gets a reference to the given bool and assigns it to the MilValid field.
func (o *RemoteObdTestRecords) SetMilValid(v bool) {
	o.MilValid = &v
}

// GetMinutesSinceCodesCleared returns the MinutesSinceCodesCleared field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetMinutesSinceCodesCleared() int32 {
	if o == nil || o.MinutesSinceCodesCleared == nil {
		var ret int32
		return ret
	}
	return *o.MinutesSinceCodesCleared
}

// GetMinutesSinceCodesClearedOk returns a tuple with the MinutesSinceCodesCleared field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetMinutesSinceCodesClearedOk() (int32, bool) {
	if o == nil || o.MinutesSinceCodesCleared == nil {
		var ret int32
		return ret, false
	}
	return *o.MinutesSinceCodesCleared, true
}

// HasMinutesSinceCodesCleared returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasMinutesSinceCodesCleared() bool {
	if o != nil && o.MinutesSinceCodesCleared != nil {
		return true
	}

	return false
}

// SetMinutesSinceCodesCleared gets a reference to the given int32 and assigns it to the MinutesSinceCodesCleared field.
func (o *RemoteObdTestRecords) SetMinutesSinceCodesCleared(v int32) {
	o.MinutesSinceCodesCleared = &v
}

// GetMinutesSinceCodesClearedValid returns the MinutesSinceCodesClearedValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetMinutesSinceCodesClearedValid() bool {
	if o == nil || o.MinutesSinceCodesClearedValid == nil {
		var ret bool
		return ret
	}
	return *o.MinutesSinceCodesClearedValid
}

// GetMinutesSinceCodesClearedValidOk returns a tuple with the MinutesSinceCodesClearedValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetMinutesSinceCodesClearedValidOk() (bool, bool) {
	if o == nil || o.MinutesSinceCodesClearedValid == nil {
		var ret bool
		return ret, false
	}
	return *o.MinutesSinceCodesClearedValid, true
}

// HasMinutesSinceCodesClearedValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasMinutesSinceCodesClearedValid() bool {
	if o != nil && o.MinutesSinceCodesClearedValid != nil {
		return true
	}

	return false
}

// SetMinutesSinceCodesClearedValid gets a reference to the given bool and assigns it to the MinutesSinceCodesClearedValid field.
func (o *RemoteObdTestRecords) SetMinutesSinceCodesClearedValid(v bool) {
	o.MinutesSinceCodesClearedValid = &v
}

// GetMinutesSinceMil returns the MinutesSinceMil field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetMinutesSinceMil() int32 {
	if o == nil || o.MinutesSinceMil == nil {
		var ret int32
		return ret
	}
	return *o.MinutesSinceMil
}

// GetMinutesSinceMilOk returns a tuple with the MinutesSinceMil field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetMinutesSinceMilOk() (int32, bool) {
	if o == nil || o.MinutesSinceMil == nil {
		var ret int32
		return ret, false
	}
	return *o.MinutesSinceMil, true
}

// HasMinutesSinceMil returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasMinutesSinceMil() bool {
	if o != nil && o.MinutesSinceMil != nil {
		return true
	}

	return false
}

// SetMinutesSinceMil gets a reference to the given int32 and assigns it to the MinutesSinceMil field.
func (o *RemoteObdTestRecords) SetMinutesSinceMil(v int32) {
	o.MinutesSinceMil = &v
}

// GetMinutesSinceMilValid returns the MinutesSinceMilValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetMinutesSinceMilValid() bool {
	if o == nil || o.MinutesSinceMilValid == nil {
		var ret bool
		return ret
	}
	return *o.MinutesSinceMilValid
}

// GetMinutesSinceMilValidOk returns a tuple with the MinutesSinceMilValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetMinutesSinceMilValidOk() (bool, bool) {
	if o == nil || o.MinutesSinceMilValid == nil {
		var ret bool
		return ret, false
	}
	return *o.MinutesSinceMilValid, true
}

// HasMinutesSinceMilValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasMinutesSinceMilValid() bool {
	if o != nil && o.MinutesSinceMilValid != nil {
		return true
	}

	return false
}

// SetMinutesSinceMilValid gets a reference to the given bool and assigns it to the MinutesSinceMilValid field.
func (o *RemoteObdTestRecords) SetMinutesSinceMilValid(v bool) {
	o.MinutesSinceMilValid = &v
}

// GetMisfire returns the Misfire field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetMisfire() string {
	if o == nil || o.Misfire == nil {
		var ret string
		return ret
	}
	return *o.Misfire
}

// GetMisfireOk returns a tuple with the Misfire field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetMisfireOk() (string, bool) {
	if o == nil || o.Misfire == nil {
		var ret string
		return ret, false
	}
	return *o.Misfire, true
}

// HasMisfire returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasMisfire() bool {
	if o != nil && o.Misfire != nil {
		return true
	}

	return false
}

// SetMisfire gets a reference to the given string and assigns it to the Misfire field.
func (o *RemoteObdTestRecords) SetMisfire(v string) {
	o.Misfire = &v
}

// GetNotReadyCount returns the NotReadyCount field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetNotReadyCount() int32 {
	if o == nil || o.NotReadyCount == nil {
		var ret int32
		return ret
	}
	return *o.NotReadyCount
}

// GetNotReadyCountOk returns a tuple with the NotReadyCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetNotReadyCountOk() (int32, bool) {
	if o == nil || o.NotReadyCount == nil {
		var ret int32
		return ret, false
	}
	return *o.NotReadyCount, true
}

// HasNotReadyCount returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasNotReadyCount() bool {
	if o != nil && o.NotReadyCount != nil {
		return true
	}

	return false
}

// SetNotReadyCount gets a reference to the given int32 and assigns it to the NotReadyCount field.
func (o *RemoteObdTestRecords) SetNotReadyCount(v int32) {
	o.NotReadyCount = &v
}

// GetO2Sensor returns the O2Sensor field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetO2Sensor() string {
	if o == nil || o.O2Sensor == nil {
		var ret string
		return ret
	}
	return *o.O2Sensor
}

// GetO2SensorOk returns a tuple with the O2Sensor field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetO2SensorOk() (string, bool) {
	if o == nil || o.O2Sensor == nil {
		var ret string
		return ret, false
	}
	return *o.O2Sensor, true
}

// HasO2Sensor returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasO2Sensor() bool {
	if o != nil && o.O2Sensor != nil {
		return true
	}

	return false
}

// SetO2Sensor gets a reference to the given string and assigns it to the O2Sensor field.
func (o *RemoteObdTestRecords) SetO2Sensor(v string) {
	o.O2Sensor = &v
}

// GetObdMonitorStatusValid returns the ObdMonitorStatusValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetObdMonitorStatusValid() bool {
	if o == nil || o.ObdMonitorStatusValid == nil {
		var ret bool
		return ret
	}
	return *o.ObdMonitorStatusValid
}

// GetObdMonitorStatusValidOk returns a tuple with the ObdMonitorStatusValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetObdMonitorStatusValidOk() (bool, bool) {
	if o == nil || o.ObdMonitorStatusValid == nil {
		var ret bool
		return ret, false
	}
	return *o.ObdMonitorStatusValid, true
}

// HasObdMonitorStatusValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasObdMonitorStatusValid() bool {
	if o != nil && o.ObdMonitorStatusValid != nil {
		return true
	}

	return false
}

// SetObdMonitorStatusValid gets a reference to the given bool and assigns it to the ObdMonitorStatusValid field.
func (o *RemoteObdTestRecords) SetObdMonitorStatusValid(v bool) {
	o.ObdMonitorStatusValid = &v
}

// GetObdVin returns the ObdVin field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetObdVin() string {
	if o == nil || o.ObdVin == nil {
		var ret string
		return ret
	}
	return *o.ObdVin
}

// GetObdVinOk returns a tuple with the ObdVin field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetObdVinOk() (string, bool) {
	if o == nil || o.ObdVin == nil {
		var ret string
		return ret, false
	}
	return *o.ObdVin, true
}

// HasObdVin returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasObdVin() bool {
	if o != nil && o.ObdVin != nil {
		return true
	}

	return false
}

// SetObdVin gets a reference to the given string and assigns it to the ObdVin field.
func (o *RemoteObdTestRecords) SetObdVin(v string) {
	o.ObdVin = &v
}

// GetObdVinValid returns the ObdVinValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetObdVinValid() bool {
	if o == nil || o.ObdVinValid == nil {
		var ret bool
		return ret
	}
	return *o.ObdVinValid
}

// GetObdVinValidOk returns a tuple with the ObdVinValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetObdVinValidOk() (bool, bool) {
	if o == nil || o.ObdVinValid == nil {
		var ret bool
		return ret, false
	}
	return *o.ObdVinValid, true
}

// HasObdVinValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasObdVinValid() bool {
	if o != nil && o.ObdVinValid != nil {
		return true
	}

	return false
}

// SetObdVinValid gets a reference to the given bool and assigns it to the ObdVinValid field.
func (o *RemoteObdTestRecords) SetObdVinValid(v bool) {
	o.ObdVinValid = &v
}

// GetPcmId returns the PcmId field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetPcmId() string {
	if o == nil || o.PcmId == nil {
		var ret string
		return ret
	}
	return *o.PcmId
}

// GetPcmIdOk returns a tuple with the PcmId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetPcmIdOk() (string, bool) {
	if o == nil || o.PcmId == nil {
		var ret string
		return ret, false
	}
	return *o.PcmId, true
}

// HasPcmId returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasPcmId() bool {
	if o != nil && o.PcmId != nil {
		return true
	}

	return false
}

// SetPcmId gets a reference to the given string and assigns it to the PcmId field.
func (o *RemoteObdTestRecords) SetPcmId(v string) {
	o.PcmId = &v
}

// GetPendingDtcCount returns the PendingDtcCount field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetPendingDtcCount() int32 {
	if o == nil || o.PendingDtcCount == nil {
		var ret int32
		return ret
	}
	return *o.PendingDtcCount
}

// GetPendingDtcCountOk returns a tuple with the PendingDtcCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetPendingDtcCountOk() (int32, bool) {
	if o == nil || o.PendingDtcCount == nil {
		var ret int32
		return ret, false
	}
	return *o.PendingDtcCount, true
}

// HasPendingDtcCount returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasPendingDtcCount() bool {
	if o != nil && o.PendingDtcCount != nil {
		return true
	}

	return false
}

// SetPendingDtcCount gets a reference to the given int32 and assigns it to the PendingDtcCount field.
func (o *RemoteObdTestRecords) SetPendingDtcCount(v int32) {
	o.PendingDtcCount = &v
}

// GetPendingDtcs returns the PendingDtcs field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetPendingDtcs() string {
	if o == nil || o.PendingDtcs == nil {
		var ret string
		return ret
	}
	return *o.PendingDtcs
}

// GetPendingDtcsOk returns a tuple with the PendingDtcs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetPendingDtcsOk() (string, bool) {
	if o == nil || o.PendingDtcs == nil {
		var ret string
		return ret, false
	}
	return *o.PendingDtcs, true
}

// HasPendingDtcs returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasPendingDtcs() bool {
	if o != nil && o.PendingDtcs != nil {
		return true
	}

	return false
}

// SetPendingDtcs gets a reference to the given string and assigns it to the PendingDtcs field.
func (o *RemoteObdTestRecords) SetPendingDtcs(v string) {
	o.PendingDtcs = &v
}

// GetPendingDtcsValid returns the PendingDtcsValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetPendingDtcsValid() bool {
	if o == nil || o.PendingDtcsValid == nil {
		var ret bool
		return ret
	}
	return *o.PendingDtcsValid
}

// GetPendingDtcsValidOk returns a tuple with the PendingDtcsValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetPendingDtcsValidOk() (bool, bool) {
	if o == nil || o.PendingDtcsValid == nil {
		var ret bool
		return ret, false
	}
	return *o.PendingDtcsValid, true
}

// HasPendingDtcsValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasPendingDtcsValid() bool {
	if o != nil && o.PendingDtcsValid != nil {
		return true
	}

	return false
}

// SetPendingDtcsValid gets a reference to the given bool and assigns it to the PendingDtcsValid field.
func (o *RemoteObdTestRecords) SetPendingDtcsValid(v bool) {
	o.PendingDtcsValid = &v
}

// GetPermanentDtcCount returns the PermanentDtcCount field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetPermanentDtcCount() int32 {
	if o == nil || o.PermanentDtcCount == nil {
		var ret int32
		return ret
	}
	return *o.PermanentDtcCount
}

// GetPermanentDtcCountOk returns a tuple with the PermanentDtcCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetPermanentDtcCountOk() (int32, bool) {
	if o == nil || o.PermanentDtcCount == nil {
		var ret int32
		return ret, false
	}
	return *o.PermanentDtcCount, true
}

// HasPermanentDtcCount returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasPermanentDtcCount() bool {
	if o != nil && o.PermanentDtcCount != nil {
		return true
	}

	return false
}

// SetPermanentDtcCount gets a reference to the given int32 and assigns it to the PermanentDtcCount field.
func (o *RemoteObdTestRecords) SetPermanentDtcCount(v int32) {
	o.PermanentDtcCount = &v
}

// GetPermanentDtcs returns the PermanentDtcs field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetPermanentDtcs() string {
	if o == nil || o.PermanentDtcs == nil {
		var ret string
		return ret
	}
	return *o.PermanentDtcs
}

// GetPermanentDtcsOk returns a tuple with the PermanentDtcs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetPermanentDtcsOk() (string, bool) {
	if o == nil || o.PermanentDtcs == nil {
		var ret string
		return ret, false
	}
	return *o.PermanentDtcs, true
}

// HasPermanentDtcs returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasPermanentDtcs() bool {
	if o != nil && o.PermanentDtcs != nil {
		return true
	}

	return false
}

// SetPermanentDtcs gets a reference to the given string and assigns it to the PermanentDtcs field.
func (o *RemoteObdTestRecords) SetPermanentDtcs(v string) {
	o.PermanentDtcs = &v
}

// GetPermanentDtcsValid returns the PermanentDtcsValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetPermanentDtcsValid() bool {
	if o == nil || o.PermanentDtcsValid == nil {
		var ret bool
		return ret
	}
	return *o.PermanentDtcsValid
}

// GetPermanentDtcsValidOk returns a tuple with the PermanentDtcsValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetPermanentDtcsValidOk() (bool, bool) {
	if o == nil || o.PermanentDtcsValid == nil {
		var ret bool
		return ret, false
	}
	return *o.PermanentDtcsValid, true
}

// HasPermanentDtcsValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasPermanentDtcsValid() bool {
	if o != nil && o.PermanentDtcsValid != nil {
		return true
	}

	return false
}

// SetPermanentDtcsValid gets a reference to the given bool and assigns it to the PermanentDtcsValid field.
func (o *RemoteObdTestRecords) SetPermanentDtcsValid(v bool) {
	o.PermanentDtcsValid = &v
}

// GetPidCount returns the PidCount field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetPidCount() int32 {
	if o == nil || o.PidCount == nil {
		var ret int32
		return ret
	}
	return *o.PidCount
}

// GetPidCountOk returns a tuple with the PidCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetPidCountOk() (int32, bool) {
	if o == nil || o.PidCount == nil {
		var ret int32
		return ret, false
	}
	return *o.PidCount, true
}

// HasPidCount returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasPidCount() bool {
	if o != nil && o.PidCount != nil {
		return true
	}

	return false
}

// SetPidCount gets a reference to the given int32 and assigns it to the PidCount field.
func (o *RemoteObdTestRecords) SetPidCount(v int32) {
	o.PidCount = &v
}

// GetPidCountValid returns the PidCountValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetPidCountValid() bool {
	if o == nil || o.PidCountValid == nil {
		var ret bool
		return ret
	}
	return *o.PidCountValid
}

// GetPidCountValidOk returns a tuple with the PidCountValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetPidCountValidOk() (bool, bool) {
	if o == nil || o.PidCountValid == nil {
		var ret bool
		return ret, false
	}
	return *o.PidCountValid, true
}

// HasPidCountValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasPidCountValid() bool {
	if o != nil && o.PidCountValid != nil {
		return true
	}

	return false
}

// SetPidCountValid gets a reference to the given bool and assigns it to the PidCountValid field.
func (o *RemoteObdTestRecords) SetPidCountValid(v bool) {
	o.PidCountValid = &v
}

// GetRpm returns the Rpm field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetRpm() int32 {
	if o == nil || o.Rpm == nil {
		var ret int32
		return ret
	}
	return *o.Rpm
}

// GetRpmOk returns a tuple with the Rpm field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetRpmOk() (int32, bool) {
	if o == nil || o.Rpm == nil {
		var ret int32
		return ret, false
	}
	return *o.Rpm, true
}

// HasRpm returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasRpm() bool {
	if o != nil && o.Rpm != nil {
		return true
	}

	return false
}

// SetRpm gets a reference to the given int32 and assigns it to the Rpm field.
func (o *RemoteObdTestRecords) SetRpm(v int32) {
	o.Rpm = &v
}

// GetRpmValid returns the RpmValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetRpmValid() bool {
	if o == nil || o.RpmValid == nil {
		var ret bool
		return ret
	}
	return *o.RpmValid
}

// GetRpmValidOk returns a tuple with the RpmValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetRpmValidOk() (bool, bool) {
	if o == nil || o.RpmValid == nil {
		var ret bool
		return ret, false
	}
	return *o.RpmValid, true
}

// HasRpmValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasRpmValid() bool {
	if o != nil && o.RpmValid != nil {
		return true
	}

	return false
}

// SetRpmValid gets a reference to the given bool and assigns it to the RpmValid field.
func (o *RemoteObdTestRecords) SetRpmValid(v bool) {
	o.RpmValid = &v
}

// GetSecondaryAir returns the SecondaryAir field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetSecondaryAir() string {
	if o == nil || o.SecondaryAir == nil {
		var ret string
		return ret
	}
	return *o.SecondaryAir
}

// GetSecondaryAirOk returns a tuple with the SecondaryAir field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetSecondaryAirOk() (string, bool) {
	if o == nil || o.SecondaryAir == nil {
		var ret string
		return ret, false
	}
	return *o.SecondaryAir, true
}

// HasSecondaryAir returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasSecondaryAir() bool {
	if o != nil && o.SecondaryAir != nil {
		return true
	}

	return false
}

// SetSecondaryAir gets a reference to the given string and assigns it to the SecondaryAir field.
func (o *RemoteObdTestRecords) SetSecondaryAir(v string) {
	o.SecondaryAir = &v
}

// GetWarmupsSinceCodesCleared returns the WarmupsSinceCodesCleared field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetWarmupsSinceCodesCleared() int32 {
	if o == nil || o.WarmupsSinceCodesCleared == nil {
		var ret int32
		return ret
	}
	return *o.WarmupsSinceCodesCleared
}

// GetWarmupsSinceCodesClearedOk returns a tuple with the WarmupsSinceCodesCleared field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetWarmupsSinceCodesClearedOk() (int32, bool) {
	if o == nil || o.WarmupsSinceCodesCleared == nil {
		var ret int32
		return ret, false
	}
	return *o.WarmupsSinceCodesCleared, true
}

// HasWarmupsSinceCodesCleared returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasWarmupsSinceCodesCleared() bool {
	if o != nil && o.WarmupsSinceCodesCleared != nil {
		return true
	}

	return false
}

// SetWarmupsSinceCodesCleared gets a reference to the given int32 and assigns it to the WarmupsSinceCodesCleared field.
func (o *RemoteObdTestRecords) SetWarmupsSinceCodesCleared(v int32) {
	o.WarmupsSinceCodesCleared = &v
}

// GetWarmupsSinceCodesClearedValid returns the WarmupsSinceCodesClearedValid field value if set, zero value otherwise.
func (o *RemoteObdTestRecords) GetWarmupsSinceCodesClearedValid() bool {
	if o == nil || o.WarmupsSinceCodesClearedValid == nil {
		var ret bool
		return ret
	}
	return *o.WarmupsSinceCodesClearedValid
}

// GetWarmupsSinceCodesClearedValidOk returns a tuple with the WarmupsSinceCodesClearedValid field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RemoteObdTestRecords) GetWarmupsSinceCodesClearedValidOk() (bool, bool) {
	if o == nil || o.WarmupsSinceCodesClearedValid == nil {
		var ret bool
		return ret, false
	}
	return *o.WarmupsSinceCodesClearedValid, true
}

// HasWarmupsSinceCodesClearedValid returns a boolean if a field has been set.
func (o *RemoteObdTestRecords) HasWarmupsSinceCodesClearedValid() bool {
	if o != nil && o.WarmupsSinceCodesClearedValid != nil {
		return true
	}

	return false
}

// SetWarmupsSinceCodesClearedValid gets a reference to the given bool and assigns it to the WarmupsSinceCodesClearedValid field.
func (o *RemoteObdTestRecords) SetWarmupsSinceCodesClearedValid(v bool) {
	o.WarmupsSinceCodesClearedValid = &v
}

type NullableRemoteObdTestRecords struct {
	Value        RemoteObdTestRecords
	ExplicitNull bool
}

func (v NullableRemoteObdTestRecords) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableRemoteObdTestRecords) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
