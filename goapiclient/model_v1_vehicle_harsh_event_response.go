/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1VehicleHarshEventResponse Harsh event details for a vehicle
type V1VehicleHarshEventResponse struct {
	// URL for downloading the forward facing video
	DownloadForwardVideoUrl *string `json:"downloadForwardVideoUrl,omitempty"`
	// URL for downloading the inward facing video
	DownloadInwardVideoUrl *string `json:"downloadInwardVideoUrl,omitempty"`
	// URL for downloading the tracked inward facing video
	DownloadTrackedInwardVideoUrl *string `json:"downloadTrackedInwardVideoUrl,omitempty"`
	// Type of the harsh event. One of: [Crash, Harsh Acceleration, Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake, Harsh Event]
	HarshEventType string `json:"harshEventType"`
	// URL of the associated incident report page
	IncidentReportUrl string `json:"incidentReportUrl"`
	// Whether the driver was deemed distracted during this harsh event
	IsDistracted *bool                                `json:"isDistracted,omitempty"`
	Location     *V1VehicleHarshEventResponseLocation `json:"location,omitempty"`
}

// GetDownloadForwardVideoUrl returns the DownloadForwardVideoUrl field value if set, zero value otherwise.
func (o *V1VehicleHarshEventResponse) GetDownloadForwardVideoUrl() string {
	if o == nil || o.DownloadForwardVideoUrl == nil {
		var ret string
		return ret
	}
	return *o.DownloadForwardVideoUrl
}

// GetDownloadForwardVideoUrlOk returns a tuple with the DownloadForwardVideoUrl field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleHarshEventResponse) GetDownloadForwardVideoUrlOk() (string, bool) {
	if o == nil || o.DownloadForwardVideoUrl == nil {
		var ret string
		return ret, false
	}
	return *o.DownloadForwardVideoUrl, true
}

// HasDownloadForwardVideoUrl returns a boolean if a field has been set.
func (o *V1VehicleHarshEventResponse) HasDownloadForwardVideoUrl() bool {
	if o != nil && o.DownloadForwardVideoUrl != nil {
		return true
	}

	return false
}

// SetDownloadForwardVideoUrl gets a reference to the given string and assigns it to the DownloadForwardVideoUrl field.
func (o *V1VehicleHarshEventResponse) SetDownloadForwardVideoUrl(v string) {
	o.DownloadForwardVideoUrl = &v
}

// GetDownloadInwardVideoUrl returns the DownloadInwardVideoUrl field value if set, zero value otherwise.
func (o *V1VehicleHarshEventResponse) GetDownloadInwardVideoUrl() string {
	if o == nil || o.DownloadInwardVideoUrl == nil {
		var ret string
		return ret
	}
	return *o.DownloadInwardVideoUrl
}

// GetDownloadInwardVideoUrlOk returns a tuple with the DownloadInwardVideoUrl field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleHarshEventResponse) GetDownloadInwardVideoUrlOk() (string, bool) {
	if o == nil || o.DownloadInwardVideoUrl == nil {
		var ret string
		return ret, false
	}
	return *o.DownloadInwardVideoUrl, true
}

// HasDownloadInwardVideoUrl returns a boolean if a field has been set.
func (o *V1VehicleHarshEventResponse) HasDownloadInwardVideoUrl() bool {
	if o != nil && o.DownloadInwardVideoUrl != nil {
		return true
	}

	return false
}

// SetDownloadInwardVideoUrl gets a reference to the given string and assigns it to the DownloadInwardVideoUrl field.
func (o *V1VehicleHarshEventResponse) SetDownloadInwardVideoUrl(v string) {
	o.DownloadInwardVideoUrl = &v
}

// GetDownloadTrackedInwardVideoUrl returns the DownloadTrackedInwardVideoUrl field value if set, zero value otherwise.
func (o *V1VehicleHarshEventResponse) GetDownloadTrackedInwardVideoUrl() string {
	if o == nil || o.DownloadTrackedInwardVideoUrl == nil {
		var ret string
		return ret
	}
	return *o.DownloadTrackedInwardVideoUrl
}

// GetDownloadTrackedInwardVideoUrlOk returns a tuple with the DownloadTrackedInwardVideoUrl field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleHarshEventResponse) GetDownloadTrackedInwardVideoUrlOk() (string, bool) {
	if o == nil || o.DownloadTrackedInwardVideoUrl == nil {
		var ret string
		return ret, false
	}
	return *o.DownloadTrackedInwardVideoUrl, true
}

// HasDownloadTrackedInwardVideoUrl returns a boolean if a field has been set.
func (o *V1VehicleHarshEventResponse) HasDownloadTrackedInwardVideoUrl() bool {
	if o != nil && o.DownloadTrackedInwardVideoUrl != nil {
		return true
	}

	return false
}

// SetDownloadTrackedInwardVideoUrl gets a reference to the given string and assigns it to the DownloadTrackedInwardVideoUrl field.
func (o *V1VehicleHarshEventResponse) SetDownloadTrackedInwardVideoUrl(v string) {
	o.DownloadTrackedInwardVideoUrl = &v
}

// GetHarshEventType returns the HarshEventType field value
func (o *V1VehicleHarshEventResponse) GetHarshEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HarshEventType
}

// SetHarshEventType sets field value
func (o *V1VehicleHarshEventResponse) SetHarshEventType(v string) {
	o.HarshEventType = v
}

// GetIncidentReportUrl returns the IncidentReportUrl field value
func (o *V1VehicleHarshEventResponse) GetIncidentReportUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IncidentReportUrl
}

// SetIncidentReportUrl sets field value
func (o *V1VehicleHarshEventResponse) SetIncidentReportUrl(v string) {
	o.IncidentReportUrl = v
}

// GetIsDistracted returns the IsDistracted field value if set, zero value otherwise.
func (o *V1VehicleHarshEventResponse) GetIsDistracted() bool {
	if o == nil || o.IsDistracted == nil {
		var ret bool
		return ret
	}
	return *o.IsDistracted
}

// GetIsDistractedOk returns a tuple with the IsDistracted field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleHarshEventResponse) GetIsDistractedOk() (bool, bool) {
	if o == nil || o.IsDistracted == nil {
		var ret bool
		return ret, false
	}
	return *o.IsDistracted, true
}

// HasIsDistracted returns a boolean if a field has been set.
func (o *V1VehicleHarshEventResponse) HasIsDistracted() bool {
	if o != nil && o.IsDistracted != nil {
		return true
	}

	return false
}

// SetIsDistracted gets a reference to the given bool and assigns it to the IsDistracted field.
func (o *V1VehicleHarshEventResponse) SetIsDistracted(v bool) {
	o.IsDistracted = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *V1VehicleHarshEventResponse) GetLocation() V1VehicleHarshEventResponseLocation {
	if o == nil || o.Location == nil {
		var ret V1VehicleHarshEventResponseLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1VehicleHarshEventResponse) GetLocationOk() (V1VehicleHarshEventResponseLocation, bool) {
	if o == nil || o.Location == nil {
		var ret V1VehicleHarshEventResponseLocation
		return ret, false
	}
	return *o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *V1VehicleHarshEventResponse) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given V1VehicleHarshEventResponseLocation and assigns it to the Location field.
func (o *V1VehicleHarshEventResponse) SetLocation(v V1VehicleHarshEventResponseLocation) {
	o.Location = &v
}

type NullableV1VehicleHarshEventResponse struct {
	Value        V1VehicleHarshEventResponse
	ExplicitNull bool
}

func (v NullableV1VehicleHarshEventResponse) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1VehicleHarshEventResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
