/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// Route A single route. At most one of assignedDriver and assignedVehicle will be provided based on the initial route assignment, and the returned driver and vehicle objects are associated with either the assignedVehicle or assignedDriver, respectively.
type Route struct {
	// Actual end time, if it exists, for the route in RFC 3339 format.
	ActualEndTime *string `json:"actualEndTime,omitempty"`
	// Actual start time, if it exists, for the route in RFC 3339 format.
	ActualStartTime *string              `json:"actualStartTime,omitempty"`
	AssignedDriver  *DriverTinyResponse  `json:"assignedDriver,omitempty"`
	AssignedVehicle *VehicleTinyResponse `json:"assignedVehicle,omitempty"`
	Driver          *DriverTinyResponse  `json:"driver,omitempty"`
	// Unique identifier for the route.
	Id *string `json:"id,omitempty"`
	// Name of the route.
	Name *string `json:"name,omitempty"`
	// Route notes.
	Notes *string `json:"notes,omitempty"`
	// The odometer reading of the assignedVehicle or associated vehicle object at the end of the route.
	OdometerEndMeters *float32 `json:"odometerEndMeters,omitempty"`
	// The odometer reading of the assignedVehicle or associated vehicle object at the start of the route.
	OdometerStartMeters *float32 `json:"odometerStartMeters,omitempty"`
	// Total planned distance in meters for the route.
	PlannedMeters *float32 `json:"plannedMeters,omitempty"`
	// The route stops in the route.
	RouteStops *[]RouteStop `json:"routeStops,omitempty"`
	// Scheduled end time for the route in RFC 3339 format.
	ScheduledEndTime *string `json:"scheduledEndTime,omitempty"`
	// Scheduled start time for the route in RFC 3339 format.
	ScheduledStartTime *string        `json:"scheduledStartTime,omitempty"`
	StartLocation      *RouteLocation `json:"startLocation,omitempty"`
	// The current state of the route.
	State   *string              `json:"state,omitempty"`
	Vehicle *VehicleTinyResponse `json:"vehicle,omitempty"`
}

// GetActualEndTime returns the ActualEndTime field value if set, zero value otherwise.
func (o *Route) GetActualEndTime() string {
	if o == nil || o.ActualEndTime == nil {
		var ret string
		return ret
	}
	return *o.ActualEndTime
}

// GetActualEndTimeOk returns a tuple with the ActualEndTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetActualEndTimeOk() (string, bool) {
	if o == nil || o.ActualEndTime == nil {
		var ret string
		return ret, false
	}
	return *o.ActualEndTime, true
}

// HasActualEndTime returns a boolean if a field has been set.
func (o *Route) HasActualEndTime() bool {
	if o != nil && o.ActualEndTime != nil {
		return true
	}

	return false
}

// SetActualEndTime gets a reference to the given string and assigns it to the ActualEndTime field.
func (o *Route) SetActualEndTime(v string) {
	o.ActualEndTime = &v
}

// GetActualStartTime returns the ActualStartTime field value if set, zero value otherwise.
func (o *Route) GetActualStartTime() string {
	if o == nil || o.ActualStartTime == nil {
		var ret string
		return ret
	}
	return *o.ActualStartTime
}

// GetActualStartTimeOk returns a tuple with the ActualStartTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetActualStartTimeOk() (string, bool) {
	if o == nil || o.ActualStartTime == nil {
		var ret string
		return ret, false
	}
	return *o.ActualStartTime, true
}

// HasActualStartTime returns a boolean if a field has been set.
func (o *Route) HasActualStartTime() bool {
	if o != nil && o.ActualStartTime != nil {
		return true
	}

	return false
}

// SetActualStartTime gets a reference to the given string and assigns it to the ActualStartTime field.
func (o *Route) SetActualStartTime(v string) {
	o.ActualStartTime = &v
}

// GetAssignedDriver returns the AssignedDriver field value if set, zero value otherwise.
func (o *Route) GetAssignedDriver() DriverTinyResponse {
	if o == nil || o.AssignedDriver == nil {
		var ret DriverTinyResponse
		return ret
	}
	return *o.AssignedDriver
}

// GetAssignedDriverOk returns a tuple with the AssignedDriver field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetAssignedDriverOk() (DriverTinyResponse, bool) {
	if o == nil || o.AssignedDriver == nil {
		var ret DriverTinyResponse
		return ret, false
	}
	return *o.AssignedDriver, true
}

// HasAssignedDriver returns a boolean if a field has been set.
func (o *Route) HasAssignedDriver() bool {
	if o != nil && o.AssignedDriver != nil {
		return true
	}

	return false
}

// SetAssignedDriver gets a reference to the given DriverTinyResponse and assigns it to the AssignedDriver field.
func (o *Route) SetAssignedDriver(v DriverTinyResponse) {
	o.AssignedDriver = &v
}

// GetAssignedVehicle returns the AssignedVehicle field value if set, zero value otherwise.
func (o *Route) GetAssignedVehicle() VehicleTinyResponse {
	if o == nil || o.AssignedVehicle == nil {
		var ret VehicleTinyResponse
		return ret
	}
	return *o.AssignedVehicle
}

// GetAssignedVehicleOk returns a tuple with the AssignedVehicle field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetAssignedVehicleOk() (VehicleTinyResponse, bool) {
	if o == nil || o.AssignedVehicle == nil {
		var ret VehicleTinyResponse
		return ret, false
	}
	return *o.AssignedVehicle, true
}

// HasAssignedVehicle returns a boolean if a field has been set.
func (o *Route) HasAssignedVehicle() bool {
	if o != nil && o.AssignedVehicle != nil {
		return true
	}

	return false
}

// SetAssignedVehicle gets a reference to the given VehicleTinyResponse and assigns it to the AssignedVehicle field.
func (o *Route) SetAssignedVehicle(v VehicleTinyResponse) {
	o.AssignedVehicle = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *Route) GetDriver() DriverTinyResponse {
	if o == nil || o.Driver == nil {
		var ret DriverTinyResponse
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetDriverOk() (DriverTinyResponse, bool) {
	if o == nil || o.Driver == nil {
		var ret DriverTinyResponse
		return ret, false
	}
	return *o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *Route) HasDriver() bool {
	if o != nil && o.Driver != nil {
		return true
	}

	return false
}

// SetDriver gets a reference to the given DriverTinyResponse and assigns it to the Driver field.
func (o *Route) SetDriver(v DriverTinyResponse) {
	o.Driver = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Route) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Route) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Route) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Route) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Route) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Route) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Route) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetNotesOk() (string, bool) {
	if o == nil || o.Notes == nil {
		var ret string
		return ret, false
	}
	return *o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Route) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Route) SetNotes(v string) {
	o.Notes = &v
}

// GetOdometerEndMeters returns the OdometerEndMeters field value if set, zero value otherwise.
func (o *Route) GetOdometerEndMeters() float32 {
	if o == nil || o.OdometerEndMeters == nil {
		var ret float32
		return ret
	}
	return *o.OdometerEndMeters
}

// GetOdometerEndMetersOk returns a tuple with the OdometerEndMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetOdometerEndMetersOk() (float32, bool) {
	if o == nil || o.OdometerEndMeters == nil {
		var ret float32
		return ret, false
	}
	return *o.OdometerEndMeters, true
}

// HasOdometerEndMeters returns a boolean if a field has been set.
func (o *Route) HasOdometerEndMeters() bool {
	if o != nil && o.OdometerEndMeters != nil {
		return true
	}

	return false
}

// SetOdometerEndMeters gets a reference to the given float32 and assigns it to the OdometerEndMeters field.
func (o *Route) SetOdometerEndMeters(v float32) {
	o.OdometerEndMeters = &v
}

// GetOdometerStartMeters returns the OdometerStartMeters field value if set, zero value otherwise.
func (o *Route) GetOdometerStartMeters() float32 {
	if o == nil || o.OdometerStartMeters == nil {
		var ret float32
		return ret
	}
	return *o.OdometerStartMeters
}

// GetOdometerStartMetersOk returns a tuple with the OdometerStartMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetOdometerStartMetersOk() (float32, bool) {
	if o == nil || o.OdometerStartMeters == nil {
		var ret float32
		return ret, false
	}
	return *o.OdometerStartMeters, true
}

// HasOdometerStartMeters returns a boolean if a field has been set.
func (o *Route) HasOdometerStartMeters() bool {
	if o != nil && o.OdometerStartMeters != nil {
		return true
	}

	return false
}

// SetOdometerStartMeters gets a reference to the given float32 and assigns it to the OdometerStartMeters field.
func (o *Route) SetOdometerStartMeters(v float32) {
	o.OdometerStartMeters = &v
}

// GetPlannedMeters returns the PlannedMeters field value if set, zero value otherwise.
func (o *Route) GetPlannedMeters() float32 {
	if o == nil || o.PlannedMeters == nil {
		var ret float32
		return ret
	}
	return *o.PlannedMeters
}

// GetPlannedMetersOk returns a tuple with the PlannedMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetPlannedMetersOk() (float32, bool) {
	if o == nil || o.PlannedMeters == nil {
		var ret float32
		return ret, false
	}
	return *o.PlannedMeters, true
}

// HasPlannedMeters returns a boolean if a field has been set.
func (o *Route) HasPlannedMeters() bool {
	if o != nil && o.PlannedMeters != nil {
		return true
	}

	return false
}

// SetPlannedMeters gets a reference to the given float32 and assigns it to the PlannedMeters field.
func (o *Route) SetPlannedMeters(v float32) {
	o.PlannedMeters = &v
}

// GetRouteStops returns the RouteStops field value if set, zero value otherwise.
func (o *Route) GetRouteStops() []RouteStop {
	if o == nil || o.RouteStops == nil {
		var ret []RouteStop
		return ret
	}
	return *o.RouteStops
}

// GetRouteStopsOk returns a tuple with the RouteStops field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetRouteStopsOk() ([]RouteStop, bool) {
	if o == nil || o.RouteStops == nil {
		var ret []RouteStop
		return ret, false
	}
	return *o.RouteStops, true
}

// HasRouteStops returns a boolean if a field has been set.
func (o *Route) HasRouteStops() bool {
	if o != nil && o.RouteStops != nil {
		return true
	}

	return false
}

// SetRouteStops gets a reference to the given []RouteStop and assigns it to the RouteStops field.
func (o *Route) SetRouteStops(v []RouteStop) {
	o.RouteStops = &v
}

// GetScheduledEndTime returns the ScheduledEndTime field value if set, zero value otherwise.
func (o *Route) GetScheduledEndTime() string {
	if o == nil || o.ScheduledEndTime == nil {
		var ret string
		return ret
	}
	return *o.ScheduledEndTime
}

// GetScheduledEndTimeOk returns a tuple with the ScheduledEndTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetScheduledEndTimeOk() (string, bool) {
	if o == nil || o.ScheduledEndTime == nil {
		var ret string
		return ret, false
	}
	return *o.ScheduledEndTime, true
}

// HasScheduledEndTime returns a boolean if a field has been set.
func (o *Route) HasScheduledEndTime() bool {
	if o != nil && o.ScheduledEndTime != nil {
		return true
	}

	return false
}

// SetScheduledEndTime gets a reference to the given string and assigns it to the ScheduledEndTime field.
func (o *Route) SetScheduledEndTime(v string) {
	o.ScheduledEndTime = &v
}

// GetScheduledStartTime returns the ScheduledStartTime field value if set, zero value otherwise.
func (o *Route) GetScheduledStartTime() string {
	if o == nil || o.ScheduledStartTime == nil {
		var ret string
		return ret
	}
	return *o.ScheduledStartTime
}

// GetScheduledStartTimeOk returns a tuple with the ScheduledStartTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetScheduledStartTimeOk() (string, bool) {
	if o == nil || o.ScheduledStartTime == nil {
		var ret string
		return ret, false
	}
	return *o.ScheduledStartTime, true
}

// HasScheduledStartTime returns a boolean if a field has been set.
func (o *Route) HasScheduledStartTime() bool {
	if o != nil && o.ScheduledStartTime != nil {
		return true
	}

	return false
}

// SetScheduledStartTime gets a reference to the given string and assigns it to the ScheduledStartTime field.
func (o *Route) SetScheduledStartTime(v string) {
	o.ScheduledStartTime = &v
}

// GetStartLocation returns the StartLocation field value if set, zero value otherwise.
func (o *Route) GetStartLocation() RouteLocation {
	if o == nil || o.StartLocation == nil {
		var ret RouteLocation
		return ret
	}
	return *o.StartLocation
}

// GetStartLocationOk returns a tuple with the StartLocation field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetStartLocationOk() (RouteLocation, bool) {
	if o == nil || o.StartLocation == nil {
		var ret RouteLocation
		return ret, false
	}
	return *o.StartLocation, true
}

// HasStartLocation returns a boolean if a field has been set.
func (o *Route) HasStartLocation() bool {
	if o != nil && o.StartLocation != nil {
		return true
	}

	return false
}

// SetStartLocation gets a reference to the given RouteLocation and assigns it to the StartLocation field.
func (o *Route) SetStartLocation(v RouteLocation) {
	o.StartLocation = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Route) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetStateOk() (string, bool) {
	if o == nil || o.State == nil {
		var ret string
		return ret, false
	}
	return *o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Route) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Route) SetState(v string) {
	o.State = &v
}

// GetVehicle returns the Vehicle field value if set, zero value otherwise.
func (o *Route) GetVehicle() VehicleTinyResponse {
	if o == nil || o.Vehicle == nil {
		var ret VehicleTinyResponse
		return ret
	}
	return *o.Vehicle
}

// GetVehicleOk returns a tuple with the Vehicle field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetVehicleOk() (VehicleTinyResponse, bool) {
	if o == nil || o.Vehicle == nil {
		var ret VehicleTinyResponse
		return ret, false
	}
	return *o.Vehicle, true
}

// HasVehicle returns a boolean if a field has been set.
func (o *Route) HasVehicle() bool {
	if o != nil && o.Vehicle != nil {
		return true
	}

	return false
}

// SetVehicle gets a reference to the given VehicleTinyResponse and assigns it to the Vehicle field.
func (o *Route) SetVehicle(v VehicleTinyResponse) {
	o.Vehicle = &v
}

type NullableRoute struct {
	Value        Route
	ExplicitNull bool
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
