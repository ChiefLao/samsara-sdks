/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// InlineObject4 struct for InlineObject4
type InlineObject4 struct {
	// Only type 'mechanic' is currently accepted.
	InspectionType string `json:"inspectionType"`
	// Any notes from the mechanic.
	MechanicNotes *string `json:"mechanicNotes,omitempty"`
	// The current odometer of the vehicle.
	OdometerMiles *int32 `json:"odometerMiles,omitempty"`
	// Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
	PreviousDefectsCorrected *bool `json:"previousDefectsCorrected,omitempty"`
	// Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
	PreviousDefectsIgnored *bool `json:"previousDefectsIgnored,omitempty"`
	// List of defect IDs to resolve.  The defects must be associated with the provided vehicle or trailer.
	ResolvedDefectIds *[]int64 `json:"resolvedDefectIds,omitempty"`
	// Whether or not this vehicle or trailer is safe to drive.
	Safe string `json:"safe"`
	// Id of trailer being inspected. Either vehicleId or trailerId must be provided.
	TrailerId *int32 `json:"trailerId,omitempty"`
	// The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.
	UserEmail string `json:"userEmail"`
	// Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
	VehicleId *int32 `json:"vehicleId,omitempty"`
}

// GetInspectionType returns the InspectionType field value
func (o *InlineObject4) GetInspectionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InspectionType
}

// SetInspectionType sets field value
func (o *InlineObject4) SetInspectionType(v string) {
	o.InspectionType = v
}

// GetMechanicNotes returns the MechanicNotes field value if set, zero value otherwise.
func (o *InlineObject4) GetMechanicNotes() string {
	if o == nil || o.MechanicNotes == nil {
		var ret string
		return ret
	}
	return *o.MechanicNotes
}

// GetMechanicNotesOk returns a tuple with the MechanicNotes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetMechanicNotesOk() (string, bool) {
	if o == nil || o.MechanicNotes == nil {
		var ret string
		return ret, false
	}
	return *o.MechanicNotes, true
}

// HasMechanicNotes returns a boolean if a field has been set.
func (o *InlineObject4) HasMechanicNotes() bool {
	if o != nil && o.MechanicNotes != nil {
		return true
	}

	return false
}

// SetMechanicNotes gets a reference to the given string and assigns it to the MechanicNotes field.
func (o *InlineObject4) SetMechanicNotes(v string) {
	o.MechanicNotes = &v
}

// GetOdometerMiles returns the OdometerMiles field value if set, zero value otherwise.
func (o *InlineObject4) GetOdometerMiles() int32 {
	if o == nil || o.OdometerMiles == nil {
		var ret int32
		return ret
	}
	return *o.OdometerMiles
}

// GetOdometerMilesOk returns a tuple with the OdometerMiles field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetOdometerMilesOk() (int32, bool) {
	if o == nil || o.OdometerMiles == nil {
		var ret int32
		return ret, false
	}
	return *o.OdometerMiles, true
}

// HasOdometerMiles returns a boolean if a field has been set.
func (o *InlineObject4) HasOdometerMiles() bool {
	if o != nil && o.OdometerMiles != nil {
		return true
	}

	return false
}

// SetOdometerMiles gets a reference to the given int32 and assigns it to the OdometerMiles field.
func (o *InlineObject4) SetOdometerMiles(v int32) {
	o.OdometerMiles = &v
}

// GetPreviousDefectsCorrected returns the PreviousDefectsCorrected field value if set, zero value otherwise.
func (o *InlineObject4) GetPreviousDefectsCorrected() bool {
	if o == nil || o.PreviousDefectsCorrected == nil {
		var ret bool
		return ret
	}
	return *o.PreviousDefectsCorrected
}

// GetPreviousDefectsCorrectedOk returns a tuple with the PreviousDefectsCorrected field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetPreviousDefectsCorrectedOk() (bool, bool) {
	if o == nil || o.PreviousDefectsCorrected == nil {
		var ret bool
		return ret, false
	}
	return *o.PreviousDefectsCorrected, true
}

// HasPreviousDefectsCorrected returns a boolean if a field has been set.
func (o *InlineObject4) HasPreviousDefectsCorrected() bool {
	if o != nil && o.PreviousDefectsCorrected != nil {
		return true
	}

	return false
}

// SetPreviousDefectsCorrected gets a reference to the given bool and assigns it to the PreviousDefectsCorrected field.
func (o *InlineObject4) SetPreviousDefectsCorrected(v bool) {
	o.PreviousDefectsCorrected = &v
}

// GetPreviousDefectsIgnored returns the PreviousDefectsIgnored field value if set, zero value otherwise.
func (o *InlineObject4) GetPreviousDefectsIgnored() bool {
	if o == nil || o.PreviousDefectsIgnored == nil {
		var ret bool
		return ret
	}
	return *o.PreviousDefectsIgnored
}

// GetPreviousDefectsIgnoredOk returns a tuple with the PreviousDefectsIgnored field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetPreviousDefectsIgnoredOk() (bool, bool) {
	if o == nil || o.PreviousDefectsIgnored == nil {
		var ret bool
		return ret, false
	}
	return *o.PreviousDefectsIgnored, true
}

// HasPreviousDefectsIgnored returns a boolean if a field has been set.
func (o *InlineObject4) HasPreviousDefectsIgnored() bool {
	if o != nil && o.PreviousDefectsIgnored != nil {
		return true
	}

	return false
}

// SetPreviousDefectsIgnored gets a reference to the given bool and assigns it to the PreviousDefectsIgnored field.
func (o *InlineObject4) SetPreviousDefectsIgnored(v bool) {
	o.PreviousDefectsIgnored = &v
}

// GetResolvedDefectIds returns the ResolvedDefectIds field value if set, zero value otherwise.
func (o *InlineObject4) GetResolvedDefectIds() []int64 {
	if o == nil || o.ResolvedDefectIds == nil {
		var ret []int64
		return ret
	}
	return *o.ResolvedDefectIds
}

// GetResolvedDefectIdsOk returns a tuple with the ResolvedDefectIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetResolvedDefectIdsOk() ([]int64, bool) {
	if o == nil || o.ResolvedDefectIds == nil {
		var ret []int64
		return ret, false
	}
	return *o.ResolvedDefectIds, true
}

// HasResolvedDefectIds returns a boolean if a field has been set.
func (o *InlineObject4) HasResolvedDefectIds() bool {
	if o != nil && o.ResolvedDefectIds != nil {
		return true
	}

	return false
}

// SetResolvedDefectIds gets a reference to the given []int64 and assigns it to the ResolvedDefectIds field.
func (o *InlineObject4) SetResolvedDefectIds(v []int64) {
	o.ResolvedDefectIds = &v
}

// GetSafe returns the Safe field value
func (o *InlineObject4) GetSafe() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Safe
}

// SetSafe sets field value
func (o *InlineObject4) SetSafe(v string) {
	o.Safe = v
}

// GetTrailerId returns the TrailerId field value if set, zero value otherwise.
func (o *InlineObject4) GetTrailerId() int32 {
	if o == nil || o.TrailerId == nil {
		var ret int32
		return ret
	}
	return *o.TrailerId
}

// GetTrailerIdOk returns a tuple with the TrailerId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetTrailerIdOk() (int32, bool) {
	if o == nil || o.TrailerId == nil {
		var ret int32
		return ret, false
	}
	return *o.TrailerId, true
}

// HasTrailerId returns a boolean if a field has been set.
func (o *InlineObject4) HasTrailerId() bool {
	if o != nil && o.TrailerId != nil {
		return true
	}

	return false
}

// SetTrailerId gets a reference to the given int32 and assigns it to the TrailerId field.
func (o *InlineObject4) SetTrailerId(v int32) {
	o.TrailerId = &v
}

// GetUserEmail returns the UserEmail field value
func (o *InlineObject4) GetUserEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEmail
}

// SetUserEmail sets field value
func (o *InlineObject4) SetUserEmail(v string) {
	o.UserEmail = v
}

// GetVehicleId returns the VehicleId field value if set, zero value otherwise.
func (o *InlineObject4) GetVehicleId() int32 {
	if o == nil || o.VehicleId == nil {
		var ret int32
		return ret
	}
	return *o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetVehicleIdOk() (int32, bool) {
	if o == nil || o.VehicleId == nil {
		var ret int32
		return ret, false
	}
	return *o.VehicleId, true
}

// HasVehicleId returns a boolean if a field has been set.
func (o *InlineObject4) HasVehicleId() bool {
	if o != nil && o.VehicleId != nil {
		return true
	}

	return false
}

// SetVehicleId gets a reference to the given int32 and assigns it to the VehicleId field.
func (o *InlineObject4) SetVehicleId(v int32) {
	o.VehicleId = &v
}

type NullableInlineObject4 struct {
	Value        InlineObject4
	ExplicitNull bool
}

func (v NullableInlineObject4) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableInlineObject4) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
