/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// CreateDvirRequest DVIR creation body
type CreateDvirRequest struct {
	// Samsara user ID of the mechanic creating the DVIR.
	AuthorId string `json:"authorId"`
	// The license plate of this vehicle.
	LicensePlate *string `json:"licensePlate,omitempty"`
	// Optional string if your jurisdiction requires a location of the DVIR.
	Location *string `json:"location,omitempty"`
	// The mechanics notes on the DVIR.
	MechanicNotes *string `json:"mechanicNotes,omitempty"`
	// The odometer reading in meters.
	OdometerMeters *int32 `json:"odometerMeters,omitempty"`
	// Array of ids for defects being resolved with this DVIR.
	ResolvedDefectIds *[]string `json:"resolvedDefectIds,omitempty"`
	// Whether or not this vehicle or trailer is safe to drive.
	SafetyStatus string `json:"safetyStatus"`
	// Id of trailer being inspected. Either vehicleId or trailerId must be provided.
	TrailerId *string `json:"trailerId,omitempty"`
	// Only type 'mechanic' is currently accepted.
	Type string `json:"type"`
	// Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
	VehicleId *string `json:"vehicleId,omitempty"`
}

// GetAuthorId returns the AuthorId field value
func (o *CreateDvirRequest) GetAuthorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorId
}

// SetAuthorId sets field value
func (o *CreateDvirRequest) SetAuthorId(v string) {
	o.AuthorId = v
}

// GetLicensePlate returns the LicensePlate field value if set, zero value otherwise.
func (o *CreateDvirRequest) GetLicensePlate() string {
	if o == nil || o.LicensePlate == nil {
		var ret string
		return ret
	}
	return *o.LicensePlate
}

// GetLicensePlateOk returns a tuple with the LicensePlate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateDvirRequest) GetLicensePlateOk() (string, bool) {
	if o == nil || o.LicensePlate == nil {
		var ret string
		return ret, false
	}
	return *o.LicensePlate, true
}

// HasLicensePlate returns a boolean if a field has been set.
func (o *CreateDvirRequest) HasLicensePlate() bool {
	if o != nil && o.LicensePlate != nil {
		return true
	}

	return false
}

// SetLicensePlate gets a reference to the given string and assigns it to the LicensePlate field.
func (o *CreateDvirRequest) SetLicensePlate(v string) {
	o.LicensePlate = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CreateDvirRequest) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateDvirRequest) GetLocationOk() (string, bool) {
	if o == nil || o.Location == nil {
		var ret string
		return ret, false
	}
	return *o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CreateDvirRequest) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *CreateDvirRequest) SetLocation(v string) {
	o.Location = &v
}

// GetMechanicNotes returns the MechanicNotes field value if set, zero value otherwise.
func (o *CreateDvirRequest) GetMechanicNotes() string {
	if o == nil || o.MechanicNotes == nil {
		var ret string
		return ret
	}
	return *o.MechanicNotes
}

// GetMechanicNotesOk returns a tuple with the MechanicNotes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateDvirRequest) GetMechanicNotesOk() (string, bool) {
	if o == nil || o.MechanicNotes == nil {
		var ret string
		return ret, false
	}
	return *o.MechanicNotes, true
}

// HasMechanicNotes returns a boolean if a field has been set.
func (o *CreateDvirRequest) HasMechanicNotes() bool {
	if o != nil && o.MechanicNotes != nil {
		return true
	}

	return false
}

// SetMechanicNotes gets a reference to the given string and assigns it to the MechanicNotes field.
func (o *CreateDvirRequest) SetMechanicNotes(v string) {
	o.MechanicNotes = &v
}

// GetOdometerMeters returns the OdometerMeters field value if set, zero value otherwise.
func (o *CreateDvirRequest) GetOdometerMeters() int32 {
	if o == nil || o.OdometerMeters == nil {
		var ret int32
		return ret
	}
	return *o.OdometerMeters
}

// GetOdometerMetersOk returns a tuple with the OdometerMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateDvirRequest) GetOdometerMetersOk() (int32, bool) {
	if o == nil || o.OdometerMeters == nil {
		var ret int32
		return ret, false
	}
	return *o.OdometerMeters, true
}

// HasOdometerMeters returns a boolean if a field has been set.
func (o *CreateDvirRequest) HasOdometerMeters() bool {
	if o != nil && o.OdometerMeters != nil {
		return true
	}

	return false
}

// SetOdometerMeters gets a reference to the given int32 and assigns it to the OdometerMeters field.
func (o *CreateDvirRequest) SetOdometerMeters(v int32) {
	o.OdometerMeters = &v
}

// GetResolvedDefectIds returns the ResolvedDefectIds field value if set, zero value otherwise.
func (o *CreateDvirRequest) GetResolvedDefectIds() []string {
	if o == nil || o.ResolvedDefectIds == nil {
		var ret []string
		return ret
	}
	return *o.ResolvedDefectIds
}

// GetResolvedDefectIdsOk returns a tuple with the ResolvedDefectIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateDvirRequest) GetResolvedDefectIdsOk() ([]string, bool) {
	if o == nil || o.ResolvedDefectIds == nil {
		var ret []string
		return ret, false
	}
	return *o.ResolvedDefectIds, true
}

// HasResolvedDefectIds returns a boolean if a field has been set.
func (o *CreateDvirRequest) HasResolvedDefectIds() bool {
	if o != nil && o.ResolvedDefectIds != nil {
		return true
	}

	return false
}

// SetResolvedDefectIds gets a reference to the given []string and assigns it to the ResolvedDefectIds field.
func (o *CreateDvirRequest) SetResolvedDefectIds(v []string) {
	o.ResolvedDefectIds = &v
}

// GetSafetyStatus returns the SafetyStatus field value
func (o *CreateDvirRequest) GetSafetyStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SafetyStatus
}

// SetSafetyStatus sets field value
func (o *CreateDvirRequest) SetSafetyStatus(v string) {
	o.SafetyStatus = v
}

// GetTrailerId returns the TrailerId field value if set, zero value otherwise.
func (o *CreateDvirRequest) GetTrailerId() string {
	if o == nil || o.TrailerId == nil {
		var ret string
		return ret
	}
	return *o.TrailerId
}

// GetTrailerIdOk returns a tuple with the TrailerId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateDvirRequest) GetTrailerIdOk() (string, bool) {
	if o == nil || o.TrailerId == nil {
		var ret string
		return ret, false
	}
	return *o.TrailerId, true
}

// HasTrailerId returns a boolean if a field has been set.
func (o *CreateDvirRequest) HasTrailerId() bool {
	if o != nil && o.TrailerId != nil {
		return true
	}

	return false
}

// SetTrailerId gets a reference to the given string and assigns it to the TrailerId field.
func (o *CreateDvirRequest) SetTrailerId(v string) {
	o.TrailerId = &v
}

// GetType returns the Type field value
func (o *CreateDvirRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *CreateDvirRequest) SetType(v string) {
	o.Type = v
}

// GetVehicleId returns the VehicleId field value if set, zero value otherwise.
func (o *CreateDvirRequest) GetVehicleId() string {
	if o == nil || o.VehicleId == nil {
		var ret string
		return ret
	}
	return *o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateDvirRequest) GetVehicleIdOk() (string, bool) {
	if o == nil || o.VehicleId == nil {
		var ret string
		return ret, false
	}
	return *o.VehicleId, true
}

// HasVehicleId returns a boolean if a field has been set.
func (o *CreateDvirRequest) HasVehicleId() bool {
	if o != nil && o.VehicleId != nil {
		return true
	}

	return false
}

// SetVehicleId gets a reference to the given string and assigns it to the VehicleId field.
func (o *CreateDvirRequest) SetVehicleId(v string) {
	o.VehicleId = &v
}

type NullableCreateDvirRequest struct {
	Value        CreateDvirRequest
	ExplicitNull bool
}

func (v NullableCreateDvirRequest) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableCreateDvirRequest) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
