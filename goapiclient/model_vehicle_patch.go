/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// VehiclePatch All the editable portions of the vehicle object.
type VehiclePatch struct {
	// The type of aux input that this vehicle has connected to port 1. Setting to \"none\" will remove the configured aux input.
	AuxInputType1 *string `json:"auxInputType1,omitempty"`
	// The type of aux input that this vehicle has connected to port 2. Setting to \"none\" will remove the configured aux input.
	AuxInputType2 *string `json:"auxInputType2,omitempty"`
	// Current engine hours value of the vehicle. This is typically pulled automatically from the vehicle, but can be manually overridden when it's not read automatically.
	EngineHours *int32 `json:"engineHours,omitempty"`
	// User-defined dictionary of external IDs (key-value pairs). Both the keys and the values of the dictionary are of type string and must be alphanumeric. Each organization can have at most 10 unique external ID keys. To delete an external ID, set its value to null or the empty string (`\"\"`). An external ID can be used as a path parameter to retrieve or update that resource.
	ExternalIds *map[string]string `json:"externalIds,omitempty"`
	// Enumeration of the harsh acceleration setting types. This setting influences the accelereation sensitivity from which a harsh event is triggered. If set to `off`, then no acceleration based harsh events are triggered for the vehicle.
	HarshAccelerationSettingType *string `json:"harshAccelerationSettingType,omitempty"`
	// License plate number for the vehicle.
	LicensePlate *string `json:"licensePlate,omitempty"`
	// Name of the vehicle.
	Name *string `json:"name,omitempty"`
	// Notes about a vehicle with a maximum of 255 characters.
	Notes *string `json:"notes,omitempty"`
	// Current odometer value of the vehicle. This is typically pulled automatically from the vehicle, but can be manually overridden when it's not read automatically.
	OdometerMeters *int32 `json:"odometerMeters,omitempty"`
	// ID of driver assigned to the vehicle for static vehicle assignments. An empty string explicitly unsets the assignment. (uncommon).
	StaticAssignedDriverId *NullableString `json:"staticAssignedDriverId,omitempty"`
	// An array of IDs of tags to associate with this vehicle.
	TagIds *[]string `json:"tagIds,omitempty"`
	// A vehicle identification number.
	Vin *string `json:"vin,omitempty"`
}

// GetAuxInputType1 returns the AuxInputType1 field value if set, zero value otherwise.
func (o *VehiclePatch) GetAuxInputType1() string {
	if o == nil || o.AuxInputType1 == nil {
		var ret string
		return ret
	}
	return *o.AuxInputType1
}

// GetAuxInputType1Ok returns a tuple with the AuxInputType1 field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetAuxInputType1Ok() (string, bool) {
	if o == nil || o.AuxInputType1 == nil {
		var ret string
		return ret, false
	}
	return *o.AuxInputType1, true
}

// HasAuxInputType1 returns a boolean if a field has been set.
func (o *VehiclePatch) HasAuxInputType1() bool {
	if o != nil && o.AuxInputType1 != nil {
		return true
	}

	return false
}

// SetAuxInputType1 gets a reference to the given string and assigns it to the AuxInputType1 field.
func (o *VehiclePatch) SetAuxInputType1(v string) {
	o.AuxInputType1 = &v
}

// GetAuxInputType2 returns the AuxInputType2 field value if set, zero value otherwise.
func (o *VehiclePatch) GetAuxInputType2() string {
	if o == nil || o.AuxInputType2 == nil {
		var ret string
		return ret
	}
	return *o.AuxInputType2
}

// GetAuxInputType2Ok returns a tuple with the AuxInputType2 field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetAuxInputType2Ok() (string, bool) {
	if o == nil || o.AuxInputType2 == nil {
		var ret string
		return ret, false
	}
	return *o.AuxInputType2, true
}

// HasAuxInputType2 returns a boolean if a field has been set.
func (o *VehiclePatch) HasAuxInputType2() bool {
	if o != nil && o.AuxInputType2 != nil {
		return true
	}

	return false
}

// SetAuxInputType2 gets a reference to the given string and assigns it to the AuxInputType2 field.
func (o *VehiclePatch) SetAuxInputType2(v string) {
	o.AuxInputType2 = &v
}

// GetEngineHours returns the EngineHours field value if set, zero value otherwise.
func (o *VehiclePatch) GetEngineHours() int32 {
	if o == nil || o.EngineHours == nil {
		var ret int32
		return ret
	}
	return *o.EngineHours
}

// GetEngineHoursOk returns a tuple with the EngineHours field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetEngineHoursOk() (int32, bool) {
	if o == nil || o.EngineHours == nil {
		var ret int32
		return ret, false
	}
	return *o.EngineHours, true
}

// HasEngineHours returns a boolean if a field has been set.
func (o *VehiclePatch) HasEngineHours() bool {
	if o != nil && o.EngineHours != nil {
		return true
	}

	return false
}

// SetEngineHours gets a reference to the given int32 and assigns it to the EngineHours field.
func (o *VehiclePatch) SetEngineHours(v int32) {
	o.EngineHours = &v
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise.
func (o *VehiclePatch) GetExternalIds() map[string]string {
	if o == nil || o.ExternalIds == nil {
		var ret map[string]string
		return ret
	}
	return *o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetExternalIdsOk() (map[string]string, bool) {
	if o == nil || o.ExternalIds == nil {
		var ret map[string]string
		return ret, false
	}
	return *o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *VehiclePatch) HasExternalIds() bool {
	if o != nil && o.ExternalIds != nil {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given map[string]string and assigns it to the ExternalIds field.
func (o *VehiclePatch) SetExternalIds(v map[string]string) {
	o.ExternalIds = &v
}

// GetHarshAccelerationSettingType returns the HarshAccelerationSettingType field value if set, zero value otherwise.
func (o *VehiclePatch) GetHarshAccelerationSettingType() string {
	if o == nil || o.HarshAccelerationSettingType == nil {
		var ret string
		return ret
	}
	return *o.HarshAccelerationSettingType
}

// GetHarshAccelerationSettingTypeOk returns a tuple with the HarshAccelerationSettingType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetHarshAccelerationSettingTypeOk() (string, bool) {
	if o == nil || o.HarshAccelerationSettingType == nil {
		var ret string
		return ret, false
	}
	return *o.HarshAccelerationSettingType, true
}

// HasHarshAccelerationSettingType returns a boolean if a field has been set.
func (o *VehiclePatch) HasHarshAccelerationSettingType() bool {
	if o != nil && o.HarshAccelerationSettingType != nil {
		return true
	}

	return false
}

// SetHarshAccelerationSettingType gets a reference to the given string and assigns it to the HarshAccelerationSettingType field.
func (o *VehiclePatch) SetHarshAccelerationSettingType(v string) {
	o.HarshAccelerationSettingType = &v
}

// GetLicensePlate returns the LicensePlate field value if set, zero value otherwise.
func (o *VehiclePatch) GetLicensePlate() string {
	if o == nil || o.LicensePlate == nil {
		var ret string
		return ret
	}
	return *o.LicensePlate
}

// GetLicensePlateOk returns a tuple with the LicensePlate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetLicensePlateOk() (string, bool) {
	if o == nil || o.LicensePlate == nil {
		var ret string
		return ret, false
	}
	return *o.LicensePlate, true
}

// HasLicensePlate returns a boolean if a field has been set.
func (o *VehiclePatch) HasLicensePlate() bool {
	if o != nil && o.LicensePlate != nil {
		return true
	}

	return false
}

// SetLicensePlate gets a reference to the given string and assigns it to the LicensePlate field.
func (o *VehiclePatch) SetLicensePlate(v string) {
	o.LicensePlate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VehiclePatch) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VehiclePatch) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VehiclePatch) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *VehiclePatch) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetNotesOk() (string, bool) {
	if o == nil || o.Notes == nil {
		var ret string
		return ret, false
	}
	return *o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *VehiclePatch) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *VehiclePatch) SetNotes(v string) {
	o.Notes = &v
}

// GetOdometerMeters returns the OdometerMeters field value if set, zero value otherwise.
func (o *VehiclePatch) GetOdometerMeters() int32 {
	if o == nil || o.OdometerMeters == nil {
		var ret int32
		return ret
	}
	return *o.OdometerMeters
}

// GetOdometerMetersOk returns a tuple with the OdometerMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetOdometerMetersOk() (int32, bool) {
	if o == nil || o.OdometerMeters == nil {
		var ret int32
		return ret, false
	}
	return *o.OdometerMeters, true
}

// HasOdometerMeters returns a boolean if a field has been set.
func (o *VehiclePatch) HasOdometerMeters() bool {
	if o != nil && o.OdometerMeters != nil {
		return true
	}

	return false
}

// SetOdometerMeters gets a reference to the given int32 and assigns it to the OdometerMeters field.
func (o *VehiclePatch) SetOdometerMeters(v int32) {
	o.OdometerMeters = &v
}

// GetStaticAssignedDriverId returns the StaticAssignedDriverId field value if set, zero value otherwise.
func (o *VehiclePatch) GetStaticAssignedDriverId() NullableString {
	if o == nil || o.StaticAssignedDriverId == nil {
		var ret NullableString
		return ret
	}
	return *o.StaticAssignedDriverId
}

// GetStaticAssignedDriverIdOk returns a tuple with the StaticAssignedDriverId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetStaticAssignedDriverIdOk() (NullableString, bool) {
	if o == nil || o.StaticAssignedDriverId == nil {
		var ret NullableString
		return ret, false
	}
	return *o.StaticAssignedDriverId, true
}

// HasStaticAssignedDriverId returns a boolean if a field has been set.
func (o *VehiclePatch) HasStaticAssignedDriverId() bool {
	if o != nil && o.StaticAssignedDriverId != nil {
		return true
	}

	return false
}

// SetStaticAssignedDriverId gets a reference to the given NullableString and assigns it to the StaticAssignedDriverId field.
func (o *VehiclePatch) SetStaticAssignedDriverId(v NullableString) {
	o.StaticAssignedDriverId = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *VehiclePatch) GetTagIds() []string {
	if o == nil || o.TagIds == nil {
		var ret []string
		return ret
	}
	return *o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetTagIdsOk() ([]string, bool) {
	if o == nil || o.TagIds == nil {
		var ret []string
		return ret, false
	}
	return *o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *VehiclePatch) HasTagIds() bool {
	if o != nil && o.TagIds != nil {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []string and assigns it to the TagIds field.
func (o *VehiclePatch) SetTagIds(v []string) {
	o.TagIds = &v
}

// GetVin returns the Vin field value if set, zero value otherwise.
func (o *VehiclePatch) GetVin() string {
	if o == nil || o.Vin == nil {
		var ret string
		return ret
	}
	return *o.Vin
}

// GetVinOk returns a tuple with the Vin field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehiclePatch) GetVinOk() (string, bool) {
	if o == nil || o.Vin == nil {
		var ret string
		return ret, false
	}
	return *o.Vin, true
}

// HasVin returns a boolean if a field has been set.
func (o *VehiclePatch) HasVin() bool {
	if o != nil && o.Vin != nil {
		return true
	}

	return false
}

// SetVin gets a reference to the given string and assigns it to the Vin field.
func (o *VehiclePatch) SetVin(v string) {
	o.Vin = &v
}

type NullableVehiclePatch struct {
	Value        VehiclePatch
	ExplicitNull bool
}

func (v NullableVehiclePatch) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableVehiclePatch) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
