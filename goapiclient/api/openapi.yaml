openapi: 3.0.1
info:
  description: |
    <style type="text/css">
    n {
        padding: 1em;
        width: 100%;
        display: block;
        margin: 28px 0;
    }
    n.info {
        background-color: rgba(0, 51, 160, 0.1);
    }
    n.warning {
        background-color: #fdf6e3;
    }
    i:before {
        margin-right: 6px;
    }
    nh {
        font-size: 1.5rem;
        font-weight: 700;
        line-height: 1.1;
        display: block;
    }
    nb {
        margin-top: 10px;
        padding-left: 22px;
        display: block;
    }
    </style>

    # Overview

    <n class="info">
    <nh>
    <i class="fa fa-info-circle"></i>
    Something new!
    </nh>
    <nb>
    Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br>
    <br>
    Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br>
    <br>
    *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br>
    <br>
    Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)!
    </nb>
    </n>

    Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.

    The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.

    Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.

    If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).

    ## Endpoints

    All our APIs can be accessed through HTTP requests to URLs like:

    ```
    https://api.samsara.com/<endpoint>
    ```

    For EU customers, this URL will be:

    ```
    https://api.eu.samsara.com/<endpoint>
    ```

    <n class="warning">
    <nh>
    <i class="fa fa-exclamation-circle"></i>
    Note
    </nh>
    <nb>
    Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>`
    </nb>
    </n>

    ## Authentication

    To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.

    Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.

    Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:

    ```curl
    Authorization: Bearer {access_token}
    ```

    All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.

    ## Common Patterns

    You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
  title: Samsara API
  version: 2019-12-12
servers:
- url: https://api.samsara.com/
tags:
- description: Address book entries in Samsara can be used to collect useful data
    about operations within a particular address's geofence area. Once an address
    book entry is established, this address can then subsequently be used in order
    to create routes, set geofence arrival alerts, or detect trips that begin or end
    within a given geofence area.
  name: Addresses
- description: 'Assets refer to objects that are tracked with Samsara Asset Gateways.
    These include: trailers, reefers, equipment (construction, etc.), containers,
    and anything else you''d like to track with a Samsara Asset Gateway. This is different
    than Vehicles, which specifically have a Samsara Vehicle Gateway. Depending on
    the asset, different data is available. For all assets, GPS data is available.
    For powered assets like trailers, reefers, and equipment, other engine or on-board
    diagnostic data is available.'
  name: Assets
- description: Contacts are an easy way to manage which users receive alerts (via
    sms or email).
  name: Contacts
- description: The documents feature allows you to manage driver-submitted documents
    from the Samsara app. Submitted documents are grouped by document types, and back
    office users can create new types of documents. For more information on the driver
    workflow around documents, see this [KB article](https://kb.samsara.com/hc/en-us/articles/360006911551-Using-Documents-in-the-Dashboard).
  name: Documents
- description: |-
    Driver objects allow you to track your driver-vehicle assignments, manage driver profiles, and update mobile app credential logins. You can retrieve a list of all drivers, or you can fetch each driver object individually.
    Drivers can be either active or inactive. You should inactivate a driver if you wish to keep the driver's driving history and HOS logs. If your driver is inactive, you can still get information about a driver summary.
  name: Drivers
- description: 'Driver logs containing duty status, certification details, and associated
    vehicles and trailers are available. You can also retrieve summarized total active
    time logs. Signin/Signout logs are also available. Drivers can track hours of
    service via the Samsara Driver mobile app. '
  name: Hours of Service
- description: Access to industrial data.
  name: Industrial
- description: Maintenance refers to both DVIRs and reports on vehicle fault codes.
  name: Maintenance
- description: Fleet Admins can send direct free-form messages to drivers. This will
    send a message to the driver's Samsara driver app, in which you can track whether
    or not a message has been read by a given driver. For sending structured messages,
    see the Documents API.
  name: Messages
- description: Dispatch routes include start and end times and locations and an array
    of jobs along the route. The jobs also include locations and scheduled arrival
    and departure times. As routes are completed, job skip, arrival, and completion
    times are made available in real-time. Routes can be associated with drivers,
    vehicles, and trailers, and jobs can be associated with documents.
  name: Routes
- description: Samsara provides you with more visibility on whether or not your fleets
    are being safe. With the collection of safety endpoints, you can get aggregate
    metrics around the performance of a particular driver or vehicle, as well as detailed
    logs of all the harsh events that take place in an organization.
  name: Safety
- description: The sensor object describes a sensor's attributes and settings within
    Samsara. Samsara has many different types of sensors, such as temperature and
    humidity monitors, door monitors, and more.
  name: Sensors
- description: Tags are a simple way to organize vehicles, drivers, assets, and sensors
    into easily identifiable groups. You can add unlimited entities to each tag, and
    entities can have multiple different tags. You can also use tag hierarchies in
    order to create nested classes, such as parent tag 'Massachusetts' and child tag
    'Boston'. They also allow you to restrict access to data through "tag-level" permissions.
    For more information on tags functionality, see [this Knowledge Base article](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting).
  name: Tags
- description: List trailer assignments over a given time period for all trailers
    or a given one. Trailer assignments include which driver the trailer was assigned
    to and for which time period.
  name: Trailer Assignments
- description: 'Driving activity is segmented into trips (travel between a start and
    a stop). Vehicle movement is broken down into trips along the following lines:
    a trip begins when a previously inactive vehicle achieves a speed of 5mph; the
    trip ends when the vehicle''s speed remains below 5mph for 5 minutes, or when
    a vehicle crosses a state or national boundary. Trips contain start and stop times,
    locations, and addresses. Trips also contain distance and odometer information
    as well as fuel consumption.'
  name: Trips
- description: The users API allows you to manage access to the Samsara dashboard.
    This can be particularly useful if you are looking to set up a connection with
    your identity provider to manage roles and permissions for certain types of users
    within your system.
  name: Users
- description: |-
    A Vehicle object is created when a [Samsara Vehicle Gateway](https://www.samsara.com/products/models/vg34) is first activated.

    When the gateway is activated, a Vehicle object is created with a unique Samsara ID.

    Vehicle objects have static information (`name`, `licensePlate`, etc), and they also generate dynamic time-series data such as locations and diagnostics.

    Vehicle static information is defined by fleet administrators either through the [Samsara dashboard](http://cloud.samsara.com) or through the API.

    - You can get a list of Vehicles and their static information using the [GET /fleet/vehicles](#operation/listVehicles) endpoint.

    - You can get a given vehicle and its static information by its Samsara ID or an [external ID](https://developers.samsara.com/docs/common-structures#section-external-ids) using the [GET /fleet/vehicles/{id}](#operation/getVehicle) endpoint.

    - You can set or update static Vehicle information using the [PATCH /fleet/vehicles/{id}](#operation/updateVehicle) endpoint.

    You can get dynamic Vehicle time-series data in three ways:

    - Get a snapshot of the most recent readings for the time-series.

        - [GET /fleet/vehicles/locations](#operation/getVehicleLocations)

        - [GET /fleet/vehicles/stats](#operation/getVehicleStats)

    - Get a real-time feed of time-series data.

        - [GET /fleet/vehicles/locations/feed](#operation/getVehicleLocationsFeed)

        - [GET /fleet/vehicles/stats/feed](#operation/getVehicleStatsFeed)

    - Get a historical time-range of the time-series data.

        - [GET /fleet/vehicles/locations/history](#operation/getVehicleLocationsHistory)

        - [GET /fleet/vehicles/stats/feed](#operation/getVehicleStatsFeed)
  name: Vehicles
paths:
  /addresses:
    get:
      description: Returns a list of all addresses in an organization
      operationId: listAddresses
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAddressesResponse'
          description: List of all addresses in the organization
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all addresses
      tags:
      - Addresses
    post:
      description: Creates a new address in the organization
      operationId: createAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressRequest'
        description: The address to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
          description: Newly created address object with ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create an address
      tags:
      - Addresses
      x-codegen-request-body-name: address
  /addresses/{id}:
    delete:
      description: Delete a specific address.
      operationId: deleteAddress
      parameters:
      - description: 'ID of the Address. This can either be the Samsara-provided ID
          or an external ID. External IDs are customer-specified key-value pairs created
          in the POST or PATCH requests of this resource. To specify an external ID
          as part of a path parameter, use the following format: `key:value`. For
          example, `crmId:abc123`'
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Empty success body
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Unexpected error.
      summary: Delete an address
      tags:
      - Addresses
    get:
      description: Returns a specific address.
      operationId: getAddress
      parameters:
      - description: 'ID of the Address. This can either be the Samsara-provided ID
          or an external ID. External IDs are customer-specified key-value pairs created
          in the POST or PATCH requests of this resource. To specify an external ID
          as part of a path parameter, use the following format: `key:value`. For
          example, `crmId:abc123`'
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
          description: An Address.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Retrieve an address
      tags:
      - Addresses
    patch:
      description: Update a specific address.
      operationId: updateAddress
      parameters:
      - description: 'ID of the Address. This can either be the Samsara-provided ID
          or an external ID. External IDs are customer-specified key-value pairs created
          in the POST or PATCH requests of this resource. To specify an external ID
          as part of a path parameter, use the following format: `key:value`. For
          example, `crmId:abc123`'
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressRequest'
        description: The address fields to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
          description: Updated address object with ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Update an address
      tags:
      - Addresses
      x-codegen-request-body-name: address
  /contacts:
    get:
      description: Returns a list of all contacts in an organization.
      operationId: listContacts
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContactsResponse'
          description: List of all contacts
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all contacts
      tags:
      - Contacts
    post:
      description: Add a contact to the organization
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactRequest'
        description: The contact create parameters.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
          description: Contact was successfully added.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create a contact
      tags:
      - Contacts
      x-codegen-request-body-name: contact
  /contacts/{id}:
    delete:
      description: Delete the given contact.
      operationId: deleteContact
      parameters:
      - description: Unique identifier for the contact.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Returns an empty success response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Delete a contact
      tags:
      - Contacts
    get:
      description: Get a specific contact's information.
      operationId: getContact
      parameters:
      - description: Unique identifier for the contact.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
          description: Returns the specified contact.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Retrieve a contact
      tags:
      - Contacts
    patch:
      description: Update a specific contact's information.
      operationId: updateContact
      parameters:
      - description: Unique identifier for the contact.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactRequest'
        description: Updates to the contact.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
          description: Updated contact object with given ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Update a contact
      tags:
      - Contacts
      x-codegen-request-body-name: contact
  /fleet/carrier-proposed-assignments:
    get:
      description: Show the assignments that drivers would see in the future.
      operationId: listCarrierProposedAssignments
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: If specified, limits the results to those for these drivers.
          e.g. `driverIds=1,2,3`
        explode: false
        in: query
        name: driverIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'If specified, shows assignments that will be active after this
          time. In RFC 3339 format. Millisecond precision and timezones are supported.
          (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: activeTime
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCarrierProposedAssignmentResponse'
          description: Returns the assignments that drivers would see in the future,
            if any.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Retrieve assignments
      tags:
      - Carrier Proposed Assignments
    post:
      description: Creates a new assignment that a driver can later use. Each driver
        can only have one future assignment.
      operationId: createCarrierProposedAssignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCarrierProposedAssignmentRequest'
        description: The assignment to create.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarrierProposedAssignmentResponse'
          description: Return the created assignment
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create an assignment
      tags:
      - Carrier Proposed Assignments
      x-codegen-request-body-name: carrierProposedAssignment
  /fleet/carrier-proposed-assignments/{id}:
    delete:
      description: Permanently delete an assignment. You can only delete assignments
        that are not yet active. To override a currently active assignment, create
        a new empty one, instead.
      operationId: deleteCarrierProposedAssignment
      parameters:
      - description: ID of the assignment.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Empty success body
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Delete an assignment
      tags:
      - Carrier Proposed Assignments
  /fleet/defects:
    get:
      description: Returns a list of DVIR defects in an organization, filtered by
        creation time. The maximum time period you can query for is 30 days.
      operationId: getDvirDefects
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A start time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for
          is 30 days.*'
        in: query
        name: startTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'An end time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for
          is 30 days.*'
        in: query
        name: endTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'A filter on the data based on resolution status. Example: `isResolved=true`'
        in: query
        name: isResolved
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: List of all DVIR defects in the organization
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get all defects
      tags:
      - Maintenance
  /fleet/defects/{id}:
    patch:
      description: Resolves a given defect by marking its `isResolved` field to `true`.
      operationId: resolveDvirDefect
      parameters:
      - description: ID of the defect.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefectPatch'
        description: The DVIR defect fields to update.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Return the modified defect entity
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Resolve a defect
      tags:
      - Maintenance
      x-codegen-request-body-name: defect
  /fleet/document-types:
    get:
      description: Get information about all document types.
      operationId: getDocumentTypes
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Returns all of the document types.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all document types
      tags:
      - Documents
  /fleet/documents:
    get:
      description: Get all documents
      operationId: getDocuments
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A start time in RFC 3339 format. Queries documents on createdAtTime.
          Is required if an endTime is specified. Defaults to current time - 1 day
          if startTime and endTime are not provided. (Example: 2019-06-13T19:08:25Z).'
        in: query
        name: startTime
        schema:
          format: date-time
          type: string
      - description: 'An end time in RFC 3339 format. Queries documents on createdAtTime.
          Defaults to startTime + 1 day if not specified. (Example: 2019-06-13T19:08:25Z).
          Time range cannot exceed 3 days (72 hours).'
        in: query
        name: endTime
        schema:
          format: date-time
          type: string
      - description: A document type ID.
        in: query
        name: documentTypeId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: List of all documents
      summary: List all documents
      tags:
      - Documents
    post:
      description: Create a document for a particular driver at a specific route stop.
      operationId: createDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreate'
        description: The document to create.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Newly created document object, including the new document ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create a document
      tags:
      - Documents
      x-codegen-request-body-name: document
  /fleet/documents/{id}:
    delete:
      description: Delete a specific document.
      operationId: deleteDocument
      parameters:
      - description: ID of the document.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Empty success body
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Delete a document
      tags:
      - Documents
  /fleet/drivers:
    get:
      description: Get all drivers in organization.
      operationId: listDrivers
      parameters:
      - description: If value is `deactivated`, only drivers that are deactivated
          will appear in the response. This parameter will default to `active` if
          not provided (fetching only active drivers).
        in: query
        name: driverActivationStatus
        schema:
          enum:
          - active
          - deactivated
          type: string
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on data to have an updated at time after or equal to
          this specified time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: updatedAfterTime
        schema:
          format: date-time
          type: string
      - description: 'A filter on data to have a created at time after or equal to
          this specified time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: createdAfterTime
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDriversResponse'
          description: List of all driver objects.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all drivers
      tags:
      - Drivers
    post:
      description: Add a driver to the organization.
      operationId: createDriver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDriverRequest'
        description: The driver to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverResponse'
          description: Newly created driver object, with Samsara-generated ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create a driver
      tags:
      - Drivers
      x-codegen-request-body-name: driver
  /fleet/drivers/safety-scores:
    get:
      description: Fetch safety scores for all drivers in the organization in a given
        time period.
      operationId: getOrgDriverSafetyScores
      parameters:
      - description: Beginning of the time range, specified in RFC 3339 time.
        in: query
        name: startTime
        required: true
        schema:
          format: string
          type: string
      - description: End of the time range, specified in RFC 3339 time.
        in: query
        name: endTime
        required: true
        schema:
          format: string
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSafetyScoresResponse'
          description: Safety scores for all vehicles in the organization
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all safety scores by driver
      tags:
      - Safety
  /fleet/drivers/tachograph-activity/history:
    get:
      description: Returns all known tachograph activity for all specified drivers
        in the time range.
      operationId: getDriverTachographActivity
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A start time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: startTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'An end time in RFC 3339 format. It can''t be more than 30 days
          past startTime. Millisecond precision and timezones are supported. (Examples:
          2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: endTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'A filter on the data based on this comma-separated list of driver
          IDs. Currently only support querying by a single ID. Example: `driverIds=1234`'
        explode: false
        in: query
        name: driverIds
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverTachographActivityResponse'
          description: List of all driver tachograph activities in a specified time
            range.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get driver tachograph activity
      tags:
      - Drivers
  /fleet/drivers/{id}:
    get:
      description: Get information about a driver.
      operationId: getDriver
      parameters:
      - description: 'ID of the driver. This can either be the Samsara-specified ID,
          or an external ID. External IDs are customer specified key-value pairs created
          in the POST or PATCH requests of this resource. To specify an external ID
          as part of a path parameter, use the following format: `key:value`. For
          example, `payrollId:ABFS18600`'
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverResponse'
          description: Returns the specified driver.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Retrieve a driver
      tags:
      - Drivers
    patch:
      description: Update a specific driver's information. This can also be used to
        activate or de-activate a given driver by setting the driverActivationStatus
        field.
      operationId: updateDriver
      parameters:
      - description: 'ID of the driver. This can either be the Samsara-specified ID,
          or an external ID. External IDs are customer specified key-value pairs created
          in the POST or PATCH requests of this resource. To specify an external ID
          as part of a path parameter, use the following format: `key:value`. For
          example, `payrollId:ABFS18600`'
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDriverRequest'
        description: Updates to the driver properties.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverResponse'
          description: Updated driver object, with ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Update a driver
      tags:
      - Drivers
      x-codegen-request-body-name: driver
  /fleet/dvirs:
    post:
      description: Creates a new mechanic DVIR in the organization.
      operationId: createDvir
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDvirRequest'
        description: The DVIR to create.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvirResponse'
          description: Newly created DVIR.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create a mechanic DVIR
      tags:
      - Maintenance
      x-codegen-request-body-name: dvir
  /fleet/dvirs/history:
    get:
      description: Returns a list of all DVIRs in an organization
      operationId: getDvirHistory
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of vehicle
          IDs. Example: `vehicleIds=1234,5678`'
        explode: false
        in: query
        name: vehicleIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of trailer
          IDs. Example: `trailerIds=1234,5678`'
        explode: false
        in: query
        name: trailerIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A start time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: startTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'An end time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: endTime
        required: true
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvirsListResponse'
          description: List of all DVIRs in the organization
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get all DVIRs
      tags:
      - Maintenance
  /fleet/dvirs/{id}:
    get:
      description: Returns a specific dvir
      operationId: getDvirById
      parameters:
      - description: ID of the DVIR.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvirResponse'
          description: A dvir object with ID
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Retrieve a DVIR
      tags:
      - Maintenance
    patch:
      description: Resolves a given DVIR by marking its `isResolved` field to `true`.
      operationId: updateDvirById
      parameters:
      - description: ID of the DVIR.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDvirRequest'
        description: The dvir fields to update.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvirResponse'
          description: Updated dvir object with ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Resolve a DVIR
      tags:
      - Maintenance
      x-codegen-request-body-name: dvir
  /fleet/equipment:
    get:
      description: Returns a list of all equipment in an organization, ordered by
        equipment ID. Equipment is defined as Samsara AG24s connected via APWR, J1939,
        or CAT cables.
      operationId: getEquipmentList
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipmentListResponse'
          description: List of all equipment objects, and pagination parameters.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all equipment
      tags:
      - Equipment
  /fleet/equipment/locations:
    get:
      description: Returns last known locations for all equipment (Samsara AG24s connected
        via APWR, J1939, or CAT cables). This can be optionally filtered by tags or
        specific equipment IDs.
      operationId: getEquipmentLocationSnapshot
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of equipment
          IDs. Example: `equipmentIds=1234,5678`'
        explode: false
        in: query
        name: equipmentIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: List of all equipment location objects and pagination parameters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List most recent equipment locations
      tags:
      - Equipment
  /fleet/equipment/locations/feed:
    get:
      description: |-
        Follow a continuous feed of all equipment locations from Samsara AG24s connected via APWR, J1939, or CAT cables.

        Your first call to this endpoint will provide you with the most recent location for each piece of equipment and a `pagination` object that contains an `endCursor`.

        You can provide the `endCursor` to the `after` parameter of this endpoint to get location updates since that `endCursor`.

        If `hasNextPage` is `false`, no updates are readily available yet. We'd suggest waiting a minimum of 5 seconds before requesting updates.
      operationId: getEquipmentLocationsFeed
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of equipment
          IDs. Example: `equipmentIds=1234,5678`'
        explode: false
        in: query
        name: equipmentIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: List of all locations for the specified pieces of equipment.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Follow a real-time feed of equipment locations
      tags:
      - Equipment
  /fleet/equipment/locations/history:
    get:
      description: Returns all known equipment location changes during the given time
        range for all powered equipment (AG24s connected with a APWR, J1939, or CAT
        cable). This can be optionally filtered by tags or specific equipment IDs.
      operationId: getEquipmentLocationsHistory
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A start time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: startTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'An end time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: endTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of equipment
          IDs. Example: `equipmentIds=1234,5678`'
        explode: false
        in: query
        name: equipmentIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: List of all equipment locations and pagination parameters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get historical equipment locations
      tags:
      - Equipment
  /fleet/equipment/stats:
    get:
      description: Returns last known stats for all equipment (Samsara AG24s connected
        connected via APWR, J1939, or CAT cables). This can be optionally filtered
        by tags or specific equipment IDs.
      operationId: getEquipmentStatsSnapshot
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of equipment
          IDs. Example: `equipmentIds=1234,5678`'
        explode: false
        in: query
        name: equipmentIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A comma separated list of stat types.
        explode: false
        in: query
        name: types
        schema:
          items:
            enum:
            - gatewayEngineStates
            - obdEngineStates
            - fuelPercents
            - engineRpm
            - gatewayEngineSeconds
            - obdEngineSeconds
            - gpsOdometerMeters
            format: string
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: List of all equipment stat objects and pagination parameters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List most recent equipment stats
      tags:
      - Equipment
  /fleet/equipment/stats/feed:
    get:
      description: |-
        Follow a continuous feed of all equipment stats from Samsara AG24s connected via APWR, J1939, or CAT cables.

        Your first call to this endpoint will provide you with the most recent stats for each piece of equipment and a `pagination` object that contains an `endCursor`.

        You can provide the `endCursor` to the `after` parameter of this endpoint to get equipment stats updates since that `endCursor`.

        If `hasNextPage` is `false`, no updates are readily available yet. Each stat type has a different refresh rate, but in general we'd suggest waiting a minimum of 5 seconds before requesting updates.
      operationId: getEquipmentStatsFeed
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of equipment
          IDs. Example: `equipmentIds=1234,5678`'
        explode: false
        in: query
        name: equipmentIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A comma separated list of stat types.
        explode: false
        in: query
        name: types
        schema:
          items:
            enum:
            - gatewayEngineStates
            - obdEngineStates
            - fuelPercents
            - engineRpm
            - gatewayEngineSeconds
            - obdEngineSeconds
            - gpsOdometerMeters
            format: string
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: List of all equipment stat objects and pagination parameters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Follow a real-time feed of equipment stats
      tags:
      - Equipment
  /fleet/equipment/stats/history:
    get:
      description: Returns all known equipment stat changes during the given time
        range for all powered equipment (Samsara AG24s connected via APWR, J1939,
        or CAT cables). This can be optionally filtered by tags or specific equipment
        IDs.
      operationId: getEquipmentStatsHistory
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A start time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: startTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'An end time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: endTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of equipment
          IDs. Example: `equipmentIds=1234,5678`'
        explode: false
        in: query
        name: equipmentIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A comma separated list of stat types.
        explode: false
        in: query
        name: types
        schema:
          items:
            enum:
            - gatewayEngineStates
            - obdEngineStates
            - fuelPercents
            - engineRpm
            - gatewayEngineSeconds
            - obdEngineSeconds
            - gpsOdometerMeters
            format: string
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: List of all equipment stat objects and pagination parameters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get historical equipment stats
      tags:
      - Equipment
  /fleet/equipment/{id}:
    get:
      description: Get information about a specific piece of equipment. Equipment
        is defined as Samsara AG24s connected via APWR, J1939, or CAT cables.
      operationId: getEquipmentById
      parameters:
      - description: Samsara ID of the equipment.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Returns the specified equipment object.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Retrieve a unit of equipment
      tags:
      - Equipment
  /fleet/routes:
    post:
      description: Create a route. There is currently no support for creating a recurring
        route or optimizing a route.
      operationId: createRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
        description: Add a route.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Returns the created route
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create a route.
      tags:
      - Routes
      x-codegen-request-body-name: route
  /fleet/routes/{id}:
    delete:
      description: Delete a route. Deletes a single instance of a route. Does not
        delete a recurring route. Does not delete associated documents or trips.
      operationId: deleteRouteById
      parameters:
      - description: Unique identifier for the route.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Returns an empty success response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Delete a single route
      tags:
      - Routes
    get:
      description: Retrieve a route
      operationId: getRoute
      parameters:
      - description: Unique identifier for the route.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Returns the specified route.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get information about a single route
      tags:
      - Routes
  /fleet/unassigned-driving-segments:
    get:
      description: Get the unassigned driving segments for a specified range.
      operationId: getUnassignedDrivingSegments
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: ID(s) of a specific unassigned driving segment(s). Takes precedent
          over filter time range params. Supports multiple comma-separated IDs using
          csv format (ex. ?id=1,2,3).
        explode: false
        in: query
        name: id
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: 'Beginning of the filter time range, specified in RFC 3339 format.
          (Example: 2019-06-13T18:08:25Z) Filters based on the server timestamp, i.e.
          createAtTime.'
        in: query
        name: startTime
        schema:
          format: date-time
          type: string
      - description: 'End of the filter time range, specified in RFC 3339 format.
          (Example: 2019-06-13T19:08:25Z) Filters based on the server timestamp, i.e.
          createAtTime.'
        in: query
        name: endTime
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: Unassigned driving segments for provided time range.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all unassigned driving segments
      tags:
      - Unassigned Driving Segments
  /fleet/unassigned-driving-segments/{id}:
    patch:
      description: Assign an unassigned driving segment to a driver.
      operationId: patchUnassignedDrivingSegments
      parameters:
      - description: ID of a specific unassigned driving segment.
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                annotation:
                  description: Annotation for the driving segment.
                  example: Yard move.
                  format: string
                  type: string
                driverId:
                  description: ID of Driver to assign this segment to. The driver
                    assignment is a tentative assignment until the ID is 'ACCEPTED'.
                  example: "1234"
                  type: string
              required:
              - annotation
              - driverId
              type: object
        description: Driver ID to assign this driving segment to, and/or an annotation
          reason.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: The updated unassigned driving segment.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Assign an unassigned driving segment
      tags:
      - Unassigned Driving Segments
      x-codegen-request-body-name: updateUnassignedDrivingSegment
  /fleet/vehicles:
    get:
      description: Returns a list of all vehicles.
      operationId: listVehicles
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVehiclesResponse'
          description: List of all vehicle objects, and pagination parameters.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all vehicles
      tags:
      - Vehicles
  /fleet/vehicles/harsh-events:
    get:
      description: Fetch all harsh events for the organization in a given time period.
      operationId: getOrgHarshEvents
      parameters:
      - description: Beginning of the time range, specified in RFC 3339 time.
        in: query
        name: startTime
        required: true
        schema:
          format: string
          type: string
      - description: End of the time range, specified in RFC 3339 time.
        in: query
        name: endTime
        required: true
        schema:
          format: string
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgHarshEventsKondoResponse'
          description: Harsh events for the organization
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all harsh events
      tags:
      - Safety
  /fleet/vehicles/locations:
    get:
      description: Returns last known location for all vehicles (connected via Samsara
        Vehicle Gateways). This can be optionally filtered by tags or specific vehicle
        IDs. See [here](https://developers.samsara.com/docs/vehicle-locations) for
        more details.
      operationId: getVehicleLocations
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of vehicle
          IDs. Example: `vehicleIds=1234,5678`'
        explode: false
        in: query
        name: vehicleIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleLocationsResponse'
          description: List of the most recent locations for the specified vehicles.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get most recent vehicle locations
      tags:
      - Vehicles
  /fleet/vehicles/locations/feed:
    get:
      description: "Follow a continuous feed of all vehicle locations from Samsara\
        \ Vehicle Gateways.\n\nYour first call to this endpoint will provide you with\
        \ the most recent location for each vehicle and a `pagination` object that\
        \ contains an `endCursor`.\n\nYou can provide the `endCursor` to the `after`\
        \ parameter of this endpoint to get location updates since that `endCursor`.\
        \ \n\nIf `hasNextPage` is `false`, no updates are readily available yet. We'd\
        \ suggest waiting a minimum of 5 seconds before requesting updates.\n\nSee\
        \ [this guide](https://developers.samsara.com/docs/vehicle-locations#section-follow-a-real-time-feed-of-vehicle-locations)\
        \ for more details."
      operationId: getVehicleLocationsFeed
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of vehicle
          IDs. Example: `vehicleIds=1234,5678`'
        explode: false
        in: query
        name: vehicleIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleLocationsListResponse'
          description: List of locations events for the specified vehicles.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Follow a feed of vehicle locations
      tags:
      - Vehicles
  /fleet/vehicles/locations/history:
    get:
      description: Returns all known vehicle locations during the given time range
        for all vehicles (connected via Samsara Vehicle Gateways). This can be optionally
        filtered by tags or specific vehicle IDs. See [here](https://developers.samsara.com/docs/vehicle-locations)
        for more details.
      operationId: getVehicleLocationsHistory
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A start time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: startTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'An end time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: endTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of vehicle
          IDs. Example: `vehicleIds=1234,5678`'
        explode: false
        in: query
        name: vehicleIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleLocationsListResponse'
          description: List of all locations for the specified vehicles and time range.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get historical vehicle locations
      tags:
      - Vehicles
  /fleet/vehicles/safety-scores:
    get:
      description: Fetch safety scores for all vehicles in the organization in a given
        time period.
      operationId: getOrgVehicleSafetyScores
      parameters:
      - description: Beginning of the time range, specified in RFC 3339 time.
        in: query
        name: startTime
        required: true
        schema:
          format: string
          type: string
      - description: End of the time range, specified in RFC 3339 time.
        in: query
        name: endTime
        required: true
        schema:
          format: string
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSafetyScoresResponse'
          description: Safety scores for all vehicles in the organization
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all safety scores by vehicle
      tags:
      - Safety
  /fleet/vehicles/stats:
    get:
      description: Returns last known stats for all vehicles (connected via Samsara
        Vehicle Gateways). This can be optionally filtered by tags or specific vehicle
        IDs. See [here](https://developers.samsara.com/docs/vehicle-stats) for more
        details.
      operationId: getVehicleStats
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of vehicle
          IDs. Example: `vehicleIds=1234,5678`'
        explode: false
        in: query
        name: vehicleIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |-
          The stat type you want this endpoint to return information on. Currently only one stat type is accepted per request.

          - `engineStates`: The state of the engine (`Off`, `On`, `Idle`).
          - `fuelPercents`: The engine fuel level in percentage points (e.g. `99`, `50`, etc).
          - `obdOdometerMeters`: The odometer reading according to on-board diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. In these cases, we recommend using `gpsOdometerMeters`.
          - `gpsOdometerMeters`: The odometer reading according to GPS calculations. This calculation is based off GPS distance traveled and a manual odometer offset for a given vehicle, specified by the user in Samsara's dashboard UI or through the `odometerMeters` field in the [PATCH /fleet/vehicles/{id}](#operation/updateVehicleById) endpoint. `gpsOdometerMeters` is equal to the manual offset plus the GPS distance traveled since the offset was set. The value for this stat type will be omitted if a manual offset is not provided for a given vehicle. *A manual offset can only be provided when we do not have diagnostic coverage for a particular vehicle.*
          - `obdEngineSeconds`: The cumulative number of seconds the engine has run according to on-board diagnostics.
          - `gpsDistanceMeters`: The distance the vehicle has traveled since the gateway was installed based on GPS calculations.
        explode: false
        in: query
        name: types
        required: true
        schema:
          items:
            enum:
            - engineStates
            - fuelPercents
            - obdOdometerMeters
            - gpsOdometerMeters
            - obdEngineSeconds
            - gpsDistanceMeters
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleStatsResponse'
          description: List of the most recent stats for the specified vehicles and
            stat types.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List most recent vehicle stats
      tags:
      - Vehicles
  /fleet/vehicles/stats/feed:
    get:
      description: |-
        Follow a continuous feed of vehicle stats from Samsara Vehicle Gateways.

        Your first call to this endpoint will provide you with the most recent stats for each vehicle and a `pagination` object that contains an `endCursor`.

        You can provide the `endCursor` to the `after` parameter of this endpoint to get vehicle stat updates since that `endCursor`.

        If `hasNextPage` is `false`, no updates are readily available yet. Each stat type has a different refresh rate, but in general we'd suggest waiting a minimum of 5 seconds before requesting updates. See [this guide](https://developers.samsara.com/docs/vehicle-stats#section-follow-a-real-time-feed-of-vehicle-stats) for more details.
      operationId: getVehicleStatsFeed
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of vehicle
          IDs. Example: `vehicleIds=1234,5678`'
        explode: false
        in: query
        name: vehicleIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |-
          The stat type you want this endpoint to return information on. Currently only one stat type is accepted per request.

          - `engineStates`: The state of the engine (`Off`, `On`, `Idle`).
          - `fuelPercents`: The engine fuel level in percentage points (e.g. `99`, `50`, etc).
          - `obdOdometerMeters`: The odometer reading according to on-board diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. In these cases, we recommend using `gpsOdometerMeters`.
          - `gpsOdometerMeters`: The odometer reading according to GPS calculations. This calculation is based off GPS distance traveled and a manual odometer offset for a given vehicle, specified by the user in Samsara's dashboard UI or through the `odometerMeters` field in the [PATCH /fleet/vehicles/{id}](#operation/updateVehicleById) endpoint. `gpsOdometerMeters` is equal to the manual offset plus the GPS distance traveled since the offset was set. The value for this stat type will be omitted if a manual offset is not provided for a given vehicle. *A manual offset can only be provided when we do not have diagnostic coverage for a particular vehicle.*
          - `obdEngineSeconds`: The cumulative number of seconds the engine has run according to on-board diagnostics.
          - `gpsDistanceMeters`: The distance the vehicle has traveled since the gateway was installed based on GPS calculations.
        explode: false
        in: query
        name: types
        required: true
        schema:
          items:
            enum:
            - engineStates
            - fuelPercents
            - obdOdometerMeters
            - gpsOdometerMeters
            - obdEngineSeconds
            - gpsDistanceMeters
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleStatsListResponse'
          description: List of stat events for the specified vehicles and stat types.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Follow a feed of vehicle stats
      tags:
      - Vehicles
  /fleet/vehicles/stats/history:
    get:
      description: Returns vehicle stats events during the given time range for all
        vehicles (connected via Samsara Vehicle Gateways). This can be optionally
        filtered by tags or specific vehicle IDs. See [here](https://developers.samsara.com/docs/vehicle-stats)
        for more details.
      operationId: getVehicleStatsHistory
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A start time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: startTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'An end time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: endTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A filter on the data based on this comma-separated list of vehicle
          IDs. Example: `vehicleIds=1234,5678`'
        explode: false
        in: query
        name: vehicleIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |-
          The stat type you want this endpoint to return information on. Currently only one stat type is accepted per request.

          - `engineStates`: The state of the engine (`Off`, `On`, `Idle`).
          - `fuelPercents`: The engine fuel level in percentage points (e.g. `99`, `50`, etc).
          - `obdOdometerMeters`: The odometer reading according to on-board diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. In these cases, we recommend using `gpsOdometerMeters`.
          - `gpsOdometerMeters`: The odometer reading according to GPS calculations. This calculation is based off GPS distance traveled and a manual odometer offset for a given vehicle, specified by the user in Samsara's dashboard UI or through the `odometerMeters` field in the [PATCH /fleet/vehicles/{id}](#operation/updateVehicleById) endpoint. `gpsOdometerMeters` is equal to the manual offset plus the GPS distance traveled since the offset was set. The value for this stat type will be omitted if a manual offset is not provided for a given vehicle. *A manual offset can only be provided when we do not have diagnostic coverage for a particular vehicle.*
          - `obdEngineSeconds`: The cumulative number of seconds the engine has run according to on-board diagnostics.
          - `gpsDistanceMeters`: The distance the vehicle has traveled since the gateway was installed based on GPS calculations.
        explode: false
        in: query
        name: types
        required: true
        schema:
          items:
            enum:
            - engineStates
            - fuelPercents
            - obdOdometerMeters
            - gpsOdometerMeters
            - obdEngineSeconds
            - gpsDistanceMeters
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleStatsListResponse'
          description: List of vehicle stats for the specified vehicles, stat type,
            and time range.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get historical vehicle stats
      tags:
      - Vehicles
  /fleet/vehicles/{id}:
    get:
      description: Get information about a specific vehicle.
      operationId: getVehicle
      parameters:
      - description: 'ID of the vehicle. This can either be the Samsara-specified
          ID, or an external ID. External IDs are customer specified key-value pairs
          created in the POST or PATCH requests of this resource. To specify an external
          ID as part of a path parameter, use the following format: `key:value`. For
          example, `maintenanceId:250020`'
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'
          description: Returns the specified vehicle object.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Retrieve a vehicle
      tags:
      - Vehicles
    patch:
      description: |-
        Updates the given Vehicle object.

        **Note:** Vehicle objects are automatically created when Samsara Vehicle Gateways are installed. You cannot create a Vehicle object via API.

        You are able to *update* many of the fields of a Vehicle.

        **Note**: There are no required fields in the request body, and you only need to provide the fields you wish to update.
      operationId: updateVehicle
      parameters:
      - description: 'ID of the vehicle. This can either be the Samsara-specified
          ID, or an external ID. External IDs are customer specified key-value pairs
          created in the POST or PATCH requests of this resource. To specify an external
          ID as part of a path parameter, use the following format: `key:value`. For
          example, `maintenanceId:250020`'
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVehicleRequest'
        description: Fields that can be patched on a vehicle.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'
          description: Returns the specified vehicle object.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Update a vehicle
      tags:
      - Vehicles
      x-codegen-request-body-name: vehicle
  /industrial/data-inputs:
    get:
      description: Returns all data inputs, optionally filtered by tags.
      operationId: getDataInputs
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: List of data inputs with names, ids, and other metadata.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Unexpected error.
      summary: List all data inputs
      tags:
      - Industrial
  /industrial/data-inputs/data-points:
    get:
      description: Returns last known data points for all data inputs. This can be
        filtered by optional tags or specific data input IDs.
      operationId: getDataInputDataSnapshot
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A comma-separated list of data input IDs. Example: `dataInputIds=1234,5678`'
        explode: false
        in: query
        name: dataInputIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataInputSnapshotResponse'
          description: List of last known data input data points and pagination parameters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Unexpected error.
      summary: List most recent data input data points
      tags:
      - Industrial
  /industrial/data-inputs/data-points/feed:
    get:
      description: |-
        Follow a continuous feed of all data input data points.

        Your first call to this endpoint will provide you with the most recent data points for each data input and a `pagination` object that contains an `endCursor`.

        You can provide the `endCursor` to the `after` parameter of this endpoint to get data point updates since that `endCursor`.

        If `hasNextPage` is `false`, no updates are readily available yet. We suggest waiting a minimum of 5 seconds before requesting updates.
      operationId: getDataInputDataFeed
      parameters:
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A comma-separated list of data input IDs. Example: `dataInputIds=1234,5678`'
        explode: false
        in: query
        name: dataInputIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataInputListResponse'
          description: List of all data points for specified data inputs
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Unexpected error.
      summary: Follow a real-time feed of data input data points
      tags:
      - Industrial
  /industrial/data-inputs/data-points/history:
    get:
      description: Returns all known data points during the given time range for all
        data inputs. This can be filtered by optional tags or specific data input
        IDs.
      operationId: getDataInputDataHistory
      parameters:
      - description: 'A start time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: startTime
        required: true
        schema:
          format: date-time
          type: string
      - description: 'An end time in RFC 3339 format. Millisecond precision and timezones
          are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z,
          OR 2015-09-15T14:00:12-04:00).'
        in: query
        name: endTime
        required: true
        schema:
          format: date-time
          type: string
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      - description: 'A filter on the data based on this comma-separated list of tag
          IDs. Example: `tagIds=1234,5678`'
        explode: false
        in: query
        name: tagIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'A comma-separated list of data input IDs. Example: `dataInputIds=1234,5678`'
        explode: false
        in: query
        name: dataInputIds
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataInputListResponse'
          description: List of all data points for the specified data inputs and time
            range.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Unexpected error.
      summary: List historical data input data points
      tags:
      - Industrial
  /me:
    get:
      description: Get information about your organization
      operationId: getOrganizationInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Returns information about your organization.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Get information about your organization
      tags:
      - Organization
  /messages:
    post:
      description: Send a message to a list of driver ids.
      operationId: createMessagesKondo
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                driverIds:
                  description: IDs of the drivers for whom the messages are sent to.
                  example:
                  - 111
                  - 222
                  - 333
                  items:
                    example: 555.0
                    format: int64
                    type: number
                  type: array
                text:
                  description: The text sent in the message.
                  example: This is a message.
                  maxLength: 65533
                  minLength: 1
                  type: string
              required:
              - driverIds
              - text
              type: object
        description: Text to send to a list of driverIds.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: Returns the created messages.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create a message
      tags:
      - Messages
      x-codegen-request-body-name: createMessages
  /tags:
    get:
      description: Return all of the tags for an organization.
      operationId: listTags
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
          description: List of tags.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all tags
      tags:
      - Tags
    post:
      description: Create a new tag for the organization.
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
          description: Newly created tag object, including the new tag ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create a tag
      tags:
      - Tags
      x-codegen-request-body-name: tag
  /tags/{id}:
    delete:
      description: Permanently deletes a tag.
      operationId: deleteTag
      parameters:
      - description: Unique identifier for the tag.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successfully deleted the tag. No response body is returned.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Delete a tag
      tags:
      - Tags
    get:
      description: Fetch a tag by id.
      operationId: getTag
      parameters:
      - description: Unique identifier for the tag.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
          description: The tag corresponding to request id.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Retrieve a tag
      tags:
      - Tags
    put:
      description: Update a tag with a new name and new members. This API call would
        replace all old members of a tag with new members specified in the request
        body.
      operationId: replaceTag
      parameters:
      - description: Unique identifier for the tag.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceTagRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
          description: The updated tag data.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Update a tag
      tags:
      - Tags
      x-codegen-request-body-name: tag
  /user-roles:
    get:
      description: Returns a list of all user roles in an organization.
      operationId: listUserRoles
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserRolesResponse'
          description: List all user roles.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all user roles
      tags:
      - Users
  /users:
    get:
      description: Returns a list of all users in an organization.
      operationId: listUsers
      parameters:
      - description: The limit for how many objects will be in the response. Default
          and max for this value is 512 objects.
        in: query
        name: limit
        schema:
          default: 512
          format: int64
          maximum: 512
          minimum: 1
          type: integer
      - description: If specified, this should be the endCursor value from the previous
          page of results. When present, this request will return the next page of
          results that occur immediately after the previous page of results.
        in: query
        name: after
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
          description: List all users.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: List all users
      tags:
      - Users
    post:
      description: Add a user to the organization.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        description: The user to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Newly created user object with ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Create a user
      tags:
      - Users
      x-codegen-request-body-name: user
  /users/{id}:
    delete:
      description: Delete the given user.
      operationId: deleteUser
      parameters:
      - description: Unique identifier for the user.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Returns an empty success response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Delete a user
      tags:
      - Users
    get:
      description: Get a specific user's information.
      operationId: getUser
      parameters:
      - description: Unique identifier for the user.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Returns the specified user.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Retrieve a user
      tags:
      - Users
    patch:
      description: Update a specific user's information.
      operationId: updateUser
      parameters:
      - description: Unique identifier for the user.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        description: Updates to the user.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Updated user object with ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Error response
      summary: Update a user
      tags:
      - Users
      x-codegen-request-body-name: user
  /v1/fleet/assets:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch all of the assets.
      operationId: V1getAllAssets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
          description: List of assets.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: List all assets
      tags:
      - Assets
  /v1/fleet/assets/locations:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch current locations of all assets.
      operationId: V1getAllAssetCurrentLocations
      parameters:
      - description: Pagination parameter indicating the cursor position to continue
          returning results after. Used in conjunction with the 'limit' parameter.
          Mutually exclusive with 'endingBefore' parameter.
        in: query
        name: startingAfter
        schema:
          type: string
      - description: Pagination parameter indicating the cursor position to return
          results before. Used in conjunction with the 'limit' parameter. Mutually
          exclusive with 'startingAfter' parameter.
        in: query
        name: endingBefore
        schema:
          type: string
      - description: Pagination parameter indicating the number of results to return
          in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
        in: query
        name: limit
        schema:
          format: int64
          type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
          description: List of assets and their current locations.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: List current location for all assets
      tags:
      - Assets
  /v1/fleet/assets/reefers:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetches all reefers and reefer-specific stats.
      operationId: V1getAssetsReefers
      parameters:
      - description: Timestamp in milliseconds representing the start of the period
          to fetch, inclusive. Used in combination with endMs.
        in: query
        name: startMs
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the end of the period
          to fetch, inclusive. Used in combination with startMs.
        in: query
        name: endMs
        required: true
        schema:
          format: int64
          type: integer
      - description: Pagination parameter indicating the cursor position to continue
          returning results after. Used in conjunction with the 'limit' parameter.
          Mutually exclusive with 'endingBefore' parameter.
        in: query
        name: startingAfter
        schema:
          type: string
      - description: Pagination parameter indicating the cursor position to return
          results before. Used in conjunction with the 'limit' parameter. Mutually
          exclusive with 'startingAfter' parameter.
        in: query
        name: endingBefore
        schema:
          type: string
      - description: Pagination parameter indicating the number of results to return
          in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
        in: query
        name: limit
        schema:
          format: int64
          type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
          description: All org reefers and reefer-specific details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: List stats for all reefers
      tags:
      - Assets
  /v1/fleet/assets/{asset_id}/locations:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        List historical locations for a given asset
      operationId: V1getAssetLocation
      parameters:
      - description: ID of the asset. Must contain only digits 0-9.
        in: path
        name: asset_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the start of the period
          to fetch, inclusive. Used in combination with endMs.
        in: query
        name: startMs
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the end of the period
          to fetch, inclusive. Used in combination with startMs.
        in: query
        name: endMs
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AssetLocationResponse'
          description: Asset location details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: List historical locations for a given asset
      tags:
      - Assets
  /v1/fleet/assets/{asset_id}/reefer:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch the reefer-specific stats of an asset.
      operationId: V1getAssetReefer
      parameters:
      - description: ID of the asset. Must contain only digits 0-9.
        in: path
        name: asset_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the start of the period
          to fetch, inclusive. Used in combination with endMs.
        in: query
        name: startMs
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the end of the period
          to fetch, inclusive. Used in combination with startMs.
        in: query
        name: endMs
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AssetReeferResponse'
          description: Reefer-specific asset details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: List stats for a given reefer
      tags:
      - Assets
  /v1/fleet/dispatch/routes:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch all dispatch routes for a given time period. The time period is defined as `end_time` and the `duration` before which to query.

        Routes are returned if the route's `scheduled_start_ms` and `scheduled_end_ms` overlap with the requested time period.

        More concretely, if the route's `scheduled_start_ms` is before `end_time` and the `scheduled_end_ms` is within or after the given duration, then the route is returned.
      operationId: V1fetchAllDispatchRoutes
      parameters:
      - description: Time in unix milliseconds that represents the end time of the
          requested time interval. See above for a description of how routes are returned.
          Defaults to now.
        in: query
        name: end_time
        schema:
          format: int64
          type: integer
      - description: Time in milliseconds that represents the duration before end_time
          to query. Defaults to 24 hours.
        in: query
        name: duration
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DispatchRoutes'
          description: All dispatch route objects.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get all routes
      tags:
      - Routes
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Create a new dispatch route.
      operationId: V1createDispatchRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1DispatchRouteCreate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DispatchRoute'
          description: Created route object including the new route ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Create a new route
      tags:
      - Routes
      x-codegen-request-body-name: createDispatchRouteParams
  /v1/fleet/dispatch/routes/job_updates:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID. Returns a maximum of 500 job updates. If more than 500 job updates are available, another request made with the prior request's sequence_id will return the next set of available job updates.
      operationId: V1fetchAllRouteJobUpdates
      parameters:
      - description: Sequence ID from the response payload of the last request. Defaults
          to fetching updates from last 24 hours.
        in: query
        name: sequence_id
        schema:
          type: string
      - description: Optionally set include=route to include route object in response
          payload.
        in: query
        name: include
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1allRouteJobUpdates'
          description: All job updates on routes.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get route updates
      tags:
      - Routes
  /v1/fleet/dispatch/routes/{route_id}:
    delete:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Delete a dispatch route and its associated jobs.
      operationId: V1deleteDispatchRouteById
      parameters:
      - description: ID of the dispatch route. Must contain only digits 0-9.
        in: path
        name: route_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successfully deleted the dispatch route. No response body is
            returned.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Delete a route
      tags:
      - Routes
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch a dispatch route by id.
      operationId: V1getDispatchRouteById
      parameters:
      - description: ID of the dispatch route. Must contain only digits 0-9.
        in: path
        name: route_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DispatchRoute'
          description: The dispatch route corresponding to route_id.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get a route
      tags:
      - Routes
    put:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Update the dispatch route. Allowable updates include adding or removing jobs, and changing job locations and times.
      operationId: V1updateDispatchRouteById
      parameters:
      - description: ID of the dispatch route. Must contain only digits 0-9.
        in: path
        name: route_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1DispatchRouteUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DispatchRoute'
          description: The updated route corresponding to route_id.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Update a route
      tags:
      - Routes
      x-codegen-request-body-name: updateDispatchRouteParams
  /v1/fleet/dispatch/routes/{route_id}/history:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch the history of a dispatch route.
      operationId: V1getDispatchRouteHistory
      parameters:
      - description: Timestamp representing the start of the period to fetch, inclusive.
          Used in combination with end_time. Defaults to 0.
        in: query
        name: start_time
        schema:
          format: int64
          type: integer
      - description: Timestamp representing the end of the period to fetch, inclusive.
          Used in combination with start_time. Defaults to nowMs.
        in: query
        name: end_time
        schema:
          format: int64
          type: integer
      - description: ID of the route with history. Must contain only digits 0-9.
        in: path
        name: route_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DispatchRouteHistory'
          description: The historical route state changes between start_time and end_time.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get route history
      tags:
      - Routes
  /v1/fleet/drivers/document_types:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch all of the document types.
      operationId: V1getDriverDocumentTypesByOrgId
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DocumentTypes'
          description: Returns all of the document types.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch document types
      tags:
      - Documents
  /v1/fleet/drivers/documents:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch all of the documents.
      operationId: V1getDriverDocumentsByOrgId
      parameters:
      - description: Time in unix milliseconds that represents the oldest documents
          to return. Used in combination with durationMs. Defaults to now.
        in: query
        name: endMs
        schema:
          format: int64
          type: integer
      - description: Time in milliseconds that represents the duration before endMs
          to query. Defaults to 24 hours.
        in: query
        name: durationMs
        schema:
          format: int64
          type: integer
      - description: Retrieve most recent documents based on either driverCreatedAtMs
          or serverUpdatedAtMs. If no value is provided, the default is driverCreatedAtMs.
        in: query
        name: queryBy
        schema:
          enum:
          - created
          - updated
          format: string
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1Documents'
          description: Returns all of the documents.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch all documents
      tags:
      - Documents
  /v1/fleet/drivers/{driverId}/safety/score:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch the safety score for the driver.
      operationId: V1getDriverSafetyScore
      parameters:
      - description: ID of the driver. Must contain only digits 0-9.
        in: path
        name: driverId
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the start of the period
          to fetch, inclusive. Used in combination with endMs. Total duration (endMs
          - startMs) must be greater than or equal to 1 hour.
        in: query
        name: startMs
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the end of the period
          to fetch, inclusive. Used in combination with startMs. Total duration (endMs
          - startMs) must be greater than or equal to 1 hour.
        in: query
        name: endMs
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DriverSafetyScoreResponse'
          description: Safety score details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch driver safety score
      tags:
      - Safety
  /v1/fleet/drivers/{driver_id}/documents:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Create a document for the given driver.
      operationId: V1createDriverDocument
      parameters:
      - description: ID of the driver for whom the document is created. Must contain
          only digits 0-9.
        in: path
        name: driver_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1DocumentCreate'
        description: To create a document for a given document type, provide the `documentTypeUuid`
          of the type of document you'd like to create. Then, pass in the `fields`
          of the document in the same order that they show up in the given document
          type.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1Document'
          description: Returns the created document.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Create a document
      tags:
      - Documents
      x-codegen-request-body-name: createDocumentParams
  /v1/fleet/drivers/{driver_id}/documents/{document_id}:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetches a single document submission by a specific driver.
      operationId: V1getDriverDocumentByIdAndDriverId
      parameters:
      - description: ID of the driver who submitted the document. Must contain only
          digits 0-9.
        in: path
        name: driver_id
        required: true
        schema:
          format: int64
          type: integer
      - description: ID of document.
        in: path
        name: document_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1Document'
          description: Returns the specified document.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetches a document
      tags:
      - Documents
  /v1/fleet/drivers/{driver_id}/hos_daily_logs:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get summarized daily Hours of Service charts for a specified driver.

        The response will contain a list of `days`, where each entry in the list is the driver's summarized hours of service for that entire day.

        The time range for a "day" is defined by the `driver`'s `eldDayStartHour`. By default, this is `0`, which indicates the `driver`'s "day" is from midnight to midnight in the `driver`'s respective `timezone`. This value is configurable per driver.

        The `startMs` and `endMs` parameters indicate start and end for the date range you'd like to query. These parameters are inclusive. This means that the response will include the "day" that contains `startMs` and the "day" that contains `endMs`. For example:

        Let's say a `driver`'s `eldDayStartHour` is `0` and their timezone is `America/Chicago`.

        If `startMs` was `1576080000000` (December 11, 2019 10:00:00 AM America/Chicago) and an `endMs` was `1576166400000` (December 12, 2019 10:00:00 AM America/Los_Angeles), then the response will contain a two `day` entries: [December 11, 2019 12:00:00 AM America/Chicago to December 12, 2019 12:00:00 AM America/Chicago], and [December 12, 2019 12:00:00 AM America/Chicago to December 13, 2019 12:00:00 AM America/Chicago].
      operationId: V1getFleetDriversHosDailyLogs
      parameters:
      - description: ID of the driver with HOS logs.
        in: path
        name: driver_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/json:
            schema:
              properties:
                endMs:
                  description: End of the time range, specified in milliseconds UNIX
                    time.
                  example: 1462881998034
                  format: int64
                  type: integer
                startMs:
                  description: Beginning of the time range, specified in milliseconds
                    UNIX time.
                  example: 1462878398034
                  format: int64
                  type: integer
              required:
              - endMs
              - startMs
              type: object
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DriverDailyLogResponse'
          description: Distance traveled and time active for each driver in the organization
            over the specified time period.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get daily HOS logs for a specific driver
      tags:
      - Hours of Service
      x-codegen-request-body-name: hosLogsParam
  /v1/fleet/hos_authentication_logs:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.
      operationId: V1getFleetHosAuthenticationLogs
      parameters:
      - description: Driver ID to query.
        in: query
        name: driverId
        required: true
        schema:
          format: int64
          type: integer
      - description: Beginning of the time range, specified in milliseconds UNIX time.
        in: query
        name: startMs
        required: true
        schema:
          format: int64
          type: integer
      - description: End of the time range, specified in milliseconds UNIX time.
        in: query
        name: endMs
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1HosAuthenticationLogsResponse'
          description: HOS authentication logs for the specified driver.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get HOS signin and signout
      tags:
      - Hours of Service
  /v1/fleet/hos_logs:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.
      operationId: V1getFleetHosLogs
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/json:
            schema:
              properties:
                driverId:
                  description: Driver ID to query.
                  example: 444
                  format: int64
                  type: integer
                endMs:
                  description: End of the time range, specified in milliseconds UNIX
                    time.
                  example: 1462881998034
                  type: integer
                startMs:
                  description: Beginning of the time range, specified in milliseconds
                    UNIX time.
                  example: 1462878398034
                  type: integer
              required:
              - driverId
              - endMs
              - startMs
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1HosLogsResponse'
          description: HOS logs for the specified driver.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get HOS logs for a specific driver
      tags:
      - Hours of Service
      x-codegen-request-body-name: hosLogsParam
  /v1/fleet/hos_logs_summary:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get the current HOS status for all drivers. Note that this includes inactive as well as active drivers. You may need to upgrade your API token to version 2019-07-31 or later to leverage response pagination. [See here](https://kb.samsara.com/hc/en-us/articles/360026132972-Upgrading-API-Tokens)
      operationId: V1getFleetHosLogsSummary
      parameters:
      - description: Pagination parameter indicating the cursor position to continue
          returning results after. Used in conjunction with the 'limit' parameter.
        in: query
        name: after
        schema:
          type: string
      - description: Pagination parameter indicating the number of results to return
          in this request. Used in conjunction with 'after'.
        in: query
        name: limit
        schema:
          format: int64
          type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1HosLogsSummaryResponse'
          description: HOS logs for the specified driver.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get current HOS status for all drivers
      tags:
      - Hours of Service
  /v1/fleet/maintenance/dvirs:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get DVIRs for the org within provided time constraints
      operationId: V1getDvirs
      parameters:
      - description: Time in millis until the last dvir log.
        in: query
        name: end_ms
        required: true
        schema:
          type: integer
      - description: Time in millis which corresponds to the duration before the end_ms.
          Must be less than or equal to 90 days.
        in: query
        name: duration_ms
        required: true
        schema:
          maximum: 7776000000
          type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DvirListResponse'
          description: DVIRs for the specified duration.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get DVIRs
      tags:
      - Maintenance
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Create a new dvir, marking a vehicle or trailer safe or unsafe.
      operationId: V1createDvir
      requestBody:
        $ref: '#/components/requestBodies/inline_object_4'
        content:
          application/json:
            schema:
              properties:
                inspectionType:
                  description: Only type 'mechanic' is currently accepted.
                  enum:
                  - mechanic
                  example: mechanic
                  type: string
                mechanicNotes:
                  description: Any notes from the mechanic.
                  example: Replaced headlight on passenger side.
                  type: string
                odometerMiles:
                  description: The current odometer of the vehicle.
                  example: 38426
                  type: integer
                previousDefectsCorrected:
                  description: Whether any previous defects were corrected. If this
                    vehicle or trailer was previously marked unsafe, and this DVIR
                    marks it as safe, either previousDefectsCorrected or previousDefectsIgnored
                    must be true.
                  example: true
                  type: boolean
                previousDefectsIgnored:
                  description: Whether any previous defects were ignored. If this
                    vehicle or trailer was previously marked unsafe, and this DVIR
                    marks it as safe, either previousDefectsCorrected or previousDefectsIgnored
                    must be true.
                  example: false
                  type: boolean
                resolvedDefectIds:
                  description: List of defect IDs to resolve.  The defects must be
                    associated with the provided vehicle or trailer.
                  example:
                  - 18
                  - 19
                  items:
                    format: int64
                    type: integer
                  type: array
                safe:
                  description: Whether or not this vehicle or trailer is safe to drive.
                  enum:
                  - safe
                  - unsafe
                  example: safe
                  type: string
                trailerId:
                  description: Id of trailer being inspected. Either vehicleId or
                    trailerId must be provided.
                  example: 11
                  type: integer
                userEmail:
                  description: The Samsara login email for the person creating the
                    DVIR. The email must correspond to a Samsara user's email.
                  example: j.smith@yahoo.com
                  type: string
                vehicleId:
                  description: Id of vehicle being inspected. Either vehicleId or
                    trailerId must be provided.
                  example: 10
                  type: integer
              required:
              - inspectionType
              - safe
              - userEmail
              type: object
        description: DVIR creation body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DvirBase'
          description: Newly created DVIR.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Create a DVIR
      tags:
      - Maintenance
      x-codegen-request-body-name: createDvirParam
  /v1/fleet/maintenance/list:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get list of the vehicles with any engine faults or check light data.
      operationId: V1getFleetMaintenanceList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
          description: List of vehicles and maintenance information about each.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get vehicles with engine faults or check lights
      tags:
      - Maintenance
  /v1/fleet/messages:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get all messages.
      operationId: V1getMessages
      parameters:
      - description: Time in unix milliseconds that represents the end of time range
          of messages to return. Used in combination with durationMs. Defaults to
          now.
        in: query
        name: endMs
        schema:
          format: int64
          type: integer
      - description: Time in milliseconds that represents the duration before endMs
          to query. Defaults to 24 hours.
        in: query
        name: durationMs
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
          description: Returns the fetched messages from most recently sent to least
            recently sent.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get all messages.
      tags:
      - Messages
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Send a message to a list of driver ids.
      operationId: V1createMessages
      requestBody:
        $ref: '#/components/requestBodies/inline_object_5'
        content:
          application/json:
            schema:
              properties:
                driverIds:
                  description: IDs of the drivers for whom the messages are sent to.
                  example:
                  - 111
                  - 222
                  - 333
                  items:
                    example: 555.0
                    format: int64
                    type: number
                  type: array
                text:
                  description: The text sent in the message.
                  example: This is a message.
                  type: string
              required:
              - driverIds
              - text
              type: object
        description: Text to send to a list of driverIds.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
          description: Returns the created messages.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Send a message to a list of driver ids.
      tags:
      - Messages
      x-codegen-request-body-name: createMessages
  /v1/fleet/trailers/assignments:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch trailer assignment data for all trailers in your organization.
      operationId: V1getAllTrailerAssignments
      parameters:
      - description: Timestamp in Unix epoch miliseconds representing the start of
          the period to fetch. Omitting both startMs and endMs only returns current
          assignments.
        in: query
        name: startMs
        schema:
          format: int64
          type: integer
      - description: Timestamp in Unix epoch miliseconds representing the end of the
          period to fetch. Omitting endMs sets endMs as the current time
        in: query
        name: endMs
        schema:
          format: int64
          type: integer
      - description: Pagination parameter indicating the number of results to return
          in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
        in: query
        name: limit
        schema:
          format: int64
          type: number
      - description: Pagination parameter indicating the cursor position to continue
          returning results after. Used in conjunction with the 'limit' parameter.
          Mutually exclusive with 'endingBefore' parameter.
        in: query
        name: startingAfter
        schema:
          type: string
      - description: Pagination parameter indicating the cursor position to return
          results before. Used in conjunction with the 'limit' parameter. Mutually
          exclusive with 'startingAfter' parameter.
        in: query
        name: endingBefore
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
          description: Returns trailer assignment data for all trailers in your organization
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: List trailer assignments for all trailers
      tags:
      - Trailer Assignments
  /v1/fleet/trailers/{trailerId}/assignments:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch trailer assignment data for a single trailer.
      operationId: V1getFleetTrailerAssignments
      parameters:
      - description: ID of trailer. Must contain only digits 0-9.
        in: path
        name: trailerId
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in Unix epoch milliseconds representing the start of
          the period to fetch. Omitting both startMs and endMs only returns current
          assignments.
        in: query
        name: startMs
        schema:
          format: int64
          type: integer
      - description: Timestamp in Unix epoch milliseconds representing the end of
          the period to fetch. Omitting endMs sets endMs as the current time
        in: query
        name: endMs
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1TrailerAssignmentsResponse'
          description: Returns trailer assignment data for a single trailer
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: List trailer assignments for a given trailer
      tags:
      - Trailer Assignments
  /v1/fleet/trips:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
      operationId: V1getFleetTrips
      parameters:
      - description: Vehicle ID to query.
        in: query
        name: vehicleId
        required: true
        schema:
          format: int64
          type: integer
      - description: Beginning of the time range, specified in milliseconds UNIX time.
          Limited to a 90 day window with respect to startMs and endMs
        in: query
        name: startMs
        required: true
        schema:
          type: integer
      - description: End of the time range, specified in milliseconds UNIX time.
        in: query
        name: endMs
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1TripResponse'
          description: List of trips taken by the requested vehicle within the specified
            timeframe. Ongoing trips will be returned with 9223372036854775807 as
            their endMs.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get vehicle trips
      tags:
      - Trips
  /v1/fleet/vehicles/{vehicleId}/safety/harsh_event:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch harsh event details for a vehicle.
      operationId: V1getVehicleHarshEvent
      parameters:
      - description: ID of the vehicle. Must contain only digits 0-9.
        in: path
        name: vehicleId
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the timestamp of a harsh
          event.
        in: query
        name: timestamp
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1VehicleHarshEventResponse'
          description: Harsh event details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch harsh events
      tags:
      - Safety
  /v1/fleet/vehicles/{vehicleId}/safety/score:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch the safety score for the vehicle.
      operationId: V1getVehicleSafetyScore
      parameters:
      - description: ID of the vehicle. Must contain only digits 0-9.
        in: path
        name: vehicleId
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the start of the period
          to fetch, inclusive. Used in combination with endMs. Total duration (endMs
          - startMs) must be greater than or equal to 1 hour.
        in: query
        name: startMs
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in milliseconds representing the end of the period
          to fetch, inclusive. Used in combination with startMs. Total duration (endMs
          - startMs) must be greater than or equal to 1 hour.
        in: query
        name: endMs
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1VehicleSafetyScoreResponse'
          description: Safety score details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch vehicle safety scores
      tags:
      - Safety
  /v1/industrial/data:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch all of the data inputs.
      operationId: V1getAllDataInputs
      parameters:
      - description: Timestamp in unix milliseconds representing the start of the
          period to fetch, inclusive. Used in combination with endMs. defaults to
          nowMs.
        in: query
        name: startMs
        schema:
          format: int64
          type: integer
      - description: Timestamp in unix milliseconds representing the end of the period
          to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.
        in: query
        name: endMs
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
          description: List of data inputs.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get industrial data
      tags:
      - Industrial
  /v1/industrial/data/{data_input_id}:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch datapoints from a given data input.
      operationId: V1getDataInput
      parameters:
      - description: ID of the data input. Must contain only digits 0-9.
        in: path
        name: data_input_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Timestamp in unix milliseconds representing the start of the
          period to fetch, inclusive. Used in combination with endMs. defaults to
          nowMs.
        in: query
        name: startMs
        schema:
          format: int64
          type: integer
      - description: Timestamp in unix milliseconds representing the end of the period
          to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.
        in: query
        name: endMs
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DataInputHistoryResponse'
          description: Returns datapoints for the given data input
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get industrial data from a specific device
      tags:
      - Industrial
  /v1/industrial/vision/cameras:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch all cameras.
      operationId: V1getCameras
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1VisionCamerasResponse'
          description: Returns details about a camera.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch industrial cameras
      tags:
      - Industrial
  /v1/industrial/vision/cameras/{camera_id}/programs:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch configured programs on the camera.
      operationId: V1getVisionProgramsByCamera
      parameters:
      - description: The camera_id should be valid for the given accessToken.
        in: path
        name: camera_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ProgramsForTheCameraResponse'
          description: Returns programs configured on the camera.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch industrial camera programs
      tags:
      - Industrial
  /v1/industrial/vision/run/camera/{camera_id}:
    get:
      description: Fetch the latest run for a camera or program by default. If startedAtMs
        is supplied, fetch the specific run that corresponds to that start time.
      operationId: V1getVisionLatestRunCamera
      parameters:
      - description: The camera_id should be valid for the given accessToken.
        in: path
        name: camera_id
        required: true
        schema:
          format: int64
          type: integer
      - description: The configured program's ID on the camera.
        in: query
        name: program_id
        schema:
          format: int64
          type: integer
      - description: EndMs is an optional param. It will default to the current time.
        in: query
        name: startedAtMs
        schema:
          format: int64
          type: integer
      - description: Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.
        in: query
        name: include
        schema:
          type: string
      - description: Limit is an integer value from 1 to 1,000.
        in: query
        name: limit
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1VisionRunByCameraResponse'
          description: Returns the details for this run.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch the latest run for a camera or program
      tags:
      - Industrial
  /v1/industrial/vision/runs:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch runs.
      operationId: V1getVisionRuns
      parameters:
      - description: DurationMs is a required param. This works with the EndMs parameter.
          Indicates the duration in which the visionRuns will be fetched
        in: query
        name: durationMs
        required: true
        schema:
          format: int64
          type: integer
      - description: EndMs is an optional param. It will default to the current time.
        in: query
        name: endMs
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1VisionRunsResponse'
          description: Return runs.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch runs
      tags:
      - Industrial
  /v1/industrial/vision/runs/{camera_id}:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch runs by camera.
      operationId: getVisionRunsByCamera
      parameters:
      - description: The camera_id should be valid for the given accessToken.
        in: path
        name: camera_id
        required: true
        schema:
          format: int64
          type: integer
      - description: DurationMs is a required param. This works with the EndMs parameter.
          Indicates the duration in which the visionRuns will be fetched
        in: query
        name: durationMs
        required: true
        schema:
          format: int64
          type: integer
      - description: EndMs is an optional param. It will default to the current time.
        in: query
        name: endMs
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1VisionRunsByCameraResponse'
          description: Return runs by cameraId.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch runs by camera
      tags:
      - Industrial
  /v1/industrial/vision/runs/{camera_id}/{program_id}/{started_at_ms}:
    get:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Fetch runs by camera and program.
      operationId: V1getVisionRunsByCameraAndProgram
      parameters:
      - description: The camera_id should be valid for the given accessToken.
        in: path
        name: camera_id
        required: true
        schema:
          format: int64
          type: integer
      - description: The configured program's ID on the camera.
        in: path
        name: program_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Started_at_ms is a required param. Indicates the start time of
          the run to be fetched.
        in: path
        name: started_at_ms
        required: true
        schema:
          format: int64
          type: integer
      - description: Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.
        in: query
        name: include
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1VisionRunsByCameraAndProgramResponse'
          description: Return runs by camera ID and program ID.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Fetch runs by camera and program
      tags:
      - Industrial
  /v1/machines/history:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get historical data for machine objects. This method returns a set of historical data for all machines
      operationId: V1getMachinesHistory
      requestBody:
        $ref: '#/components/requestBodies/inline_object_6'
        content:
          application/json:
            schema:
              properties:
                endMs:
                  description: End of the time range, specified in milliseconds UNIX
                    time.
                  example: 1462881998034
                  type: integer
                startMs:
                  description: Beginning of the time range, specified in milliseconds
                    UNIX time.
                  example: 1462878398034
                  type: integer
              required:
              - endMs
              - startMs
              type: object
        description: Time range to query for events
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1MachineHistoryResponse'
          description: List of machine results objects, each containing a time and
            a datapoint.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get machine history
      tags:
      - Industrial
      x-codegen-request-body-name: historyParam
  /v1/machines/list:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.
      operationId: V1getMachines
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
          description: List of machine objects.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get machines
      tags:
      - Industrial
  /v1/sensors/cargo:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get cargo monitor status (empty / full) for requested sensors.
      operationId: V1getSensorsCargo
      requestBody:
        $ref: '#/components/requestBodies/inline_object_7'
        content:
          application/json:
            schema:
              properties:
                sensors:
                  description: List of sensor IDs to query.
                  example:
                  - 122
                  items:
                    format: int64
                    type: integer
                  type: array
              required:
              - sensors
              type: object
        description: List of sensor IDs to query.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1CargoResponse'
          description: List of sensor objects containing the current cargo status
            reported by each sensor.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get cargo status
      tags:
      - Sensors
      x-codegen-request-body-name: V1sensorParam
  /v1/sensors/door:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get door monitor status (closed / open) for requested sensors.
      operationId: V1getSensorsDoor
      requestBody:
        $ref: '#/components/requestBodies/inline_object_8'
        content:
          application/json:
            schema:
              properties:
                sensors:
                  description: List of sensor IDs to query.
                  example:
                  - 122
                  items:
                    format: int64
                    type: integer
                  type: array
              required:
              - sensors
              type: object
        description: List of sensor IDs to query.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DoorResponse'
          description: List of sensor objects containing the current door status reported
            by each sensor.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get door status
      tags:
      - Sensors
      x-codegen-request-body-name: V1sensorParam
  /v1/sensors/history:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
      operationId: V1getSensorsHistory
      requestBody:
        $ref: '#/components/requestBodies/inline_object_9'
        content:
          application/json:
            schema:
              properties:
                endMs:
                  description: End of the time range, specified in milliseconds UNIX
                    time.
                  example: 1462881998034
                  type: integer
                fillMissing:
                  default: withNull
                  enum:
                  - withNull
                  - withPrevious
                  type: string
                series:
                  items:
                    $ref: '#/components/schemas/_v1_sensors_history_series'
                  type: array
                startMs:
                  description: Beginning of the time range, specified in milliseconds
                    UNIX time.
                  example: 1462878398034
                  type: integer
                stepMs:
                  description: Time resolution for which data should be returned,
                    in milliseconds. Specifying 3600000 will return data at hour intervals.
                  example: 3600000
                  type: integer
              required:
              - endMs
              - series
              - startMs
              - stepMs
              type: object
        description: Time range and resolution, and list of sensor ID, field pairs
          to query.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1SensorHistoryResponse'
          description: List of results objects, each containing a time and a datapoint
            for each requested sensor/field pair.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get sensor history
      tags:
      - Sensors
      x-codegen-request-body-name: historyParam
  /v1/sensors/humidity:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
      operationId: V1getSensorsHumidity
      requestBody:
        $ref: '#/components/requestBodies/inline_object_10'
        content:
          application/json:
            schema:
              properties:
                sensors:
                  description: List of sensor IDs to query.
                  example:
                  - 122
                  items:
                    format: int64
                    type: integer
                  type: array
              required:
              - sensors
              type: object
        description: List of sensor IDs to query.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1HumidityResponse'
          description: List of sensor objects containing the current humidity reported
            by each sensor.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get humidity
      tags:
      - Sensors
      x-codegen-request-body-name: V1sensorParam
  /v1/sensors/list:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
      operationId: V1getSensors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
          description: List of sensor objects.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get all sensors
      tags:
      - Sensors
  /v1/sensors/temperature:
    post:
      description: |-
        <n class="warning">
        <nh>
        <i class="fa fa-exclamation-circle"></i>
        This endpoint is still on our legacy API.
        </nh>
        </n>

        Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
      operationId: V1getSensorsTemperature
      requestBody:
        $ref: '#/components/requestBodies/inline_object_11'
        content:
          application/json:
            schema:
              properties:
                sensors:
                  description: List of sensor IDs to query.
                  example:
                  - 122
                  items:
                    format: int64
                    type: integer
                  type: array
              required:
              - sensors
              type: object
        description: List of sensor IDs to query.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1TemperatureResponse'
          description: List of sensor objects containing the current temperature reported
            by each sensor.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
          description: Unexpected error.
      summary: Get temperature
      tags:
      - Sensors
      x-codegen-request-body-name: V1sensorParam
  /webhooks:
    post:
      description: Create a webhook
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookCreate'
        description: The webhook to create
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: The created webhook
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Unexepcted error.
      summary: Create a webhook
      tags:
      - Webhooks
      x-codegen-request-body-name: createWebhookBody
  /webhooks/{id}:
    post:
      description: Fire off a test event to a webhook.
      operationId: createWebhookPing
      parameters:
      - description: Unique identifier for the webhook.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Returns an empty success response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardErrorResponse'
          description: Unexpected error
      summary: Fire off a test event to a webhook.
      tags:
      - Webhooks
components:
  parameters:
    V1assetHistoryEndTimeParam:
      description: Timestamp in milliseconds representing the end of the period to
        fetch, inclusive. Used in combination with startMs.
      in: query
      name: endMs
      required: true
      schema:
        format: int64
        type: integer
    V1assetHistoryStartTimeParam:
      description: Timestamp in milliseconds representing the start of the period
        to fetch, inclusive. Used in combination with endMs.
      in: query
      name: startMs
      required: true
      schema:
        format: int64
        type: integer
    V1assetIdParam:
      description: ID of the asset. Must contain only digits 0-9.
      in: path
      name: asset_id
      required: true
      schema:
        format: int64
        type: integer
    V1dataInputEndTimeParam:
      description: Timestamp in unix milliseconds representing the end of the period
        to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.
      in: query
      name: endMs
      schema:
        format: int64
        type: integer
    V1dataInputIdParam:
      description: ID of the data input. Must contain only digits 0-9.
      in: path
      name: data_input_id
      required: true
      schema:
        format: int64
        type: integer
    V1dataInputStartTimeParam:
      description: Timestamp in unix milliseconds representing the start of the period
        to fetch, inclusive. Used in combination with endMs. defaults to nowMs.
      in: query
      name: startMs
      schema:
        format: int64
        type: integer
    V1documentQueryByParam:
      description: Retrieve most recent documents based on either driverCreatedAtMs
        or serverUpdatedAtMs. If no value is provided, the default is driverCreatedAtMs.
      in: query
      name: queryBy
      schema:
        enum:
        - created
        - updated
        format: string
        type: string
    V1documentsDurationMsParam:
      description: Time in milliseconds that represents the duration before endMs
        to query. Defaults to 24 hours.
      in: query
      name: durationMs
      schema:
        format: int64
        type: integer
    V1documentsEndMsParam:
      description: Time in unix milliseconds that represents the oldest documents
        to return. Used in combination with durationMs. Defaults to now.
      in: query
      name: endMs
      schema:
        format: int64
        type: integer
    V1getMessagesDurationMsParam:
      description: Time in milliseconds that represents the duration before endMs
        to query. Defaults to 24 hours.
      in: query
      name: durationMs
      schema:
        format: int64
        type: integer
    V1getMessagesEndMsParam:
      description: Time in unix milliseconds that represents the end of time range
        of messages to return. Used in combination with durationMs. Defaults to now.
      in: query
      name: endMs
      schema:
        format: int64
        type: integer
    V1harshEventMsParam:
      description: Timestamp in milliseconds representing the timestamp of a harsh
        event.
      in: query
      name: timestamp
      required: true
      schema:
        format: int64
        type: integer
    V1jobUpdatesIncludeParam:
      description: Optionally set include=route to include route object in response
        payload.
      in: query
      name: include
      schema:
        type: string
    V1lastReceivedSequenceIDParam:
      description: Sequence ID from the response payload of the last request. Defaults
        to fetching updates from last 24 hours.
      in: query
      name: sequence_id
      schema:
        type: string
    V1paginationEndingBeforeParam:
      description: Pagination parameter indicating the cursor position to return results
        before. Used in conjunction with the 'limit' parameter. Mutually exclusive
        with 'startingAfter' parameter.
      in: query
      name: endingBefore
      schema:
        type: string
    V1paginationLimitParam:
      description: Pagination parameter indicating the number of results to return
        in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.
      in: query
      name: limit
      schema:
        format: int64
        type: number
    V1paginationStartingAfterParam:
      description: Pagination parameter indicating the cursor position to continue
        returning results after. Used in conjunction with the 'limit' parameter. Mutually
        exclusive with 'endingBefore' parameter.
      in: query
      name: startingAfter
      schema:
        type: string
    V1routeDurationParam:
      description: Time in milliseconds that represents the duration before end_time
        to query. Defaults to 24 hours.
      in: query
      name: duration
      schema:
        format: int64
        type: integer
    V1routeEndTimeParam:
      description: Time in unix milliseconds that represents the end time of the requested
        time interval. See above for a description of how routes are returned. Defaults
        to now.
      in: query
      name: end_time
      schema:
        format: int64
        type: integer
    V1routeHistoryEndTimeParam:
      description: Timestamp representing the end of the period to fetch, inclusive.
        Used in combination with start_time. Defaults to nowMs.
      in: query
      name: end_time
      schema:
        format: int64
        type: integer
    V1routeHistoryStartTimeParam:
      description: Timestamp representing the start of the period to fetch, inclusive.
        Used in combination with end_time. Defaults to 0.
      in: query
      name: start_time
      schema:
        format: int64
        type: integer
    V1safetyScoreEndMsParam:
      description: Timestamp in milliseconds representing the end of the period to
        fetch, inclusive. Used in combination with startMs. Total duration (endMs
        - startMs) must be greater than or equal to 1 hour.
      in: query
      name: endMs
      required: true
      schema:
        format: int64
        type: integer
    V1safetyScoreStartMsParam:
      description: Timestamp in milliseconds representing the start of the period
        to fetch, inclusive. Used in combination with endMs. Total duration (endMs
        - startMs) must be greater than or equal to 1 hour.
      in: query
      name: startMs
      required: true
      schema:
        format: int64
        type: integer
    V1visionCameraIdParam:
      description: The camera_id should be valid for the given accessToken.
      in: path
      name: camera_id
      required: true
      schema:
        format: int64
        type: integer
    V1visionDurationMsParam:
      description: DurationMs is a required param. This works with the EndMs parameter.
        Indicates the duration in which the visionRuns will be fetched
      in: query
      name: durationMs
      required: true
      schema:
        format: int64
        type: integer
    V1visionEndMsParam:
      description: EndMs is an optional param. It will default to the current time.
      in: query
      name: endMs
      schema:
        format: int64
        type: integer
    V1visionIncludeParam:
      description: Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.
      in: query
      name: include
      schema:
        type: string
    V1visionLimitParam:
      description: Limit is an integer value from 1 to 1,000.
      in: query
      name: limit
      schema:
        format: int64
        type: integer
    V1visionProgramIdParam:
      description: The configured program's ID on the camera.
      in: query
      name: program_id
      schema:
        format: int64
        type: integer
    V1visionProgramIdPathParam:
      description: The configured program's ID on the camera.
      in: path
      name: program_id
      required: true
      schema:
        format: int64
        type: integer
    V1visionStartAtMsParam:
      description: EndMs is an optional param. It will default to the current time.
      in: query
      name: startedAtMs
      schema:
        format: int64
        type: integer
    V1visionStartAtMsPathParam:
      description: Started_at_ms is a required param. Indicates the start time of
        the run to be fetched.
      in: path
      name: started_at_ms
      required: true
      schema:
        format: int64
        type: integer
    documentTypeIdParam:
      description: A document type ID.
      in: query
      name: documentTypeId
      schema:
        type: string
    driverActivationStatusParam:
      description: If value is `deactivated`, only drivers that are deactivated will
        appear in the response. This parameter will default to `active` if not provided
        (fetching only active drivers).
      in: query
      name: driverActivationStatus
      schema:
        enum:
        - active
        - deactivated
        type: string
    endTimeParam:
      description: 'An end time in RFC 3339 format. Queries documents on createdAtTime.
        Defaults to startTime + 1 day if not specified. (Example: 2019-06-13T19:08:25Z).
        Time range cannot exceed 3 days (72 hours).'
      in: query
      name: endTime
      schema:
        format: date-time
        type: string
    endTimeQueryParam:
      description: 'End of the filter time range, specified in RFC 3339 format. (Example:
        2019-06-13T19:08:25Z) Filters based on the server timestamp, i.e. createAtTime.'
      in: query
      name: endTime
      schema:
        format: date-time
        type: string
    equipmentStatTypes:
      description: A comma separated list of stat types.
      explode: false
      in: query
      name: types
      schema:
        items:
          enum:
          - gatewayEngineStates
          - obdEngineStates
          - fuelPercents
          - engineRpm
          - gatewayEngineSeconds
          - obdEngineSeconds
          - gpsOdometerMeters
          format: string
          type: string
        type: array
      style: form
    isDeactivatedParam:
      description: If value is true, only drivers that are deactivated will appear
        in the response. This parameter will default to false if not provided (fetching
        only active drivers).
      in: query
      name: isDeactivated
      schema:
        type: boolean
    startTimeParam:
      description: 'A start time in RFC 3339 format. Queries documents on createdAtTime.
        Is required if an endTime is specified. Defaults to current time - 1 day if
        startTime and endTime are not provided. (Example: 2019-06-13T19:08:25Z).'
      in: query
      name: startTime
      schema:
        format: date-time
        type: string
    startTimeQueryParam:
      description: 'Beginning of the filter time range, specified in RFC 3339 format.
        (Example: 2019-06-13T18:08:25Z) Filters based on the server timestamp, i.e.
        createAtTime.'
      in: query
      name: startTime
      schema:
        format: date-time
        type: string
    vehicleStatTypes:
      description: |-
        The stat type you want this endpoint to return information on. Currently only one stat type is accepted per request.

        - `engineStates`: The state of the engine (`Off`, `On`, `Idle`).
        - `fuelPercents`: The engine fuel level in percentage points (e.g. `99`, `50`, etc).
        - `obdOdometerMeters`: The odometer reading according to on-board diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. In these cases, we recommend using `gpsOdometerMeters`.
        - `gpsOdometerMeters`: The odometer reading according to GPS calculations. This calculation is based off GPS distance traveled and a manual odometer offset for a given vehicle, specified by the user in Samsara's dashboard UI or through the `odometerMeters` field in the [PATCH /fleet/vehicles/{id}](#operation/updateVehicleById) endpoint. `gpsOdometerMeters` is equal to the manual offset plus the GPS distance traveled since the offset was set. The value for this stat type will be omitted if a manual offset is not provided for a given vehicle. *A manual offset can only be provided when we do not have diagnostic coverage for a particular vehicle.*
        - `obdEngineSeconds`: The cumulative number of seconds the engine has run according to on-board diagnostics.
        - `gpsDistanceMeters`: The distance the vehicle has traveled since the gateway was installed based on GPS calculations.
      explode: false
      in: query
      name: types
      required: true
      schema:
        items:
          enum:
          - engineStates
          - fuelPercents
          - obdOdometerMeters
          - gpsOdometerMeters
          - obdEngineSeconds
          - gpsDistanceMeters
          type: string
        type: array
      style: form
  requestBodies:
    V1createDvirParam:
      content:
        application/json:
          schema:
            properties:
              inspectionType:
                description: Only type 'mechanic' is currently accepted.
                enum:
                - mechanic
                example: mechanic
                type: string
              mechanicNotes:
                description: Any notes from the mechanic.
                example: Replaced headlight on passenger side.
                type: string
              odometerMiles:
                description: The current odometer of the vehicle.
                example: 38426
                type: integer
              previousDefectsCorrected:
                description: Whether any previous defects were corrected. If this
                  vehicle or trailer was previously marked unsafe, and this DVIR marks
                  it as safe, either previousDefectsCorrected or previousDefectsIgnored
                  must be true.
                example: true
                type: boolean
              previousDefectsIgnored:
                description: Whether any previous defects were ignored. If this vehicle
                  or trailer was previously marked unsafe, and this DVIR marks it
                  as safe, either previousDefectsCorrected or previousDefectsIgnored
                  must be true.
                example: false
                type: boolean
              resolvedDefectIds:
                description: List of defect IDs to resolve.  The defects must be associated
                  with the provided vehicle or trailer.
                example:
                - 18
                - 19
                items:
                  format: int64
                  type: integer
                type: array
              safe:
                description: Whether or not this vehicle or trailer is safe to drive.
                enum:
                - safe
                - unsafe
                example: safe
                type: string
              trailerId:
                description: Id of trailer being inspected. Either vehicleId or trailerId
                  must be provided.
                example: 11
                type: integer
              userEmail:
                description: The Samsara login email for the person creating the DVIR.
                  The email must correspond to a Samsara user's email.
                example: j.smith@yahoo.com
                type: string
              vehicleId:
                description: Id of vehicle being inspected. Either vehicleId or trailerId
                  must be provided.
                example: 10
                type: integer
            required:
            - inspectionType
            - safe
            - userEmail
            type: object
      description: DVIR creation body
      required: true
    V1createMessagesParam:
      content:
        application/json:
          schema:
            properties:
              driverIds:
                description: IDs of the drivers for whom the messages are sent to.
                example:
                - 111
                - 222
                - 333
                items:
                  example: 555.0
                  format: int64
                  type: number
                type: array
              text:
                description: The text sent in the message.
                example: This is a message.
                type: string
            required:
            - driverIds
            - text
            type: object
      description: Text to send to a list of driverIds.
      required: true
    V1documentCreateParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V1DocumentCreate'
      description: To create a document for a given document type, provide the `documentTypeUuid`
        of the type of document you'd like to create. Then, pass in the `fields` of
        the document in the same order that they show up in the given document type.
      required: true
    V1routeCreateParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V1DispatchRouteCreate'
      required: true
    V1routeUpdateParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V1DispatchRouteUpdate'
      required: true
    V1sensorParam:
      content:
        application/json:
          schema:
            properties:
              sensors:
                description: List of sensor IDs to query.
                example:
                - 122
                items:
                  format: int64
                  type: integer
                type: array
            required:
            - sensors
            type: object
      description: List of sensor IDs to query.
      required: true
    createMessagesParam:
      content:
        application/json:
          schema:
            properties:
              driverIds:
                description: IDs of the drivers for whom the messages are sent to.
                example:
                - 111
                - 222
                - 333
                items:
                  example: 555.0
                  format: int64
                  type: number
                type: array
              text:
                description: The text sent in the message.
                example: This is a message.
                maxLength: 65533
                minLength: 1
                type: string
            required:
            - driverIds
            - text
            type: object
      description: Text to send to a list of driverIds.
      required: true
    createRouteParam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateRouteRequest'
      description: Add a route.
      required: true
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: true
    inline_object_2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
      required: false
    inline_object_3:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
      required: true
    inline_object_4:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
      required: true
    inline_object_5:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_5'
      required: true
    inline_object_6:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_6'
      required: true
    inline_object_7:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_7'
      required: true
    inline_object_8:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_8'
      required: true
    inline_object_9:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_9'
      required: true
    inline_object_10:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_10'
      required: true
    inline_object_11:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_11'
      required: true
  schemas:
    Address:
      description: An Address object.
      example:
        notes: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
          street side.'
        formattedAddress: 350 Rhode Island St, San Francisco, CA
        geofence:
          polygon:
            vertices:
            - latitude: 37.765363
              longitude: -122.403098
            - latitude: 38.765363
              longitude: -122.403098
            - latitude: 37.765363
              longitude: -123.403098
          circle:
            latitude: 37.765363
            radiusMeters: 25
            longitude: -122.4029238
        latitude: 37.765363
        externalIds:
          maintenanceId: "250020"
          payrollId: ABFS18600
        name: Samsara HQ
        id: "22408"
        addressTypes:
        - yard
        - yard
        contacts:
        - firstName: Jane
          lastName: Jones
          id: "22408"
        - firstName: Jane
          lastName: Jones
          id: "22408"
        longitude: -122.4029238
        tags:
        - parentTagId: "4815"
          name: East Coast
          id: "3914"
        - parentTagId: "4815"
          name: East Coast
          id: "3914"
      properties:
        addressTypes:
          description: Reporting location type associated with the address (used for
            ELD reporting purposes).
          items:
            enum:
            - yard
            - shortHaul
            example: yard
            type: string
          type: array
        contacts:
          description: An array Contact mini-objects that are associated the Address.
          items:
            $ref: '#/components/schemas/contactTinyResponse'
          type: array
        externalIds:
          additionalProperties:
            type: string
          description: The [external IDs](https://developers.samsara.com/docs/external-ids)
            for the given object.
          example:
            maintenanceId: "250020"
            payrollId: ABFS18600
          type: object
        formattedAddress:
          description: The full street address for this address/geofence, as it might
            be recognized by Google Maps.
          example: 350 Rhode Island St, San Francisco, CA
          maxLength: 1024
          type: string
        geofence:
          $ref: '#/components/schemas/AddressGeofence'
        id:
          description: ID of the Address.
          example: "22408"
          type: string
        latitude:
          description: Latitude of the address. Will be geocoded from `formattedAddress`
            if not provided.
          example: 37.765363
          format: double
          type: number
        longitude:
          description: Longitude of the address. Will be geocoded from `formattedAddress`
            if not provided.
          example: -122.4029238
          format: double
          type: number
        name:
          description: Name of the address.
          example: Samsara HQ
          maxLength: 255
          type: string
        notes:
          description: Notes about the address.
          example: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
            street side.'
          maxLength: 280
          type: string
        tags:
          description: An array of all tag mini-objects that are associated with the
            given address entry.
          items:
            $ref: '#/components/schemas/tagTinyResponse'
          type: array
      required:
      - formattedAddress
      - geofence
      - id
      - name
      type: object
    AddressContactIds:
      description: An array of Contact IDs associated with this Address.
      items:
        example: "22408"
        type: string
      type: array
    AddressContacts:
      description: An array Contact mini-objects that are associated the Address.
      items:
        $ref: '#/components/schemas/contactTinyResponse'
      type: array
    AddressExternalIds:
      $ref: '#/components/schemas/externalIds'
    AddressFormattedAddress:
      description: The full street address for this address/geofence, as it might
        be recognized by Google Maps.
      example: 350 Rhode Island St, San Francisco, CA
      maxLength: 1024
      type: string
    AddressGeofence:
      description: The geofence that defines this address and its bounds. This can
        either be a circle or a polygon, but not both.
      example:
        polygon:
          vertices:
          - latitude: 37.765363
            longitude: -122.403098
          - latitude: 38.765363
            longitude: -122.403098
          - latitude: 37.765363
            longitude: -123.403098
        circle:
          latitude: 37.765363
          radiusMeters: 25
          longitude: -122.4029238
      properties:
        circle:
          $ref: '#/components/schemas/AddressGeofence_circle'
        polygon:
          $ref: '#/components/schemas/AddressGeofence_polygon'
      type: object
    AddressId:
      description: ID of the Address.
      example: "22408"
      type: string
    AddressLatitude:
      description: Latitude of the address. Will be geocoded from `formattedAddress`
        if not provided.
      example: 37.765363
      format: double
      type: number
    AddressLongitude:
      description: Longitude of the address. Will be geocoded from `formattedAddress`
        if not provided.
      example: -122.4029238
      format: double
      type: number
    AddressName:
      description: Name of the address.
      example: Samsara HQ
      maxLength: 255
      type: string
    AddressNotes:
      description: Notes about the address.
      example: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
        street side.'
      maxLength: 280
      type: string
    AddressResponse:
      description: An Address response body.
      example:
        data:
          notes: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
            street side.'
          formattedAddress: 350 Rhode Island St, San Francisco, CA
          geofence:
            polygon:
              vertices:
              - latitude: 37.765363
                longitude: -122.403098
              - latitude: 38.765363
                longitude: -122.403098
              - latitude: 37.765363
                longitude: -123.403098
            circle:
              latitude: 37.765363
              radiusMeters: 25
              longitude: -122.4029238
          latitude: 37.765363
          externalIds:
            maintenanceId: "250020"
            payrollId: ABFS18600
          name: Samsara HQ
          id: "22408"
          addressTypes:
          - yard
          - yard
          contacts:
          - firstName: Jane
            lastName: Jones
            id: "22408"
          - firstName: Jane
            lastName: Jones
            id: "22408"
          longitude: -122.4029238
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
      properties:
        data:
          $ref: '#/components/schemas/Address'
      required:
      - data
      type: object
    AddressTagIds:
      description: An array of IDs of tags to associate with this address.
      items:
        example: "3914"
        type: string
      type: array
    AddressTags:
      description: An array of all tag mini-objects that are associated with the given
        address entry.
      items:
        $ref: '#/components/schemas/tagTinyResponse'
      type: array
    AddressTypes:
      description: Reporting location type associated with the address (used for ELD
        reporting purposes).
      items:
        enum:
        - yard
        - shortHaul
        example: yard
        type: string
      type: array
    CarrierProposedAssignment:
      description: A carrier proposed assignment object
      example:
        shippingDocs: Delivery 123, chips and soda
        rejectedTime: 2020-01-27T07:06:25Z
        acceptedTime: 2020-01-27T07:06:25Z
        activeTime: 2020-01-27T07:06:25Z
        firstSeenTime: 2020-01-27T07:06:25Z
        uuid: 08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d
        trailers:
        - name: 'Midwest Trailer #5'
        - name: 'Midwest Trailer #5'
      properties:
        acceptedTime:
          description: 'Time when the driver accepted this assignment in the mobile
            app. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        activeTime:
          description: 'Time after which this assignment will be active and visible
            to the driver on the mobile app. Not setting it makes it active now. UTC
            timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        firstSeenTime:
          description: 'Time when the driver first saw this assignment in the mobile
            app. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        rejectedTime:
          description: 'Time when the driver rejected this assignment in the mobile
            app. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        shippingDocs:
          description: Shipping Documents that this assignment will propose to the
            driver.
          example: Delivery 123, chips and soda
          type: string
        trailers:
          description: Trailers that this assignment will propose to the driver.
          items:
            $ref: '#/components/schemas/trailerNameOnlyResponse'
          type: array
        uuid:
          description: Samsara ID for the assignment.
          example: 08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d
          type: string
        vehicle:
          $ref: '#/components/schemas/CarrierProposedAssignmentVehicle'
      required:
      - activeTime
      - uuid
      type: object
    CarrierProposedAssignmentAcceptedTime:
      description: 'Time when the driver accepted this assignment in the mobile app.
        UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
      example: 2020-01-27T07:06:25Z
      format: date-time
      type: string
    CarrierProposedAssignmentActiveTime:
      description: 'Time after which this assignment will be active and visible to
        the driver on the mobile app. Not setting it makes it active now. UTC timestamp
        in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
      example: 2020-01-27T07:06:25Z
      format: date-time
      type: string
    CarrierProposedAssignmentDriverId:
      description: Samsara ID for the driver that this assignment is for.
      example: "42"
      type: string
    CarrierProposedAssignmentFirstSeenTime:
      description: 'Time when the driver first saw this assignment in the mobile app.
        UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
      example: 2020-01-27T07:06:25Z
      format: date-time
      type: string
    CarrierProposedAssignmentRejectedTime:
      description: 'Time when the driver rejected this assignment in the mobile app.
        UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
      example: 2020-01-27T07:06:25Z
      format: date-time
      type: string
    CarrierProposedAssignmentResponse:
      description: A carrier-proposed assignment response object.
      example:
        data:
          shippingDocs: Delivery 123, chips and soda
          rejectedTime: 2020-01-27T07:06:25Z
          acceptedTime: 2020-01-27T07:06:25Z
          activeTime: 2020-01-27T07:06:25Z
          firstSeenTime: 2020-01-27T07:06:25Z
          uuid: 08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d
          trailers:
          - name: 'Midwest Trailer #5'
          - name: 'Midwest Trailer #5'
      properties:
        data:
          $ref: '#/components/schemas/CarrierProposedAssignment'
      required:
      - data
      type: object
    CarrierProposedAssignmentShippingDocs:
      description: Shipping Documents that this assignment will propose to the driver.
      example: Delivery 123, chips and soda
      type: string
    CarrierProposedAssignmentTrailerNames:
      description: Names of trailers to propose.
      example:
      - Trailer123
      - TrailerABC
      items:
        type: string
      type: array
    CarrierProposedAssignmentTrailers:
      description: Trailers that this assignment will propose to the driver.
      items:
        $ref: '#/components/schemas/trailerNameOnlyResponse'
      type: array
    CarrierProposedAssignmentUuid:
      description: Samsara ID for the assignment.
      example: 08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d
      type: string
    CarrierProposedAssignmentVehicle:
      allOf:
      - description: Vehicle that this assignment will propose to the driver.
        type: object
      - $ref: '#/components/schemas/vehicleTinyResponse'
    CarrierProposedAssignmentVehicleId:
      description: Samsara ID for the vehicle to propose.
      example: "123"
      type: string
    Contact:
      description: Information about a notification contact for alerts.
      example:
        firstName: Jane
        lastName: Jones
        phone: 111-222-3344
        id: "22408"
        email: jane.jones@yahoo.com
      properties:
        email:
          description: Email address of the contact.
          example: jane.jones@yahoo.com
          maxLength: 255
          type: string
        firstName:
          description: First name of the contact.
          example: Jane
          maxLength: 255
          type: string
        id:
          description: ID of the contact.
          example: "22408"
          type: string
        lastName:
          description: Last name of the contact.
          example: Jones
          maxLength: 255
          type: string
        phone:
          description: Phone number of the contact.
          example: 111-222-3344
          maxLength: 255
          type: string
      required:
      - email
      - firstName
      - id
      - lastName
      - phone
      type: object
    ContactEmail:
      description: Email address of the contact.
      example: jane.jones@yahoo.com
      maxLength: 255
      type: string
    ContactFirstName:
      description: First name of the contact.
      example: Jane
      maxLength: 255
      type: string
    ContactId:
      description: ID of the contact.
      example: "22408"
      type: string
    ContactLastName:
      description: Last name of the contact.
      example: Jones
      maxLength: 255
      type: string
    ContactPhone:
      description: Phone number of the contact.
      example: 111-222-3344
      maxLength: 255
      type: string
    ContactResponse:
      description: A single contact.
      example:
        data:
          firstName: Jane
          lastName: Jones
          phone: 111-222-3344
          id: "22408"
          email: jane.jones@yahoo.com
      properties:
        data:
          $ref: '#/components/schemas/Contact'
      type: object
    CreateAddressRequest:
      description: A request body to create an Address.
      example:
        notes: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
          street side.'
        formattedAddress: 350 Rhode Island St, San Francisco, CA
        geofence:
          polygon:
            vertices:
            - latitude: 37.765363
              longitude: -122.403098
            - latitude: 38.765363
              longitude: -122.403098
            - latitude: 37.765363
              longitude: -123.403098
          circle:
            latitude: 37.765363
            radiusMeters: 25
            longitude: -122.4029238
        latitude: 37.765363
        tagIds:
        - "3914"
        - "3914"
        externalIds:
          maintenanceId: "250020"
          payrollId: ABFS18600
        name: Samsara HQ
        addressTypes:
        - yard
        - yard
        contactIds:
        - "22408"
        - "22408"
        longitude: -122.4029238
      properties:
        addressTypes:
          description: Reporting location type associated with the address (used for
            ELD reporting purposes).
          items:
            enum:
            - yard
            - shortHaul
            example: yard
            type: string
          type: array
        contactIds:
          description: An array of Contact IDs associated with this Address.
          items:
            example: "22408"
            type: string
          type: array
        externalIds:
          additionalProperties:
            type: string
          description: The [external IDs](https://developers.samsara.com/docs/external-ids)
            for the given object.
          example:
            maintenanceId: "250020"
            payrollId: ABFS18600
          type: object
        formattedAddress:
          description: The full street address for this address/geofence, as it might
            be recognized by Google Maps.
          example: 350 Rhode Island St, San Francisco, CA
          maxLength: 1024
          type: string
        geofence:
          $ref: '#/components/schemas/AddressGeofence'
        latitude:
          description: Latitude of the address. Will be geocoded from `formattedAddress`
            if not provided.
          example: 37.765363
          format: double
          type: number
        longitude:
          description: Longitude of the address. Will be geocoded from `formattedAddress`
            if not provided.
          example: -122.4029238
          format: double
          type: number
        name:
          description: Name of the address.
          example: Samsara HQ
          maxLength: 255
          type: string
        notes:
          description: Notes about the address.
          example: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
            street side.'
          maxLength: 280
          type: string
        tagIds:
          description: An array of IDs of tags to associate with this address.
          items:
            example: "3914"
            type: string
          type: array
      required:
      - formattedAddress
      - geofence
      - name
      type: object
    CreateCarrierProposedAssignmentRequest:
      description: New assignment for a driver.
      example:
        shippingDocs: Delivery 123, chips and soda
        driverId: "42"
        trailerNames:
        - Trailer123
        - TrailerABC
        activeTime: 2020-01-27T07:06:25Z
        vehicleId: "123"
      properties:
        activeTime:
          description: 'Time after which this assignment will be active and visible
            to the driver on the mobile app. Not setting it makes it active now. UTC
            timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        driverId:
          description: Samsara ID for the driver that this assignment is for.
          example: "42"
          type: string
        shippingDocs:
          description: Shipping Documents that this assignment will propose to the
            driver.
          example: Delivery 123, chips and soda
          type: string
        trailerNames:
          description: Names of trailers to propose.
          example:
          - Trailer123
          - TrailerABC
          items:
            type: string
          type: array
        vehicleId:
          description: Samsara ID for the vehicle to propose.
          example: "123"
          type: string
      required:
      - driverId
      - vehicleId
      type: object
    CreateContactRequest:
      description: Information for adding a notification contact for alerts.
      example:
        firstName: Jane
        lastName: Jones
        phone: 111-222-3344
        email: jane.jones@yahoo.com
      properties:
        email:
          description: Email address of the contact.
          example: jane.jones@yahoo.com
          maxLength: 255
          type: string
        firstName:
          description: First name of the contact.
          example: Jane
          maxLength: 255
          type: string
        lastName:
          description: Last name of the contact.
          example: Jones
          maxLength: 255
          type: string
        phone:
          description: Phone number of the contact.
          example: 111-222-3344
          maxLength: 255
          type: string
      type: object
    CreateDriverRequest:
      description: Driver that should be created.
      example:
        eldAdverseWeatherExemptionEnabled: false
        eldExemptReason: Bad driver
        notes: Also goes by the nickname Furious Fred.
        eldYmEnabled: false
        licenseState: CA
        staticAssignedVehicleId: "456"
        timezone: America/Los_Angeles
        eldDayStartHour: 0
        tagIds:
        - "147"
        - "147"
        externalIds:
          maintenanceId: "250020"
          payrollId: ABFS18600
        vehicleGroupTagId: "342417"
        eldExempt: false
        carrierSettings:
          carrierName: Acme Inc.
          mainOfficeAddress: 1234 Pear St., Scranton, PA 62814
          dotNumber: 98231
        eldPcEnabled: false
        eldBigDayExemptionEnabled: false
        tachographCardNumber: "1000000492436002"
        password: aSecurePassword1234
        phone: "5558234327"
        name: Susan Jones
        licenseNumber: E1234567
        username: SusanJones
      properties:
        carrierSettings:
          $ref: '#/components/schemas/DriverCarrierSettings'
        eldAdverseWeatherExemptionEnabled:
          default: false
          description: Flag indicating this driver may use Adverse Weather exemptions
            in ELD logs.
          type: boolean
        eldBigDayExemptionEnabled:
          default: false
          description: Flag indicating this driver may use Big Day exemption in ELD
            logs.
          type: boolean
        eldDayStartHour:
          default: 0
          description: '`0` indicating midnight-to-midnight ELD driving hours, `12`
            to indicate noon-to-noon driving hours.'
          type: integer
        eldExempt:
          default: false
          description: Flag indicating this driver is exempt from the Electronic Logging
            Mandate.
          type: boolean
        eldExemptReason:
          description: Reason that this driver is exempt from the Electronic Logging
            Mandate (see eldExempt).
          example: Bad driver
          type: string
        eldPcEnabled:
          default: false
          description: Flag indicating this driver may select the Personal Conveyance
            duty status in ELD logs.
          type: boolean
        eldYmEnabled:
          default: false
          description: Flag indicating this driver may select the Personal Conveyance
            duty status in ELD logs.
          type: boolean
        externalIds:
          additionalProperties:
            type: string
          description: The [external IDs](https://developers.samsara.com/docs/external-ids)
            for the given object.
          example:
            maintenanceId: "250020"
            payrollId: ABFS18600
          type: object
        licenseNumber:
          description: Driver's state issued license number. The combination of this
            number and `licenseState` must be unique.
          example: E1234567
          type: string
        licenseState:
          description: Abbreviation of state that issued driver's license.
          example: CA
          type: string
        locale:
          $ref: '#/components/schemas/DriverLocale'
        name:
          description: Driver's name.
          example: Susan Jones
          maxLength: 255
          minLength: 1
          type: string
        notes:
          description: Notes about the driver.
          example: Also goes by the nickname Furious Fred.
          maxLength: 4096
          type: string
        password:
          description: Password that the driver can use to login to the Samsara driver
            app.
          example: aSecurePassword1234
          type: string
        phone:
          description: Phone number of the driver.
          example: "5558234327"
          maxLength: 255
          type: string
        staticAssignedVehicleId:
          description: ID of vehicle that the driver is permanently assigned to. (uncommon).
          example: "456"
          type: string
        tachographCardNumber:
          description: Driver's assigned tachograph card number (Europe specific)
          example: "1000000492436002"
          type: string
        tagIds:
          description: IDs of tags the driver is associated with.
          items:
            example: "147"
            type: string
          type: array
        timezone:
          default: America/Los_Angeles
          description: Home terminal timezone, in order to indicate what time zone
            should be used to calculate the ELD logs. Driver timezones use [IANA timezone
            database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`,
            `America/New_York`, `Europe/London`, etc.). You can find a mapping of
            common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
          example: America/Los_Angeles
          type: string
        username:
          description: Driver's login username into the driver app. The username may
            not contain spaces or the '@' symbol. The username must be unique.
          example: SusanJones
          maxLength: 189
          minLength: 1
          type: string
        vehicleGroupTagId:
          description: Tag ID which determines which vehicles a driver will see when
            selecting vehicles.
          example: "342417"
          type: string
      required:
      - name
      - password
      - username
      type: object
    CreateDvirRequest:
      description: DVIR creation body
      example:
        safetyStatus: safe
        licensePlate: XHK1234
        location: 350 Rhode Island St Ste. 400S, San Francisco, CA 94103
        odometerMeters: 14010293
        vehicleId: "10"
        authorId: "11"
        type: mechanic
        resolvedDefectIds:
        - resolvedDefectIds
        - resolvedDefectIds
        trailerId: "11"
        mechanicNotes: Replaced headlight on passenger side.
      properties:
        authorId:
          description: Samsara user ID of the mechanic creating the DVIR.
          example: "11"
          type: string
        licensePlate:
          description: The license plate of this vehicle.
          example: XHK1234
          maxLength: 12
          type: string
        location:
          description: Optional string if your jurisdiction requires a location of
            the DVIR.
          example: 350 Rhode Island St Ste. 400S, San Francisco, CA 94103
          type: string
        mechanicNotes:
          description: The mechanics notes on the DVIR.
          example: Replaced headlight on passenger side.
          type: string
        odometerMeters:
          description: The odometer reading in meters.
          example: 14010293
          type: integer
        resolvedDefectIds:
          description: Array of ids for defects being resolved with this DVIR.
          items:
            type: string
          type: array
        safetyStatus:
          description: Whether or not this vehicle or trailer is safe to drive.
          enum:
          - safe
          - unsafe
          example: safe
          type: string
        trailerId:
          description: Id of trailer being inspected. Either vehicleId or trailerId
            must be provided.
          example: "11"
          type: string
        type:
          description: Only type 'mechanic' is currently accepted.
          enum:
          - mechanic
          example: mechanic
          type: string
        vehicleId:
          description: Id of vehicle being inspected. Either vehicleId or trailerId
            must be provided.
          example: "10"
          type: string
      required:
      - authorId
      - safetyStatus
      - type
      type: object
    CreateRouteRequest:
      description: Route creation request.
      example:
        notes: These are some notes about the route.
        routeStops:
        - notes: Don't talk about pizza toppings with the pineapples
          stopLocation:
            formattedAddress: 350 Rhode Island St, San Francisco, CA
            latitude: 37.765363
            name: Samsara
            id: "123"
            longitude: -122.403098
          scheduledDepartureTime: 2006-01-02T15:04:05+07:00
          scheduledArrivalTime: 2006-01-02T15:04:05+07:00
        - notes: Don't talk about pizza toppings with the pineapples
          stopLocation:
            formattedAddress: 350 Rhode Island St, San Francisco, CA
            latitude: 37.765363
            name: Samsara
            id: "123"
            longitude: -122.403098
          scheduledDepartureTime: 2006-01-02T15:04:05+07:00
          scheduledArrivalTime: 2006-01-02T15:04:05+07:00
        assignedDriverId: "123"
        name: Mail Delivery Route
        assignedVehicleId: "321"
        plannedMeters: 100000.0
      properties:
        assignedDriverId:
          description: If the route should be assigned to a driver, the ID of that
            driver.
          example: "123"
          type: string
        assignedVehicleId:
          description: If the route should be assigned to a vehicle, the ID of that
            vehicle.
          example: "321"
          type: string
        name:
          description: Name of the route.
          example: Mail Delivery Route
          type: string
        notes:
          description: Notes about the route.
          example: These are some notes about the route.
          type: string
        plannedMeters:
          description: The number of meters that are planned to be driven during this
            route.
          example: 100000.0
          type: number
        routeStops:
          description: The route stops in the route. Stops will be ordered by `scheduledArrivalTime`.
            The start location of the route (stop with earliest `scheduledDepartureTime`)
            should not have `scheduledArrivalTime` populated. All other stops should
            `scheduledArrivalTime` and may optionally have `scheduledDepartureTime`
            populated.
          items:
            $ref: '#/components/schemas/CreateRouteStopRequest'
          type: array
      type: object
    CreateRouteStopRequest:
      description: A single route stop for a route.
      example:
        notes: Don't talk about pizza toppings with the pineapples
        stopLocation:
          formattedAddress: 350 Rhode Island St, San Francisco, CA
          latitude: 37.765363
          name: Samsara
          id: "123"
          longitude: -122.403098
        scheduledDepartureTime: 2006-01-02T15:04:05+07:00
        scheduledArrivalTime: 2006-01-02T15:04:05+07:00
      properties:
        notes:
          description: Route stop notes.
          example: Don't talk about pizza toppings with the pineapples
          maxLength: 2000
          type: string
        scheduledArrivalTime:
          description: Scheduled arrival time for the route stop in RFC 3339 format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        scheduledDepartureTime:
          description: Scheduled departure time for the route stop in RFC 3339 format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        stopLocation:
          $ref: '#/components/schemas/RouteLocation'
      type: object
    CreateTagRequest:
      example:
        addresses:
        - "23502866574"
        - "23502866574"
        assets:
        - "23502866574"
        - "23502866574"
        sensors:
        - "23502866574"
        - "23502866574"
        parentTagId: "4815"
        name: California
        vehicles:
        - "23502866574"
        - "23502866574"
        machines:
        - "23502866574"
        - "23502866574"
        drivers:
        - "23502866574"
        - "23502866574"
      properties:
        addresses:
          description: The addresses that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        assets:
          description: The trailers, unpowered, and powered assets that belong to
            this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        drivers:
          description: The drivers that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        machines:
          description: The machines that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        name:
          description: Name of this tag.
          example: California
          maxLength: 191
          minLength: 1
          type: string
        parentTagId:
          description: If this tag is part a hierarchical tag tree, this is the ID
            of the parent tag, otherwise this will be omitted.
          example: "4815"
          type: string
        sensors:
          description: The sensors that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        vehicles:
          description: The vehicles that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
      required:
      - name
      type: object
    CreateUserRequest:
      description: The user creation arguments
      example:
        roles:
        - tagId: "3914"
          roleId: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
        - tagId: "3914"
          roleId: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
        name: Bob Smith
        email: user@company.com
      properties:
        authType:
          $ref: '#/components/schemas/UserAuthType'
        email:
          description: The email address of this user.
          example: user@company.com
          type: string
        name:
          description: The first and last name of the user.
          example: Bob Smith
          type: string
        roles:
          description: The list of roles that applies to this user. A user may have
            "organizational" roles, which apply to the user at the organizational
            level, and "tag-specific" roles, which apply to the user for a given tag.
          items:
            $ref: '#/components/schemas/UserRoleAssignmentRequest'
          type: array
      required:
      - authType
      - email
      - name
      - roles
      type: object
    DataInputListResponse:
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - null
        - null
      properties:
        data:
          description: An array of data input data points. Each object in the array
            represents a data input and will contain its associated data points.
          items:
            $ref: '#/components/schemas/DataInputResponse'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      type: object
    DataInputResponse:
      allOf:
      - $ref: '#/components/schemas/DataInputTinyResponse'
      - $ref: '#/components/schemas/DataInputResponse_allOf'
    DataInputSnapshot:
      allOf:
      - $ref: '#/components/schemas/DataInputTinyResponse'
      - $ref: '#/components/schemas/DataInputSnapshot_allOf'
    DataInputSnapshotResponse:
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - null
        - null
      properties:
        data:
          description: An array of data inputs' latest data points. Each object in
            the array represents a data input and its most recent data point.
          items:
            $ref: '#/components/schemas/DataInputSnapshot'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      type: object
    DataInputTinyResponse:
      description: A minified data input object
      properties:
        id:
          description: Unique identifier for the data input.
          format: uuid
          type: string
        name:
          description: Name of this data input.
          example: Pump Flow
          format: string
          type: string
        units:
          description: Units of data for this data input.
          example: Gallons Per Minute
          format: string
          type: string
      type: object
    Defect:
      properties:
        comment:
          description: Comment on the defect.
          example: Air Compressor not working
          type: string
        createdAtTime:
          description: 'Time when the defect was created. UTC timestamp in RFC 3339
            format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          type: string
        defectType:
          description: The type of DVIR defect.
          example: Air Compressor
          type: string
        id:
          description: ID of the defect.
          example: "18"
          type: string
        isResolved:
          description: Signifies if this defect is resolved.
          example: true
          type: boolean
        resolvedAtTime:
          description: 'Time when this defect was resolved. Will not be returned if
            the defect is unresolved. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          type: string
        resolvedBy:
          $ref: '#/components/schemas/Defect_resolvedBy'
        trailer:
          allOf:
          - description: The trailer this defect was submitted for.
            type: object
          - $ref: '#/definitions/trailerTinyResponse'
          type: object
        vehicle:
          allOf:
          - description: The vehicle this defect was submitted for.
            type: object
          - $ref: '#/definitions/vehicleTinyResponse'
          type: object
      required:
      - id
      - isResolved
      type: object
    DefectPatch:
      description: Information about resolving a defect.
      example:
        resolvedAtTime: 2020-01-27T07:06:25Z
        authorId: "11"
        isResolved: true
      properties:
        authorId:
          description: The user who is resolving the defect.
          example: "11"
          type: string
        isResolved:
          description: Resolves the defect. Must be `true`.
          type: boolean
        resolvedAtTime:
          description: 'Time when defect was resolved. Defaults to now if not provided.
            UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          type: string
      required:
      - authorId
      - isResolved
      type: object
    Document:
      description: Document
      example:
        notes: notes
        driver:
          name: Susan Bob
          id: "88668"
        documentType:
          name: "112"
          id: "112"
        routeStop:
          name: Sam Ave
          id: "112"
        updatedAtTime: 2006-01-02T15:04:05Z07:00
        createdAtTime: 2006-01-02T15:04:05Z07:00
        id: id
        state: submitted
        fields:
        - label: label
          fieldType: string
          value: value
        - label: label
          fieldType: string
          value: value
        vehicle:
          name: 'Midwest Truck #4'
          id: "123456789"
      properties:
        createdAtTime:
          description: Time the document was created in RFC 3339 format.
          example: 2006-01-02T15:04:05Z07:00
          type: string
        documentType:
          $ref: '#/components/schemas/documentTypeTinyResponse'
        driver:
          $ref: '#/components/schemas/driverTinyResponse'
        fields:
          description: The fields associated with this document.
          items:
            $ref: '#/components/schemas/Document_fields'
          type: array
        id:
          description: Unique Samsara UUID for the document
          type: string
        notes:
          description: Notes on the document.
          maxLength: 2000
          type: string
        routeStop:
          $ref: '#/components/schemas/routeStopTinyResponse'
        state:
          default: required
          description: The condition of the document created for the driver. Can be
            either `required` or `submitted`, if no value is specified, `state` defaults
            to `required`. `required` documents are pre-populated documents for the
            Driver to fill out in the Driver App.
          enum:
          - required
          - submitted
          example: submitted
          type: string
        updatedAtTime:
          description: Time the document was updated in RFC 3339 format.
          example: 2006-01-02T15:04:05Z07:00
          type: string
        vehicle:
          $ref: '#/components/schemas/vehicleTinyResponse'
      type: object
    DocumentCreate:
      description: The document creation arguments
      example:
        documentTypeId: 52be1982-06c0-497d-9f98-ac10b64eff1d
        driverId: "88668"
        fields:
        - fieldType: string
          label: 'Load #'
          value: "0100748"
        - fieldType: number
          label: Load Weight
          value: 1234
        - fieldType: multipleChoice
          label: Did you drop the trailer?
          value:
          - label: "Yes"
            selected: false
          - label: "No"
            selected: true
        notes: example document notes
        routeStopId: "112"
        state: required
      properties:
        documentTypeId:
          description: Unique Samsara ID for the document type.
          example: 52be1982-06c0-497d-9f98-ac10b64eff1d
          type: string
        driverId:
          description: ID of the driver.
          example: "88668"
          type: string
        fields:
          description: The fields associated with the new document. The fields must
            be listed in the order that that they appear in the specified document
            type.
          items:
            $ref: '#/components/schemas/DocumentCreate_fields'
          type: array
        notes:
          description: Notes
          maxLength: 2000
          type: string
        routeStopId:
          description: Unique Samsara ID for the route stop.
          example: "112"
          type: string
        state:
          default: required
          description: The condition of the document created for the driver. Can be
            either `required` or `submitted`, if no value is specified, `state` defaults
            to `required`. `required` documents are pre-populated documents for the
            Driver to fill out in the Driver App.
          enum:
          - required
          - submitted
          example: submitted
          type: string
      required:
      - documentTypeId
      - driverId
      type: object
    DocumentField:
      properties:
        fieldType:
          description: The kind of value that can be submitted for this field.
          enum:
          - number
          - string
          - photo
          - multipleChoice
          - signature
          example: number
          type: string
        label:
          description: Descriptive name of this field.
          example: Fuel Cost ($)
          type: string
        multipleChoiceMetadata:
          $ref: '#/components/schemas/DocumentField_multipleChoiceMetadata'
        numberMetadata:
          $ref: '#/components/schemas/DocumentField_numberMetadata'
        signatureMetadata:
          $ref: '#/components/schemas/DocumentField_signatureMetadata'
      required:
      - fieldType
      - label
      type: object
    DocumentType:
      description: A document type
      properties:
        fields:
          description: The fields determine the names of fields for this document
            type. They also determine the types of values a document submitted for
            this document type can have.
          items:
            $ref: '#/components/schemas/DocumentField'
          type: array
        id:
          description: Universally unique identifier for the document type. Can be
            passed in as a documentTypeId when creating a document for this document
            type.
          example: b6199cf8-3073-441c-9b04-524fb2bb120d
          type: string
        name:
          description: Name of the document type.
          example: Fuel Receipt
          type: string
      type: object
    Driver:
      description: A driver object
      example:
        eldExemptReason: Bad driver
        notes: Also goes by the nickname Furious Fred.
        eldYmEnabled: false
        timezone: America/Los_Angeles
        eldDayStartHour: 0
        carrierSettings:
          carrierName: Acme Inc.
          mainOfficeAddress: 1234 Pear St., Scranton, PA 62814
          dotNumber: 98231
        tachographCardNumber: "1000000492436002"
        isDeactivated: false
        licenseNumber: E1234567
        id: "123"
        eldAdverseWeatherExemptionEnabled: false
        licenseState: CA
        externalIds:
          maintenanceId: "250020"
          payrollId: ABFS18600
        eldExempt: false
        tags:
        - parentTagId: "4815"
          name: East Coast
          id: "3914"
        - parentTagId: "4815"
          name: East Coast
          id: "3914"
        eldPcEnabled: false
        eldBigDayExemptionEnabled: false
        phone: "5558234327"
        name: Susan Jones
        updatedAtTime: 2019-06-13T19:08:25Z
        createdAtTime: 2019-05-18T20:27:35Z
        username: SusanJones
      properties:
        carrierSettings:
          $ref: '#/components/schemas/DriverCarrierSettings'
        createdAtTime:
          description: The date and time this driver was created in RFC 3339 format.
          example: 2019-05-18T20:27:35Z
          format: date-time
          type: string
        driverActivationStatus:
          $ref: '#/components/schemas/DriverActivationStatus'
        eldAdverseWeatherExemptionEnabled:
          default: false
          description: Flag indicating this driver may use Adverse Weather exemptions
            in ELD logs.
          type: boolean
        eldBigDayExemptionEnabled:
          default: false
          description: Flag indicating this driver may use Big Day exemption in ELD
            logs.
          type: boolean
        eldDayStartHour:
          default: 0
          description: '`0` indicating midnight-to-midnight ELD driving hours, `12`
            to indicate noon-to-noon driving hours.'
          type: integer
        eldExempt:
          default: false
          description: Flag indicating this driver is exempt from the Electronic Logging
            Mandate.
          type: boolean
        eldExemptReason:
          description: Reason that this driver is exempt from the Electronic Logging
            Mandate (see eldExempt).
          example: Bad driver
          type: string
        eldPcEnabled:
          default: false
          description: Flag indicating this driver may select the Personal Conveyance
            duty status in ELD logs.
          type: boolean
        eldYmEnabled:
          default: false
          description: Flag indicating this driver may select the Yard Move duty status
            in ELD logs.
          type: boolean
        externalIds:
          additionalProperties:
            type: string
          description: The [external IDs](https://developers.samsara.com/docs/external-ids)
            for the given object.
          example:
            maintenanceId: "250020"
            payrollId: ABFS18600
          type: object
        id:
          description: Samsara ID for the driver.
          example: "123"
          type: string
        isDeactivated:
          description: '[DEPRECATED] A boolean indicating whether or not the driver
            is deactivated. Use `driverActivationStatus` instead.'
          example: false
          type: boolean
        licenseNumber:
          description: Driver's state issued license number. The combination of this
            number and `licenseState` must be unique.
          example: E1234567
          type: string
        licenseState:
          description: Abbreviation of state that issued driver's license.
          example: CA
          type: string
        locale:
          $ref: '#/components/schemas/DriverLocale'
        name:
          description: Driver's name.
          example: Susan Jones
          maxLength: 255
          minLength: 1
          type: string
        notes:
          description: Notes about the driver.
          example: Also goes by the nickname Furious Fred.
          maxLength: 4096
          type: string
        phone:
          description: Phone number of the driver.
          example: "5558234327"
          maxLength: 255
          type: string
        staticAssignedVehicle:
          $ref: '#/components/schemas/DriverStaticAssignedVehicle'
        tachographCardNumber:
          description: Driver's assigned tachograph card number (Europe specific)
          example: "1000000492436002"
          type: string
        tags:
          description: The tags this driver belongs to.
          items:
            $ref: '#/components/schemas/tagTinyResponse'
          type: array
        timezone:
          default: America/Los_Angeles
          description: Home terminal timezone, in order to indicate what time zone
            should be used to calculate the ELD logs. Driver timezones use [IANA timezone
            database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`,
            `America/New_York`, `Europe/London`, etc.). You can find a mapping of
            common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
          example: America/Los_Angeles
          type: string
        updatedAtTime:
          description: The date and time this driver was last updated in RFC 3339
            format.
          example: 2019-06-13T19:08:25Z
          format: date-time
          type: string
        username:
          description: Driver's login username into the driver app. The username may
            not contain spaces or the '@' symbol. The username must be unique.
          example: SusanJones
          maxLength: 189
          minLength: 1
          type: string
        vehicleGroupTag:
          $ref: '#/components/schemas/DriverVehicleGroupTag'
      type: object
    DriverActivationStatus:
      description: A value indicating whether the driver is active or deactivated.
      enum:
      - active
      - deactivated
      type: string
    DriverCarrierName:
      description: Carrier for a given driver.
      example: Acme Inc.
      maxLength: 255
      type: string
    DriverCarrierSettings:
      description: Carrier for a given driver. If the driver's carrier differs from
        the general organization's carrier settings, the override value is used. Updating
        this value only updates the override setting for this driver.
      example:
        carrierName: Acme Inc.
        mainOfficeAddress: 1234 Pear St., Scranton, PA 62814
        dotNumber: 98231
      properties:
        carrierName:
          description: Carrier for a given driver.
          example: Acme Inc.
          maxLength: 255
          type: string
        dotNumber:
          description: Carrier US DOT Number. If this differs from the general organization's
            settings, the override value is used. Updating this value only updates
            the override setting for this driver.
          example: 98231
          format: int64
          type: integer
        mainOfficeAddress:
          description: 'Main office address for a given driver. If this differs from
            the general organization''s settings, the override value is used. '
          example: 1234 Pear St., Scranton, PA 62814
          maxLength: 255
          type: string
      type: object
    DriverCreatedAtTime:
      description: The date and time this driver was created in RFC 3339 format.
      example: 2019-05-18T20:27:35Z
      format: date-time
      type: string
    DriverDotNumber:
      description: Carrier US DOT Number. If this differs from the general organization's
        settings, the override value is used. Updating this value only updates the
        override setting for this driver.
      example: 98231
      format: int64
      type: integer
    DriverEldAdverseWeatherExemptionEnabled:
      default: false
      description: Flag indicating this driver may use Adverse Weather exemptions
        in ELD logs.
      type: boolean
    DriverEldBigDayExemptionEnabled:
      default: false
      description: Flag indicating this driver may use Big Day exemption in ELD logs.
      type: boolean
    DriverEldDayStartHour:
      default: 0
      description: '`0` indicating midnight-to-midnight ELD driving hours, `12` to
        indicate noon-to-noon driving hours.'
      type: integer
    DriverEldExempt:
      default: false
      description: Flag indicating this driver is exempt from the Electronic Logging
        Mandate.
      type: boolean
    DriverEldExemptReason:
      description: Reason that this driver is exempt from the Electronic Logging Mandate
        (see eldExempt).
      example: Bad driver
      type: string
    DriverEldPcEnabled:
      default: false
      description: Flag indicating this driver may select the Personal Conveyance
        duty status in ELD logs.
      type: boolean
    DriverEldYmEnabled:
      default: false
      description: Flag indicating this driver may select the Yard Move duty status
        in ELD logs.
      type: boolean
    DriverExternalIds:
      $ref: '#/components/schemas/externalIds'
    DriverId:
      description: Samsara ID for the driver.
      example: "123"
      type: string
    DriverIsDeactivated:
      description: '[DEPRECATED] A boolean indicating whether or not the driver is
        deactivated. Use `driverActivationStatus` instead.'
      example: false
      type: boolean
    DriverLicenseNumber:
      description: Driver's state issued license number. The combination of this number
        and `licenseState` must be unique.
      example: E1234567
      type: string
    DriverLicenseState:
      description: Abbreviation of state that issued driver's license.
      example: CA
      type: string
    DriverLocale:
      description: Locale override (uncommon). These are specified by ISO 3166-2 country
        codes for supported locales.
      enum:
      - us
      - at
      - be
      - ca
      - gb
      - fr
      - de
      - ie
      - it
      - lu
      - mx
      - nl
      - es
      - ch
      type: string
    DriverMainOfficeAddress:
      description: 'Main office address for a given driver. If this differs from the
        general organization''s settings, the override value is used. '
      example: 1234 Pear St., Scranton, PA 62814
      maxLength: 255
      type: string
    DriverName:
      description: Driver's name.
      example: Susan Jones
      maxLength: 255
      minLength: 1
      type: string
    DriverNotes:
      description: Notes about the driver.
      example: Also goes by the nickname Furious Fred.
      maxLength: 4096
      type: string
    DriverPassword:
      description: Password that the driver can use to login to the Samsara driver
        app.
      example: aSecurePassword1234
      type: string
    DriverPhone:
      description: Phone number of the driver.
      example: "5558234327"
      maxLength: 255
      type: string
    DriverResponse:
      description: A single driver.
      example:
        data:
          eldExemptReason: Bad driver
          notes: Also goes by the nickname Furious Fred.
          eldYmEnabled: false
          timezone: America/Los_Angeles
          eldDayStartHour: 0
          carrierSettings:
            carrierName: Acme Inc.
            mainOfficeAddress: 1234 Pear St., Scranton, PA 62814
            dotNumber: 98231
          tachographCardNumber: "1000000492436002"
          isDeactivated: false
          licenseNumber: E1234567
          id: "123"
          eldAdverseWeatherExemptionEnabled: false
          licenseState: CA
          externalIds:
            maintenanceId: "250020"
            payrollId: ABFS18600
          eldExempt: false
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          eldPcEnabled: false
          eldBigDayExemptionEnabled: false
          phone: "5558234327"
          name: Susan Jones
          updatedAtTime: 2019-06-13T19:08:25Z
          createdAtTime: 2019-05-18T20:27:35Z
          username: SusanJones
      properties:
        data:
          $ref: '#/components/schemas/Driver'
      type: object
    DriverStaticAssignedVehicle:
      allOf:
      - description: Vehicle assigned to the driver for static vehicle assignments.
          (uncommon).
        type: object
      - $ref: '#/components/schemas/vehicleTinyResponse'
    DriverStaticAssignedVehicleId:
      description: ID of vehicle that the driver is permanently assigned to. (uncommon).
      example: "456"
      type: string
    DriverTachographActivityData:
      items:
        $ref: '#/components/schemas/TachographActivityListWrapper'
      type: array
    DriverTachographActivityResponse:
      description: List of all driver tachograph activities in a specified time range.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - activity:
          - isManualEntry: false
            startTime: 2020-01-02T15:04:05Z07:00
            endTime: 2020-01-03T16:04:05Z07:00
            state: BREAK/REST
          - isManualEntry: false
            startTime: 2020-01-02T15:04:05Z07:00
            endTime: 2020-01-03T16:04:05Z07:00
            state: BREAK/REST
          driver:
            name: Susan Bob
            id: "88668"
        - activity:
          - isManualEntry: false
            startTime: 2020-01-02T15:04:05Z07:00
            endTime: 2020-01-03T16:04:05Z07:00
            state: BREAK/REST
          - isManualEntry: false
            startTime: 2020-01-02T15:04:05Z07:00
            endTime: 2020-01-03T16:04:05Z07:00
            state: BREAK/REST
          driver:
            name: Susan Bob
            id: "88668"
      properties:
        data:
          items:
            $ref: '#/components/schemas/TachographActivityListWrapper'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      type: object
    DriverTachographCardNumber:
      description: Driver's assigned tachograph card number (Europe specific)
      example: "1000000492436002"
      type: string
    DriverTagIds:
      description: IDs of tags the driver is associated with.
      items:
        example: "147"
        type: string
      type: array
    DriverTags:
      description: The tags this driver belongs to.
      items:
        $ref: '#/components/schemas/tagTinyResponse'
      type: array
    DriverTimezone:
      default: America/Los_Angeles
      description: Home terminal timezone, in order to indicate what time zone should
        be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones)
        keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.).
        You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
      example: America/Los_Angeles
      type: string
    DriverUpdatedAtTime:
      description: The date and time this driver was last updated in RFC 3339 format.
      example: 2019-06-13T19:08:25Z
      format: date-time
      type: string
    DriverUsername:
      description: Driver's login username into the driver app. The username may not
        contain spaces or the '@' symbol. The username must be unique.
      example: SusanJones
      maxLength: 189
      minLength: 1
      type: string
    DriverVehicleGroupTag:
      allOf:
      - description: Tag which determines which vehicles a driver will see when selecting
          vehicles.
        type: object
      - $ref: '#/components/schemas/tagTinyResponse'
    DriverVehicleGroupTagId:
      description: Tag ID which determines which vehicles a driver will see when selecting
        vehicles.
      example: "342417"
      type: string
    Dvir:
      description: Information about a DVIR.
      example:
        safetyStatus: unsafe
        trailerDefects:
        - trailer: '{}'
          resolvedAtTime: 2020-01-27T07:06:25Z
          resolvedBy:
            name: name
            id: id
            type: driver
          comment: Air Compressor not working
          createdAtTime: 2020-01-27T07:06:25Z
          id: "18"
          defectType: Air Compressor
          isResolved: true
          vehicle: '{}'
        - trailer: '{}'
          resolvedAtTime: 2020-01-27T07:06:25Z
          resolvedBy:
            name: name
            id: id
            type: driver
          comment: Air Compressor not working
          createdAtTime: 2020-01-27T07:06:25Z
          id: "18"
          defectType: Air Compressor
          isResolved: true
          vehicle: '{}'
        type: preTrip
        mechanicNotes: Replaced headlight on passenger side.
        licensePlate: XHK1234
        vehicleDefects:
        - trailer: '{}'
          resolvedAtTime: 2020-01-27T07:06:25Z
          resolvedBy:
            name: name
            id: id
            type: driver
          comment: Air Compressor not working
          createdAtTime: 2020-01-27T07:06:25Z
          id: "18"
          defectType: Air Compressor
          isResolved: true
          vehicle: '{}'
        - trailer: '{}'
          resolvedAtTime: 2020-01-27T07:06:25Z
          resolvedBy:
            name: name
            id: id
            type: driver
          comment: Air Compressor not working
          createdAtTime: 2020-01-27T07:06:25Z
          id: "18"
          defectType: Air Compressor
          isResolved: true
          vehicle: '{}'
        location: 350 Rhode Island St Ste. 400S, San Francisco, CA 94103
        odometerMeters: 14010293
        startTime: 2020-01-27T07:06:25Z
        trailerName: 'Midwest Trailer #5'
        endTime: 2020-01-27T07:06:25Z
        id: "7107471"
      properties:
        authorSignature:
          $ref: '#/components/schemas/DvirAuthorSignature'
        endTime:
          description: 'Time when driver signed and completed this DVIR. UTC timestamp
            in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        id:
          description: Unique Samsara ID for the DVIR.
          example: "7107471"
          type: string
        licensePlate:
          description: The license plate of this vehicle.
          example: XHK1234
          maxLength: 12
          type: string
        location:
          description: Optional string if your jurisdiction requires a location of
            the DVIR.
          example: 350 Rhode Island St Ste. 400S, San Francisco, CA 94103
          type: string
        mechanicNotes:
          description: The mechanics notes on the DVIR.
          example: Replaced headlight on passenger side.
          type: string
        odometerMeters:
          description: The odometer reading in meters.
          example: 14010293
          type: integer
        safetyStatus:
          default: unsafe
          description: The condition of vehicle on which DVIR was done.
          enum:
          - safe
          - unsafe
          - resolved
          example: unsafe
          type: string
        secondSignature:
          $ref: '#/components/schemas/DvirSecondSignature'
        startTime:
          description: 'Time when driver began filling out this DVIR. UTC timestamp
            in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        thirdSignature:
          $ref: '#/components/schemas/DvirThirdSignature'
        trailer:
          $ref: '#/components/schemas/DvirTrailer'
        trailerDefects:
          description: Defects registered for the trailer which was part of the DVIR.
          items:
            $ref: '#/components/schemas/dvirTrailerDefectsItems'
          type: array
        trailerName:
          description: The name of the trailer the DVIR was submitted for.  Only included
            for tractor+trailer DVIRs.
          example: 'Midwest Trailer #5'
          type: string
        type:
          default: unspecified
          description: Inspection type of the DVIR.
          enum:
          - preTrip
          - postTrip
          - mechanic
          - unspecified
          example: preTrip
          type: string
        vehicle:
          $ref: '#/components/schemas/DvirVehicle'
        vehicleDefects:
          description: Defects registered for the vehicle which was part of the DVIR.
          items:
            $ref: '#/components/schemas/dvirTrailerDefectsItems'
          type: array
      required:
      - id
      type: object
    DvirAuthorSignature:
      allOf:
      - description: An author signature object which has a signatory mini object
          with the signed time. Author Signature.
        type: object
      - $ref: '#/components/schemas/DvirSignature'
    DvirLicensePlate:
      description: The license plate of this vehicle.
      example: XHK1234
      maxLength: 12
      type: string
    DvirLocation:
      description: Optional string if your jurisdiction requires a location of the
        DVIR.
      example: 350 Rhode Island St Ste. 400S, San Francisco, CA 94103
      type: string
    DvirMechanicNotes:
      description: The mechanics notes on the DVIR.
      example: Replaced headlight on passenger side.
      type: string
    DvirOdometerMeters:
      description: The odometer reading in meters.
      example: 14010293
      type: integer
    DvirResponse:
      description: The DVIR response.
      example:
        data:
          safetyStatus: unsafe
          trailerDefects:
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          type: preTrip
          mechanicNotes: Replaced headlight on passenger side.
          licensePlate: XHK1234
          vehicleDefects:
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          location: 350 Rhode Island St Ste. 400S, San Francisco, CA 94103
          odometerMeters: 14010293
          startTime: 2020-01-27T07:06:25Z
          trailerName: 'Midwest Trailer #5'
          endTime: 2020-01-27T07:06:25Z
          id: "7107471"
      properties:
        data:
          $ref: '#/components/schemas/Dvir'
      type: object
    DvirSecondSignature:
      allOf:
      - description: An author signature object which has a signatory mini object
          with the signed time. Second Signature.
        type: object
      - $ref: '#/components/schemas/DvirSignature'
    DvirSignature:
      description: DVIR Signure.
      properties:
        signatoryUser:
          allOf:
          - description: The user who signed the DVIR.
            type: object
          - $ref: '#/definitions/userTinyResponse'
          type: object
        signedAtTime:
          description: 'The time when the DVIR was signed. UTC timestamp in RFC 3339
            format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        type:
          default: driver
          description: Whether the DVIR was submitted by a `driver` or `mechanic`.
          enum:
          - driver
          - mechanic
          example: driver
          type: string
      type: object
    DvirThirdSignature:
      allOf:
      - description: An author signature object which has a signatory mini object
          with the signed time. Third Signature.
        type: object
      - $ref: '#/components/schemas/DvirSignature'
    DvirTrailer:
      allOf:
      - description: The trailer the DVIR was submitted for. Only included for trailer
          only DVIRs.
        type: object
      - $ref: '#/components/schemas/trailerTinyResponse'
    DvirTrailerDefects:
      description: Defects registered for the trailer which was part of the DVIR.
      items:
        $ref: '#/components/schemas/dvirTrailerDefectsItems'
      type: array
    DvirVehicle:
      allOf:
      - description: The vehicle the DVIR was submitted for. Only included for tractor
          or tractor+trailer DVIRs.
        type: object
      - $ref: '#/components/schemas/vehicleTinyResponse'
    DvirVehicleDefects:
      description: Defects registered for the vehicle which was part of the DVIR.
      items:
        $ref: '#/components/schemas/dvirTrailerDefectsItems'
      type: array
    DvirsListResponse:
      description: A list of DVIRs and pagination information.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - safetyStatus: unsafe
          trailerDefects:
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          type: preTrip
          mechanicNotes: Replaced headlight on passenger side.
          licensePlate: XHK1234
          vehicleDefects:
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          location: 350 Rhode Island St Ste. 400S, San Francisco, CA 94103
          odometerMeters: 14010293
          startTime: 2020-01-27T07:06:25Z
          trailerName: 'Midwest Trailer #5'
          endTime: 2020-01-27T07:06:25Z
          id: "7107471"
        - safetyStatus: unsafe
          trailerDefects:
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          type: preTrip
          mechanicNotes: Replaced headlight on passenger side.
          licensePlate: XHK1234
          vehicleDefects:
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          - trailer: '{}'
            resolvedAtTime: 2020-01-27T07:06:25Z
            resolvedBy:
              name: name
              id: id
              type: driver
            comment: Air Compressor not working
            createdAtTime: 2020-01-27T07:06:25Z
            id: "18"
            defectType: Air Compressor
            isResolved: true
            vehicle: '{}'
          location: 350 Rhode Island St Ste. 400S, San Francisco, CA 94103
          odometerMeters: 14010293
          startTime: 2020-01-27T07:06:25Z
          trailerName: 'Midwest Trailer #5'
          endTime: 2020-01-27T07:06:25Z
          id: "7107471"
      properties:
        data:
          description: A list of DVIRs.
          items:
            $ref: '#/components/schemas/Dvir'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - data
      - pagination
      type: object
    EquipmentEngineRpm:
      description: Stat point for the RPM of the engine.
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
        value:
          example: 1800
          type: integer
      type: object
    EquipmentEngineSeconds:
      description: Stat point for the on time of the engine.
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
        value:
          example: 22374000
          type: integer
      type: object
    EquipmentEngineState:
      description: Stat point for the state of the engine based on readings through
        the connected aux/digio cable.
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
        value:
          enum:
          - "Off"
          - "On"
          example: "On"
          type: string
      type: object
    EquipmentFuelPercent:
      description: Stat point for the fuel level of the engine as a percentage.
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
        value:
          example: 54
          type: integer
      type: object
    EquipmentGatewayEngineSeconds:
      description: Stat point for the cumulative on time of the engine based on readings
        through the connected aux/digio cable.
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
        value:
          example: 22374000
          type: integer
      type: object
    EquipmentGatewayEngineState:
      description: Stat point for the state of the engine based on readings through
        the connected aux/digio cable.
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
        value:
          enum:
          - "Off"
          - "On"
          example: "On"
          type: string
      type: object
    EquipmentGpsOdometerMeters:
      description: Stat point for the odometer of the engine in meters based on readings
        from the Samsara Gateway GPS data.
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
        value:
          example: 3200
          type: integer
      type: object
    EquipmentListResponse:
      description: Response for retrieving a list of equipment.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - notes: These are notes about this given equipment.
          assetSerial: 1FUJA6BD31LJ09646
          name: Crane A7
          id: "112"
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
        - notes: These are notes about this given equipment.
          assetSerial: 1FUJA6BD31LJ09646
          name: Crane A7
          id: "112"
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
      properties:
        data:
          items:
            $ref: '#/components/schemas/EquipmentResponse'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      type: object
    EquipmentLocation:
      allOf:
      - $ref: '#/components/schemas/location'
      - $ref: '#/components/schemas/EquipmentLocation_allOf'
      - $ref: '#/components/schemas/EquipmentLocation_allOf_1'
    EquipmentLocationSnapshotResponse:
      allOf:
      - $ref: '#/components/schemas/equipmentTinyResponse'
      - $ref: '#/components/schemas/EquipmentLocationSnapshotResponse_allOf'
      description: Location for a given piece of equipment.
    EquipmentLocationsResponse:
      allOf:
      - $ref: '#/components/schemas/equipmentTinyResponse'
      - $ref: '#/components/schemas/EquipmentLocationsResponse_allOf'
      description: List of equipment locations for the specified time period.
    EquipmentObdEngineSeconds:
      description: Stat point for the cumulative on time of the engine based on readings
        of the onboard computer through the J1939 or CAT cable.
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
        value:
          example: 22374000
          type: integer
      type: object
    EquipmentObdEngineState:
      description: Stat point for the state of the engine based on readings of the
        onboard computer through the J1939 or CAT cable.
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
        value:
          enum:
          - "Off"
          - "On"
          - Idle
          example: "On"
          type: string
      type: object
    EquipmentResponse:
      description: The equipment object.
      example:
        notes: These are notes about this given equipment.
        assetSerial: 1FUJA6BD31LJ09646
        name: Crane A7
        id: "112"
        tags:
        - parentTagId: "4815"
          name: East Coast
          id: "3914"
        - parentTagId: "4815"
          name: East Coast
          id: "3914"
      properties:
        assetSerial:
          description: An equipment identification number.
          example: 1FUJA6BD31LJ09646
          type: string
        id:
          description: Unique Samsara ID for the equipment.
          example: "112"
          type: string
        name:
          description: Name of the equipment.
          example: Crane A7
          type: string
        notes:
          description: Notes about a piece of equipment. Samsara supports a maximum
            of 255 chars.
          example: These are notes about this given equipment.
          maxLength: 255
          type: string
        tags:
          description: An array of all tag mini-objects that are associated with the
            given equipment.
          items:
            $ref: '#/components/schemas/tagTinyResponse'
          type: array
      required:
      - id
      type: object
    EquipmentStatsResponse:
      allOf:
      - $ref: '#/components/schemas/equipmentTinyResponse'
      - $ref: '#/components/schemas/EquipmentStatsResponse_allOf'
      description: List of equipment stats for the specified time period.
    EquipmentStatsSnapshotResponse:
      allOf:
      - $ref: '#/components/schemas/equipmentTinyResponse'
      - $ref: '#/components/schemas/EquipmentStatsSnapshotResponse_allOf'
      description: List of equipment stats for the specified time period.
    EquipmentTime:
      description: UTC timestamp of the time the data point was generated by the equipment,
        in RFC3339 format.
      example: 2019-05-03T04:30:31.492Z
      type: string
    ListAddressesResponse:
      description: A list of Addresses and pagination information.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - notes: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
            street side.'
          formattedAddress: 350 Rhode Island St, San Francisco, CA
          geofence:
            polygon:
              vertices:
              - latitude: 37.765363
                longitude: -122.403098
              - latitude: 38.765363
                longitude: -122.403098
              - latitude: 37.765363
                longitude: -123.403098
            circle:
              latitude: 37.765363
              radiusMeters: 25
              longitude: -122.4029238
          latitude: 37.765363
          externalIds:
            maintenanceId: "250020"
            payrollId: ABFS18600
          name: Samsara HQ
          id: "22408"
          addressTypes:
          - yard
          - yard
          contacts:
          - firstName: Jane
            lastName: Jones
            id: "22408"
          - firstName: Jane
            lastName: Jones
            id: "22408"
          longitude: -122.4029238
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
        - notes: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
            street side.'
          formattedAddress: 350 Rhode Island St, San Francisco, CA
          geofence:
            polygon:
              vertices:
              - latitude: 37.765363
                longitude: -122.403098
              - latitude: 38.765363
                longitude: -122.403098
              - latitude: 37.765363
                longitude: -123.403098
            circle:
              latitude: 37.765363
              radiusMeters: 25
              longitude: -122.4029238
          latitude: 37.765363
          externalIds:
            maintenanceId: "250020"
            payrollId: ABFS18600
          name: Samsara HQ
          id: "22408"
          addressTypes:
          - yard
          - yard
          contacts:
          - firstName: Jane
            lastName: Jones
            id: "22408"
          - firstName: Jane
            lastName: Jones
            id: "22408"
          longitude: -122.4029238
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
      properties:
        data:
          description: A list of Addresses.
          items:
            $ref: '#/components/schemas/Address'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - data
      - pagination
      type: object
    ListCarrierProposedAssignmentResponse:
      description: A list of carrier-proposed assignments and pagination information.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - shippingDocs: Delivery 123, chips and soda
          rejectedTime: 2020-01-27T07:06:25Z
          acceptedTime: 2020-01-27T07:06:25Z
          activeTime: 2020-01-27T07:06:25Z
          firstSeenTime: 2020-01-27T07:06:25Z
          uuid: 08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d
          trailers:
          - name: 'Midwest Trailer #5'
          - name: 'Midwest Trailer #5'
        - shippingDocs: Delivery 123, chips and soda
          rejectedTime: 2020-01-27T07:06:25Z
          acceptedTime: 2020-01-27T07:06:25Z
          activeTime: 2020-01-27T07:06:25Z
          firstSeenTime: 2020-01-27T07:06:25Z
          uuid: 08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d
          trailers:
          - name: 'Midwest Trailer #5'
          - name: 'Midwest Trailer #5'
      properties:
        data:
          description: A list of carrier-proposed assignments
          items:
            $ref: '#/components/schemas/CarrierProposedAssignment'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - data
      - pagination
      type: object
    ListContactsResponse:
      description: A list of contacts.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - firstName: Jane
          lastName: Jones
          phone: 111-222-3344
          id: "22408"
          email: jane.jones@yahoo.com
        - firstName: Jane
          lastName: Jones
          phone: 111-222-3344
          id: "22408"
          email: jane.jones@yahoo.com
      properties:
        data:
          items:
            $ref: '#/components/schemas/Contact'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      type: object
    ListDataInputsResponse:
      allOf:
      - $ref: '#/components/schemas/DataInputTinyResponse'
      - $ref: '#/components/schemas/ListDataInputsResponse_allOf'
    ListDriversResponse:
      description: A list of drivers.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - eldExemptReason: Bad driver
          notes: Also goes by the nickname Furious Fred.
          eldYmEnabled: false
          timezone: America/Los_Angeles
          eldDayStartHour: 0
          carrierSettings:
            carrierName: Acme Inc.
            mainOfficeAddress: 1234 Pear St., Scranton, PA 62814
            dotNumber: 98231
          tachographCardNumber: "1000000492436002"
          isDeactivated: false
          licenseNumber: E1234567
          id: "123"
          eldAdverseWeatherExemptionEnabled: false
          licenseState: CA
          externalIds:
            maintenanceId: "250020"
            payrollId: ABFS18600
          eldExempt: false
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          eldPcEnabled: false
          eldBigDayExemptionEnabled: false
          phone: "5558234327"
          name: Susan Jones
          updatedAtTime: 2019-06-13T19:08:25Z
          createdAtTime: 2019-05-18T20:27:35Z
          username: SusanJones
        - eldExemptReason: Bad driver
          notes: Also goes by the nickname Furious Fred.
          eldYmEnabled: false
          timezone: America/Los_Angeles
          eldDayStartHour: 0
          carrierSettings:
            carrierName: Acme Inc.
            mainOfficeAddress: 1234 Pear St., Scranton, PA 62814
            dotNumber: 98231
          tachographCardNumber: "1000000492436002"
          isDeactivated: false
          licenseNumber: E1234567
          id: "123"
          eldAdverseWeatherExemptionEnabled: false
          licenseState: CA
          externalIds:
            maintenanceId: "250020"
            payrollId: ABFS18600
          eldExempt: false
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          eldPcEnabled: false
          eldBigDayExemptionEnabled: false
          phone: "5558234327"
          name: Susan Jones
          updatedAtTime: 2019-06-13T19:08:25Z
          createdAtTime: 2019-05-18T20:27:35Z
          username: SusanJones
      properties:
        data:
          items:
            $ref: '#/components/schemas/Driver'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      type: object
    ListTagsResponse:
      description: A list of tags.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      type: object
    ListUserRolesResponse:
      description: A list of user roles.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - name: Full Admin
          id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
        - name: Full Admin
          id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
      properties:
        data:
          description: A list of user roles
          items:
            $ref: '#/components/schemas/UserRole'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      type: object
    ListUsersResponse:
      description: A list of users.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - roles:
          - role:
              name: Full Admin
              id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
            tag:
              parentTagId: "4815"
              name: East Coast
              id: "3914"
          - role:
              name: Full Admin
              id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
            tag:
              parentTagId: "4815"
              name: East Coast
              id: "3914"
          name: Bob Smith
          id: "123"
          email: user@company.com
        - roles:
          - role:
              name: Full Admin
              id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
            tag:
              parentTagId: "4815"
              name: East Coast
              id: "3914"
          - role:
              name: Full Admin
              id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
            tag:
              parentTagId: "4815"
              name: East Coast
              id: "3914"
          name: Bob Smith
          id: "123"
          email: user@company.com
      properties:
        data:
          description: A list of users.
          items:
            $ref: '#/components/schemas/User'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      type: object
    ListVehiclesResponse:
      description: Response for retrieving a list of vehicles.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - notes: These are notes about this given vehicle.
          year: "2008"
          externalIds:
            maintenanceId: "250020"
            payrollId: ABFS18600
          harshAccelerationSettingType: "off"
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          licensePlate: XHK1234
          staticAssignedDriver:
            name: Susan Bob
            id: "88668"
          auxInputType2: boom
          name: Truck A7
          model: F150
          vin: 1FUJA6BD31LJ09646
          auxInputType1: boom
          id: "112"
          make: Ford
        - notes: These are notes about this given vehicle.
          year: "2008"
          externalIds:
            maintenanceId: "250020"
            payrollId: ABFS18600
          harshAccelerationSettingType: "off"
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          licensePlate: XHK1234
          staticAssignedDriver:
            name: Susan Bob
            id: "88668"
          auxInputType2: boom
          name: Truck A7
          model: F150
          vin: 1FUJA6BD31LJ09646
          auxInputType1: boom
          id: "112"
          make: Ford
      properties:
        data:
          items:
            $ref: '#/components/schemas/Vehicle'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - data
      - pagination
      type: object
    Message:
      example:
        driverId: 555
        text: This is a message.
      properties:
        driverId:
          description: ID of the driver for whom the message is sent to or sent by.
          example: 555
          format: int64
          type: integer
        text:
          description: The text sent in the message.
          example: This is a message.
          maxLength: 65533
          minLength: 1
          type: string
      required:
      - driverId
      - text
      type: object
    Messages:
      items:
        $ref: '#/components/schemas/Message'
      type: array
    NumberDataPoint:
      description: A single numeric data point of a data input.
      properties:
        time:
          description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        value:
          description: Numeric value of the data point.
          example: 1992.0506
          format: double
          type: number
      type: object
    OrgHarshEventsKondoResponse:
      example:
        data:
        - downloadForwardVideoUrl: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
          downloadInwardVideoUrl: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
          behaviorLabels:
          - labelSource: SYSTEM
            labelType: Braking
          - labelSource: SYSTEM
            labelType: Braking
          incidentReportUrl: https://cloud.samsara.com/groups/4185/fleet/reports/safety/vehicle/222/incident/1499411220000
          location:
            latitude: 37.762554
            longitude: -122.409355
          downloadTrackedInwardVideoUrl: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
        - downloadForwardVideoUrl: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
          downloadInwardVideoUrl: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
          behaviorLabels:
          - labelSource: SYSTEM
            labelType: Braking
          - labelSource: SYSTEM
            labelType: Braking
          incidentReportUrl: https://cloud.samsara.com/groups/4185/fleet/reports/safety/vehicle/222/incident/1499411220000
          location:
            latitude: 37.762554
            longitude: -122.409355
          downloadTrackedInwardVideoUrl: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
      properties:
        data:
          items:
            $ref: '#/components/schemas/OrgHarshEventsKondoResponse_data'
          type: array
      type: object
    OrgSafetyScoresResponse:
      example:
        data:
        - harshAccelCount: 3
          totalDistanceDrivenMeters: 2509
          harshEventIdentifiers:
          - eventTime: 2019-04-17T16:42:55Z
            vehicleId: 212014918214656
          - eventTime: 2019-04-17T16:42:55Z
            vehicleId: 212014918214656
          totalHarshEventCount: 20
          harshTurningCount: 10
          harshBrakingCount: 5
          crashCount: 1
          driverId: 319596
          safetyScore: 92
          totalTimeDrivenMs: 12343
          vehicleId: 212014918214656
          timeOverSpeedLimitMs: 123
          safetyScoreRank: 7
        - harshAccelCount: 3
          totalDistanceDrivenMeters: 2509
          harshEventIdentifiers:
          - eventTime: 2019-04-17T16:42:55Z
            vehicleId: 212014918214656
          - eventTime: 2019-04-17T16:42:55Z
            vehicleId: 212014918214656
          totalHarshEventCount: 20
          harshTurningCount: 10
          harshBrakingCount: 5
          crashCount: 1
          driverId: 319596
          safetyScore: 92
          totalTimeDrivenMs: 12343
          vehicleId: 212014918214656
          timeOverSpeedLimitMs: 123
          safetyScoreRank: 7
      properties:
        data:
          items:
            $ref: '#/components/schemas/OrgSafetyScoresResponse_data'
          type: array
      type: object
    OrganizationInfoResponse:
      description: Information about your organization.
      properties:
        carrierSettings:
          $ref: '#/components/schemas/OrganizationInfoResponse_carrierSettings'
        id:
          description: ID of the organization.
          example: "123"
          type: string
        name:
          description: Name of organization.
          example: Charlie's Dining Services
          type: string
      type: object
    ParentTag:
      description: If this tag is part a hierarchical tag tree, this is the parent
        tag, otherwise this will be omitted.
      properties:
        id:
          description: The object ID.
          example: "23502866574"
          type: string
        name:
          description: The tag name.
          example: US West Vehicles
          type: string
      required:
      - id
      type: object
    ParentTagId:
      description: If this tag is part a hierarchical tag tree, this is the ID of
        the parent tag, otherwise this will be omitted.
      example: "4815"
      type: string
    ParentTagName:
      description: The tag name.
      example: US West Vehicles
      type: string
    RemoteObdTestRecordType:
      description: CTP test data reported from one ECU.
      example:
        o2Sensor: U
        pidCountValid: true
        minutesSinceCodesCleared: 3
        notReadyCount: 3
        fuel: U
        obdVinValid: true
        warmupsSinceCodesCleared: 3
        distanceTraveledSinceCodesClearedValid: true
        distanceTraveledWithMilOnValid: true
        permanentDtcs: P0151|P0300|P0301
        minutesSinceCodesClearedValid: true
        pcmId: 7E8
        milValid: true
        minutesSinceMilValid: true
        egr: U
        isoSaeReserved: U
        mil: "Y"
        calCvn: AaPl1io=
        obdVin: 1HGBH41JXMN109186
        permanentDtcsValid: true
        distanceTraveledSinceCodesCleared: 3
        compressionIgnitionMonitorSupported: "Y"
        calCvnValid: true
        compressionIgnitionMonitorSupportedValid: true
        dtcCount: 3
        pendingDtcs: P0151|P0300|P0301
        rpmValid: true
        heatedO2Sensor: U
        warmupsSinceCodesClearedValid: true
        calId: AVRCSUUzRDcuSEVYAAAAAAA=
        emissionRelatedDtcs: P0151|P0300|P0301
        rpm: 3
        heatedCatalyst: U
        permanentDtcCount: 3
        catalyst: U
        minutesSinceMil: 3
        misfire: U
        pendingDtcsValid: true
        obdMonitorStatusValid: true
        emissionRelatedDtcsValid: true
        pendingDtcCount: 3
        secondaryAir: U
        calIdValid: true
        distanceTraveledWithMilOn: 3
        comprehensive: U
        evapSystem: U
        pidCount: 3
      properties:
        calCvn:
          description: Calibration Verification Number as read from the CAN bus.
          example: AaPl1io=
          type: string
        calCvnValid:
          description: Indicates CalCvnCount was successfully read from the CAN bus.
          type: boolean
        calId:
          description: Calibration ID as read from the CAN bus.
          example: AVRCSUUzRDcuSEVYAAAAAAA=
          type: string
        calIdValid:
          description: Indicates CalId was successfully read from the CAN bus.
          type: boolean
        catalyst:
          description: OBD Monitor Status - Catalyst or NMHC Catalyst as read from
            the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        comprehensive:
          description: OBD Monitor Status - Comprehensive as read from the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        compressionIgnitionMonitorSupported:
          description: Compression ignition monitor supported as read from the CAN
            bus.
          enum:
          - "Y"
          - "N"
          example: "Y"
          type: string
        compressionIgnitionMonitorSupportedValid:
          description: Indicates CompressionIgnitionMonitorSupported was successfully
            read from the CAN bus.
          type: boolean
        distanceTraveledSinceCodesCleared:
          description: Distance Traveled Since Codes Cleared as read from the CAN
            bus.
          example: 3
          type: integer
        distanceTraveledSinceCodesClearedValid:
          description: Indicates DistanceTraveledSinceCodesCleared was successfully
            read from the CAN bus.
          type: boolean
        distanceTraveledWithMilOn:
          description: Distance Traveled With MIL On as read from the CAN bus.
          example: 3
          type: integer
        distanceTraveledWithMilOnValid:
          description: Indicates DistanceTraveledWithMilOn was successfully read from
            the CAN bus.
          type: boolean
        dtcCount:
          description: Number of emissions related DTCs read from the CAN bus.
          example: 3
          type: integer
        egr:
          description: OBD Monitor Status - EGR/VVT as read from the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        emissionRelatedDtcs:
          description: Emission related DTCs as read from the CAN bus, separated by
            pipe characters.
          example: P0151|P0300|P0301
          type: string
        emissionRelatedDtcsValid:
          description: Indicates EmissionRelatedDtcs was successfully read from the
            CAN bus.
          type: boolean
        evapSystem:
          description: OBD Monitor Status - Evaporative System or ISO/SAE Reserved
            as read from the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        fuel:
          description: OBD Monitor Status - Fuel as read from the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        heatedCatalyst:
          description: OBD Monitor Status - Heated Catalyst or NOx/SCR aftertreatment
            as read from the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        heatedO2Sensor:
          description: OBD Monitor Status - Oxygen Sensor Heater or PM Filter as read
            from the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        isoSaeReserved:
          description: OBD Monitor Status - ISO/SAE Reserved as read from the CAN
            bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        mil:
          description: Malfunction indicator lamp status as read from the CAN bus.
          enum:
          - "Y"
          - "N"
          example: "Y"
          type: string
        milValid:
          description: Indicates Mil was successfully read from the CAN bus.
          type: boolean
        minutesSinceCodesCleared:
          description: Minutes Since Codes Cleared as read from the CAN bus.
          example: 3
          type: integer
        minutesSinceCodesClearedValid:
          description: Indicates MinutesSinceCodesCleared was successfully read from
            the CAN bus.
          type: boolean
        minutesSinceMil:
          description: Minutes Since MIL On as read from the CAN bus.
          example: 3
          type: integer
        minutesSinceMilValid:
          description: Indicates MinutesSinceMil was successfully read from the CAN
            bus.
          type: boolean
        misfire:
          description: OBD Monitor Status - Misfire as read from the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        notReadyCount:
          description: Number of OBD Monitor Statuses reporting 'Supported and not
            ready'.
          example: 3
          type: integer
        o2Sensor:
          description: OBD Monitor Status - Oxygen Sensor or Exhaust Gas Sensor as
            read from the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        obdMonitorStatusValid:
          description: Indicates Obd Monitor Statuses were successfully read from
            the CAN bus.
          type: boolean
        obdVin:
          description: Vehicle identification number as read from the CAN bus.
          example: 1HGBH41JXMN109186
          type: string
        obdVinValid:
          description: Indicates ObdVin was successfully read from the CAN bus.
          type: boolean
        pcmId:
          description: ECU Address for the ECU that was read from the CAN bus.
          example: 7E8
          type: string
        pendingDtcCount:
          description: Number of pending DTCs read from the CAN bus.
          example: 3
          type: integer
        pendingDtcs:
          description: Pending DTCs as read from the CAN bus, separated by pipe characters.
          example: P0151|P0300|P0301
          type: string
        pendingDtcsValid:
          description: Indicates PendingDtcs was successfully read from the CAN bus.
          type: boolean
        permanentDtcCount:
          description: Number of permanent DTCs read from the CAN bus.
          example: 3
          type: integer
        permanentDtcs:
          description: Permanent DTCs as read from the CAN bus, separated by pipe
            characters.
          example: P0151|P0300|P0301
          type: string
        permanentDtcsValid:
          description: Indicates PermanentDtcs was successfully read from the CAN
            bus.
          type: boolean
        pidCount:
          description: PidCount is a count of all PIDs supported for this control
            module as read from the CAN bus
          example: 3
          type: integer
        pidCountValid:
          description: Indicates PidCount was successfully read from the CAN bus.
          type: boolean
        rpm:
          description: Revolutions per minute as read from the CAN bus.
          example: 3
          type: integer
        rpmValid:
          description: Indicates Rpm was successfully read from the CAN bus.
          type: boolean
        secondaryAir:
          description: OBD Monitor Status - Secondary Air System or Boost Pressure
            System as read from the CAN bus.
          enum:
          - U
          - R
          - "N"
          example: U
          type: string
        warmupsSinceCodesCleared:
          description: Warmups Since Codes Cleared as read from the CAN bus.
          example: 3
          type: integer
        warmupsSinceCodesClearedValid:
          description: Indicates WarmupsSinceCodesCleared was successfully read from
            the CAN bus.
          type: boolean
      type: object
    ReplaceTagRequest:
      example:
        addresses:
        - "23502866574"
        - "23502866574"
        assets:
        - "23502866574"
        - "23502866574"
        sensors:
        - "23502866574"
        - "23502866574"
        parentTagId: "4815"
        name: California
        vehicles:
        - "23502866574"
        - "23502866574"
        machines:
        - "23502866574"
        - "23502866574"
        drivers:
        - "23502866574"
        - "23502866574"
      properties:
        addresses:
          description: The addresses that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        assets:
          description: The trailers, unpowered, and powered assets that belong to
            this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        drivers:
          description: The drivers that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        machines:
          description: The machines that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        name:
          description: Name of this tag.
          example: California
          maxLength: 191
          minLength: 1
          type: string
        parentTagId:
          description: If this tag is part a hierarchical tag tree, this is the ID
            of the parent tag, otherwise this will be omitted.
          example: "4815"
          type: string
        sensors:
          description: The sensors that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
        vehicles:
          description: The vehicles that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObjectId'
          type: array
      type: object
    Route:
      description: A single route. At most one of assignedDriver and assignedVehicle
        will be provided based on the initial route assignment, and the returned driver
        and vehicle objects are associated with either the assignedVehicle or assignedDriver,
        respectively.
      properties:
        actualEndTime:
          description: Actual end time, if it exists, for the route in RFC 3339 format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        actualStartTime:
          description: Actual start time, if it exists, for the route in RFC 3339
            format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        assignedDriver:
          $ref: '#/components/schemas/driverTinyResponse'
        assignedVehicle:
          $ref: '#/components/schemas/vehicleTinyResponse'
        driver:
          $ref: '#/components/schemas/driverTinyResponse'
        id:
          description: Unique identifier for the route.
          example: "131313"
          type: string
        name:
          description: Name of the route.
          example: Pineapple delivery
          maxLength: 255
          type: string
        notes:
          description: Route notes.
          example: Extra ripe and ready for immediate consumption
          maxLength: 2000
          type: string
        odometerEndMeters:
          description: The odometer reading of the assignedVehicle or associated vehicle
            object at the end of the route.
          example: 234234234
          format: integer
          type: number
        odometerStartMeters:
          description: The odometer reading of the assignedVehicle or associated vehicle
            object at the start of the route.
          example: 123123123
          format: integer
          type: number
        plannedMeters:
          description: Total planned distance in meters for the route.
          example: 12345.0
          format: integer
          type: number
        routeStops:
          description: The route stops in the route.
          items:
            $ref: '#/components/schemas/RouteStop'
          type: array
        scheduledEndTime:
          description: Scheduled end time for the route in RFC 3339 format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        scheduledStartTime:
          description: Scheduled start time for the route in RFC 3339 format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        startLocation:
          $ref: '#/components/schemas/RouteLocation'
        state:
          description: The current state of the route.
          enum:
          - scheduled
          - live
          - completed
          example: scheduled
          type: string
        vehicle:
          $ref: '#/components/schemas/vehicleTinyResponse'
      type: object
    RouteLocation:
      description: Location or address object for the start of a route or a route
        stop.
      example:
        formattedAddress: 350 Rhode Island St, San Francisco, CA
        latitude: 37.765363
        name: Samsara
        id: "123"
        longitude: -122.403098
      properties:
        formattedAddress:
          description: The location address.
          example: 350 Rhode Island St, San Francisco, CA
          type: string
        id:
          description: Unique address identifier. If this field is provided, the other
            fields in this object will be filled from the associated address.
          example: "123"
          type: string
        latitude:
          description: The latitude of the address in decimal degrees.
          example: 37.765363
          format: double
          type: number
        longitude:
          description: The longitude of the address in decimal degrees.
          example: -122.403098
          format: double
          type: number
        name:
          description: The location address name.
          example: Samsara
          type: string
      type: object
    RouteStop:
      description: A single route stop for a route.
      properties:
        actualArrivalTime:
          description: Actual arrival time, if it exists, for the route stop in RFC
            3339 format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        actualDepartureTime:
          description: Actual departure time, if it exists, for the route stop in
            RFC 3339 format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        documents:
          description: The documents associated with the stop.
          items:
            $ref: '#/components/schemas/RouteStop_documents'
          type: array
        id:
          description: Unique identifier for the route stop.
          example: "141414"
          type: string
        liveShareUrl:
          description: The live share URL for the stop.
          example: https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token
          type: string
        notes:
          description: Route stop notes.
          example: Don't talk about pizza toppings with the pineapples
          maxLength: 2000
          type: string
        scheduledArrivalTime:
          description: Scheduled arrival time for the route stop in RFC 3339 format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        scheduledDepartureTime:
          description: Scheduled departure time for the route stop in RFC 3339 format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        skippedTime:
          description: Skipped time, if it exists, for the route stop in RFC 3339
            format.
          example: 2006-01-02T15:04:05+07:00
          type: string
        state:
          description: The current state of the route stop.
          enum:
          - scheduled
          - enRoute
          - skipped
          - arrived
          - departed
          example: scheduled
          type: string
        stopLocation:
          $ref: '#/components/schemas/RouteLocation'
      type: object
    TachographActivity:
      description: Tachograph activity
      example:
        isManualEntry: false
        startTime: 2020-01-02T15:04:05Z07:00
        endTime: 2020-01-03T16:04:05Z07:00
        state: BREAK/REST
      properties:
        endTime:
          description: End time of state in RFC 3339 format.
          example: 2020-01-03T16:04:05Z07:00
          type: string
        isManualEntry:
          description: A flag indicating whether the activity was manually entered
            by the driver. If this is `true`, the state cannot be "UNKNOWN"
          example: false
          type: boolean
        startTime:
          description: Start time of state in RFC 3339 format.
          example: 2020-01-02T15:04:05Z07:00
          type: string
        state:
          description: Tachograph activity state
          enum:
          - BREAK/REST
          - WORK
          - AVAILABILITY
          - DRIVING
          - UNKNOWN
          type: string
      type: object
    TachographActivityList:
      description: List of all driver tachograph activities in a specified time range.
      items:
        $ref: '#/components/schemas/TachographActivity'
      type: array
    TachographActivityListWrapper:
      example:
        activity:
        - isManualEntry: false
          startTime: 2020-01-02T15:04:05Z07:00
          endTime: 2020-01-03T16:04:05Z07:00
          state: BREAK/REST
        - isManualEntry: false
          startTime: 2020-01-02T15:04:05Z07:00
          endTime: 2020-01-03T16:04:05Z07:00
          state: BREAK/REST
        driver:
          name: Susan Bob
          id: "88668"
      properties:
        activity:
          description: List of all driver tachograph activities in a specified time
            range.
          items:
            $ref: '#/components/schemas/TachographActivity'
          type: array
        driver:
          $ref: '#/components/schemas/driverTinyResponse'
      type: object
    Tag:
      allOf:
      - $ref: '#/components/schemas/TinyTag'
      - $ref: '#/components/schemas/Tag_allOf'
    TagId:
      description: Unique Samsara ID of this tag.
      example: "342417"
      type: string
    TagName:
      description: Name of this tag.
      example: California
      maxLength: 191
      minLength: 1
      type: string
    TagResponse:
      description: A single tag.
      example: {}
      properties:
        data:
          $ref: '#/components/schemas/Tag'
      type: object
    TaggedObject:
      properties:
        id:
          description: The object ID.
          example: "23502866574"
          type: string
        name:
          description: The object name.
          example: Driver Don
          type: string
      required:
      - id
      type: object
    TaggedObjectId:
      description: The object ID.
      example: "23502866574"
      type: string
    TaggedObjectName:
      description: The object name.
      example: Driver Don
      type: string
    TinyTag:
      properties:
        id:
          description: Unique Samsara ID of this tag.
          example: "342417"
          type: string
        name:
          description: Name of this tag.
          example: California
          maxLength: 191
          minLength: 1
          type: string
        parentTagId:
          description: If this tag is part a hierarchical tag tree, this is the ID
            of the parent tag, otherwise this will be omitted.
          example: "4815"
          type: string
      type: object
    UnassignedDrivingSegmentListResponse:
      description: A list of driving segments with no associated driver(s).
      items:
        $ref: '#/components/schemas/UnassignedDrivingSegmentResponse'
      type: array
    UnassignedDrivingSegmentResponse:
      description: A driving segment with no associated driver(s) that may or may
        not be in a unassigned, pending, rejected, or assigned states.
      example:
        annotation: Yard move.
        driver:
          name: Susan Bob
          id: "88668"
        startTime: 2019-04-17T15:42:55Z
        createdAtTime: 2019-04-17T16:43:00Z
        endTime: 2019-04-17T16:42:55Z
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: pending
        vehicle:
          name: 'Midwest Truck #4'
          id: "123456789"
      properties:
        annotation:
          description: Annotation for the driving segment.
          example: Yard move.
          format: string
          type: string
        createdAtTime:
          description: The time that the server created the driving segment, specified
            in RFC 3339 format.
          example: 2019-04-17T16:43:00Z
          format: date-time
          type: string
        driver:
          $ref: '#/components/schemas/driverTinyResponse'
        endTime:
          description: End time of the driving segment, specified in RFC 3339 format.
          example: 2019-04-17T16:42:55Z
          format: date-time
          type: string
        id:
          description: Unique identifier for the unassigned driving segment.
          format: uuid
          type: string
        startTime:
          description: Start time of the driving segment, specified in RFC 3339 format.
          example: 2019-04-17T15:42:55Z
          format: date-time
          type: string
        status:
          description: Status of assignment for this segment.
          enum:
          - pending
          - accepted
          - rejected
          - unassigned
          - unknown
          example: pending
          format: string
          type: string
        vehicle:
          $ref: '#/components/schemas/vehicleTinyResponse'
      type: object
    UpdateAddressRequest:
      description: A request body to update an Address.
      example:
        notes: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
          street side.'
        formattedAddress: 350 Rhode Island St, San Francisco, CA
        geofence:
          polygon:
            vertices:
            - latitude: 37.765363
              longitude: -122.403098
            - latitude: 38.765363
              longitude: -122.403098
            - latitude: 37.765363
              longitude: -123.403098
          circle:
            latitude: 37.765363
            radiusMeters: 25
            longitude: -122.4029238
        latitude: 37.765363
        tagIds:
        - "3914"
        - "3914"
        externalIds:
          maintenanceId: "250020"
          payrollId: ABFS18600
        name: Samsara HQ
        addressTypes:
        - yard
        - yard
        contactIds:
        - "22408"
        - "22408"
        longitude: -122.4029238
      properties:
        addressTypes:
          description: Reporting location type associated with the address (used for
            ELD reporting purposes).
          items:
            enum:
            - yard
            - shortHaul
            example: yard
            type: string
          type: array
        contactIds:
          description: An array of Contact IDs associated with this Address.
          items:
            example: "22408"
            type: string
          type: array
        externalIds:
          additionalProperties:
            type: string
          description: The [external IDs](https://developers.samsara.com/docs/external-ids)
            for the given object.
          example:
            maintenanceId: "250020"
            payrollId: ABFS18600
          type: object
        formattedAddress:
          description: The full street address for this address/geofence, as it might
            be recognized by Google Maps.
          example: 350 Rhode Island St, San Francisco, CA
          maxLength: 1024
          type: string
        geofence:
          $ref: '#/components/schemas/AddressGeofence'
        latitude:
          description: Latitude of the address. Will be geocoded from `formattedAddress`
            if not provided.
          example: 37.765363
          format: double
          type: number
        longitude:
          description: Longitude of the address. Will be geocoded from `formattedAddress`
            if not provided.
          example: -122.4029238
          format: double
          type: number
        name:
          description: Name of the address.
          example: Samsara HQ
          maxLength: 255
          type: string
        notes:
          description: Notes about the address.
          example: 'Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island
            street side.'
          maxLength: 280
          type: string
        tagIds:
          description: An array of IDs of tags to associate with this address.
          items:
            example: "3914"
            type: string
          type: array
      type: object
    UpdateContactRequest:
      description: Information for adding a notification contact for alerts.
      example:
        firstName: Jane
        lastName: Jones
        phone: 111-222-3344
        email: jane.jones@yahoo.com
      properties:
        email:
          description: Email address of the contact.
          example: jane.jones@yahoo.com
          maxLength: 255
          type: string
        firstName:
          description: First name of the contact.
          example: Jane
          maxLength: 255
          type: string
        lastName:
          description: Last name of the contact.
          example: Jones
          maxLength: 255
          type: string
        phone:
          description: Phone number of the contact.
          example: 111-222-3344
          maxLength: 255
          type: string
      type: object
    UpdateDriverRequest:
      description: Driver that should be updated.
      example:
        eldAdverseWeatherExemptionEnabled: false
        eldExemptReason: Bad driver
        notes: Also goes by the nickname Furious Fred.
        eldYmEnabled: false
        licenseState: CA
        staticAssignedVehicleId: "456"
        timezone: America/Los_Angeles
        eldDayStartHour: 0
        tagIds:
        - "147"
        - "147"
        externalIds:
          maintenanceId: "250020"
          payrollId: ABFS18600
        vehicleGroupTagId: "342417"
        eldExempt: false
        carrierSettings:
          carrierName: Acme Inc.
          mainOfficeAddress: 1234 Pear St., Scranton, PA 62814
          dotNumber: 98231
        eldPcEnabled: false
        eldBigDayExemptionEnabled: false
        tachographCardNumber: "1000000492436002"
        password: aSecurePassword1234
        phone: "5558234327"
        name: Susan Jones
        licenseNumber: E1234567
        username: SusanJones
      properties:
        carrierSettings:
          $ref: '#/components/schemas/DriverCarrierSettings'
        driverActivationStatus:
          $ref: '#/components/schemas/DriverActivationStatus'
        eldAdverseWeatherExemptionEnabled:
          default: false
          description: Flag indicating this driver may use Adverse Weather exemptions
            in ELD logs.
          type: boolean
        eldBigDayExemptionEnabled:
          default: false
          description: Flag indicating this driver may use Big Day exemption in ELD
            logs.
          type: boolean
        eldDayStartHour:
          default: 0
          description: '`0` indicating midnight-to-midnight ELD driving hours, `12`
            to indicate noon-to-noon driving hours.'
          type: integer
        eldExempt:
          default: false
          description: Flag indicating this driver is exempt from the Electronic Logging
            Mandate.
          type: boolean
        eldExemptReason:
          description: Reason that this driver is exempt from the Electronic Logging
            Mandate (see eldExempt).
          example: Bad driver
          type: string
        eldPcEnabled:
          default: false
          description: Flag indicating this driver may select the Personal Conveyance
            duty status in ELD logs.
          type: boolean
        eldYmEnabled:
          default: false
          description: Flag indicating this driver may select the Yard Move duty status
            in ELD logs.
          type: boolean
        externalIds:
          additionalProperties:
            type: string
          description: The [external IDs](https://developers.samsara.com/docs/external-ids)
            for the given object.
          example:
            maintenanceId: "250020"
            payrollId: ABFS18600
          type: object
        licenseNumber:
          description: Driver's state issued license number. The combination of this
            number and `licenseState` must be unique.
          example: E1234567
          type: string
        licenseState:
          description: Abbreviation of state that issued driver's license.
          example: CA
          type: string
        locale:
          $ref: '#/components/schemas/DriverLocale'
        name:
          description: Driver's name.
          example: Susan Jones
          maxLength: 255
          minLength: 1
          type: string
        notes:
          description: Notes about the driver.
          example: Also goes by the nickname Furious Fred.
          maxLength: 4096
          type: string
        password:
          description: Password that the driver can use to login to the Samsara driver
            app.
          example: aSecurePassword1234
          type: string
        phone:
          description: Phone number of the driver.
          example: "5558234327"
          maxLength: 255
          type: string
        staticAssignedVehicleId:
          description: ID of vehicle that the driver is permanently assigned to. (uncommon).
          example: "456"
          type: string
        tachographCardNumber:
          description: Driver's assigned tachograph card number (Europe specific)
          example: "1000000492436002"
          type: string
        tagIds:
          description: IDs of tags the driver is associated with.
          items:
            example: "147"
            type: string
          type: array
        timezone:
          default: America/Los_Angeles
          description: Home terminal timezone, in order to indicate what time zone
            should be used to calculate the ELD logs. Driver timezones use [IANA timezone
            database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`,
            `America/New_York`, `Europe/London`, etc.). You can find a mapping of
            common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
          example: America/Los_Angeles
          type: string
        username:
          description: Driver's login username into the driver app. The username may
            not contain spaces or the '@' symbol. The username must be unique.
          example: SusanJones
          maxLength: 189
          minLength: 1
          type: string
        vehicleGroupTagId:
          description: Tag ID which determines which vehicles a driver will see when
            selecting vehicles.
          example: "342417"
          type: string
      type: object
    UpdateDvirRequest:
      description: Information about resolving a DVIR.
      example:
        signedAtTime: 2020-01-27T07:06:25Z
        authorId: "11"
        isResolved: true
        mechanicNotes: Replaced headlight on passenger side.
      properties:
        authorId:
          description: The user who is resolving the dvir.
          example: "11"
          type: string
        isResolved:
          description: Resolves the DVIR. Must be `true`.
          type: boolean
        mechanicNotes:
          description: The mechanics notes on the DVIR.
          example: Replaced headlight on passenger side.
          type: string
        signedAtTime:
          description: 'Time when user signed this DVIR. Defaults to now. UTC timestamp
            in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
      required:
      - authorId
      - isResolved
      type: object
    UpdateUserRequest:
      description: The user update arguments
      example:
        roles:
        - tagId: "3914"
          roleId: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
        - tagId: "3914"
          roleId: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
        name: Bob Smith
      properties:
        authType:
          $ref: '#/components/schemas/UserAuthType'
        name:
          description: The first and last name of the user.
          example: Bob Smith
          type: string
        roles:
          description: The list of roles that applies to this user. A user may have
            "organizational" roles, which apply to the user at the organizational
            level, and "tag-specific" roles, which apply to the user for a given tag.
          items:
            $ref: '#/components/schemas/UserRoleAssignmentRequest'
          type: array
      type: object
    UpdateVehicleRequest:
      description: All the editable portions of the vehicle object.
      example:
        staticAssignedDriverId: "123"
        engineHours: 10943
        licensePlate: XHK1234
        notes: These are notes about this given vehicle.
        tagIds:
        - "321"
        - "321"
        auxInputType2: boom
        externalIds:
          maintenanceId: "250020"
          payrollId: ABFS18600
        name: Truck A7
        odometerMeters: 9182
        vin: 1FUJA6BD31LJ09646
        auxInputType1: boom
        harshAccelerationSettingType: "off"
      properties:
        auxInputType1:
          $ref: '#/components/schemas/VehicleAuxInputType'
        auxInputType2:
          $ref: '#/components/schemas/VehicleAuxInputType'
        engineHours:
          description: A manual override for the vehicle's engine hours. You may only
            override a vehicle's engine hours if it cannot be read from on-board diagnostics.
            When you provide a manual engine hours override, Samsara will begin updating
            a vehicle's engine hours based on when the Samsara Vehicle Gateway is
            recieving power or not.
          example: 10943
          format: int64
          type: integer
        externalIds:
          additionalProperties:
            type: string
          description: The [external IDs](https://developers.samsara.com/docs/external-ids)
            for the given object.
          example:
            maintenanceId: "250020"
            payrollId: ABFS18600
          type: object
        harshAccelerationSettingType:
          $ref: '#/components/schemas/VehicleHarshAccelerationSettingType'
        licensePlate:
          description: 'The license plate of the Vehicle. **By default**: empty. Can
            be set or updated through the Samsara Dashboard or the API at any time.'
          example: XHK1234
          maxLength: 12
          type: string
        name:
          description: The human-readable name of the Vehicle. This is set by a fleet
            administrator and will appear in both Samsara’s cloud dashboard as well
            as the Samsara Driver mobile app. **By default**, this name is the serial
            number of the Samsara Vehicle Gateway. It can be set or updated through
            the Samsara Dashboard or through the API at any time.
          example: Truck A7
          type: string
        notes:
          default: ""
          description: These are generic notes about the Vehicle. Empty by default.
            Can be set or updated through the Samsara Dashboard or the API at any
            time.
          example: These are notes about this given vehicle.
          maxLength: 255
          type: string
        odometerMeters:
          description: A manual override for the vehicle's odometer. You may only
            override a vehicle's odometer if it cannot be read from on-board diagnostics.
            When you provide a manual odometer override, Samsara will begin updating
            a vehicle's odometer using GPS distance traveled since this override was
            set. See [here](https://kb.samsara.com/hc/en-us/articles/115005273667)
            for more details.
          example: 9182
          format: int64
          type: integer
        staticAssignedDriverId:
          description: ID for the static assigned driver of the vehicle.
          example: "123"
          type: string
        tagIds:
          description: An array of IDs of tags to associate with this vehicle.
          items:
            example: "321"
            type: string
          type: array
        vin:
          description: The VIN of the Vehicle. Most of the time, this will be automatically
            read from the engine computer by the Samsara Vehicle Gateway. It will
            be empty if it cannot be read. It can be set or updated through the Samsara
            Dashboard or the API at any time.
          example: 1FUJA6BD31LJ09646
          maxLength: 17
          minLength: 11
          type: string
      type: object
    User:
      description: A user object.
      example:
        roles:
        - role:
            name: Full Admin
            id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
          tag:
            parentTagId: "4815"
            name: East Coast
            id: "3914"
        - role:
            name: Full Admin
            id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
          tag:
            parentTagId: "4815"
            name: East Coast
            id: "3914"
        name: Bob Smith
        id: "123"
        email: user@company.com
      properties:
        authType:
          $ref: '#/components/schemas/UserAuthType'
        email:
          description: The email address of this user.
          example: user@company.com
          type: string
        id:
          description: ID of the user.
          example: "123"
          type: string
        name:
          description: The first and last name of the user.
          example: Bob Smith
          type: string
        roles:
          description: The list of roles that applies to this user. A user may have
            "organizational" roles, which apply to the user at the organizational
            level, and "tag-specific" roles, which apply to the user for a given tag.
          items:
            $ref: '#/components/schemas/UserRoleAssignment'
          type: array
      required:
      - authType
      - email
      - id
      - name
      - roles
      type: object
    UserAuthType:
      description: The authentication type the user uses to authenticate. To use SAML
        this organization must have a configured SAML integration.
      enum:
      - default
      - saml
      type: string
    UserEmail:
      description: The email address of this user.
      example: user@company.com
      type: string
    UserId:
      description: ID of the user.
      example: "123"
      type: string
    UserName:
      description: The first and last name of the user.
      example: Bob Smith
      type: string
    UserResponse:
      description: A single user.
      example:
        data:
          roles:
          - role:
              name: Full Admin
              id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
            tag:
              parentTagId: "4815"
              name: East Coast
              id: "3914"
          - role:
              name: Full Admin
              id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
            tag:
              parentTagId: "4815"
              name: East Coast
              id: "3914"
          name: Bob Smith
          id: "123"
          email: user@company.com
      properties:
        data:
          $ref: '#/components/schemas/User'
      type: object
    UserRole:
      description: A user role object.
      example:
        name: Full Admin
        id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
      properties:
        id:
          description: The unique ID for the role.
          example: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
          type: string
        name:
          description: The name of the role.
          example: Full Admin
          type: string
      type: object
    UserRoleAssignment:
      description: A role that applies to a user. If the role has a `tag`, then the
        role applies for that tag. If there is no `tag`, then the role applies at
        the organizational level. A user may have many tag-specific roles, but may
        only have one organizational level role. If the organizational level role
        has higher privileges than a tag-specific role, then the organizational role
        privileges will take precedence.
      example:
        role:
          name: Full Admin
          id: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
        tag:
          parentTagId: "4815"
          name: East Coast
          id: "3914"
      properties:
        role:
          $ref: '#/components/schemas/UserRole'
        tag:
          $ref: '#/components/schemas/tagTinyResponse'
      type: object
    UserRoleAssignmentRequest:
      description: A role that applies to a user. If the role has a `tagId`, then
        the role applies for that tag. If there is no `tagId`, then the role applies
        at the organizational level. A user may have many tag-specific roles, but
        may only have one organizational role. If the organizational level role has
        higher privileges than a tag-specific role, then the organizational role privileges
        will take precedence.
      example:
        tagId: "3914"
        roleId: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
      properties:
        roleId:
          description: The unique ID for the role.
          example: 8a9371af-82d1-4158-bf91-4ecc8d3a114c
          type: string
        tagId:
          description: ID of the tag this role applies to.
          example: "3914"
          type: string
      required:
      - roleId
      type: object
    UserRoles:
      description: The list of roles that applies to this user. A user may have "organizational"
        roles, which apply to the user at the organizational level, and "tag-specific"
        roles, which apply to the user for a given tag.
      items:
        $ref: '#/components/schemas/UserRoleAssignment'
      type: array
    UserRolesRequest:
      description: The list of roles that applies to this user. A user may have "organizational"
        roles, which apply to the user at the organizational level, and "tag-specific"
        roles, which apply to the user for a given tag.
      items:
        $ref: '#/components/schemas/UserRoleAssignmentRequest'
      type: array
    V1Asset:
      description: Basic information of an asset
      example:
        assetSerialNumber: SNTEST123
        engineHours: 104
        name: Trailer 123
        id: 1
        vehicleId: 2
        cable:
        - assetType: Reefer (Thermo King)
        - assetType: Reefer (Thermo King)
      properties:
        assetSerialNumber:
          description: Serial number of the host asset
          example: SNTEST123
          type: string
        cable:
          description: The cable connected to the asset
          items:
            $ref: '#/components/schemas/V1Asset_cable'
          type: array
        engineHours:
          description: Engine hours
          example: 104
          type: integer
        id:
          description: Asset ID
          example: 1
          format: int64
          type: integer
        name:
          description: Asset name
          example: Trailer 123
          type: string
        vehicleId:
          description: The ID of the Vehicle associated to the Asset (if present)
          example: 2
          format: int64
          type: integer
      required:
      - id
      type: object
    V1AssetCurrentLocation:
      description: Current location of an asset
      example:
        latitude: 37.0
        speedMilesPerHour: 35.0
        location: 525 York, San Francisco, CA
        longitude: -122.7
        timeMs: 12314151
      properties:
        latitude:
          description: The latitude of the location in degrees.
          example: 37.0
          type: number
        location:
          description: The best effort (street,city,state) for the latitude and longitude.
          example: 525 York, San Francisco, CA
          type: string
        longitude:
          description: The longitude of the location in degrees.
          example: -122.7
          type: number
        speedMilesPerHour:
          description: The speed calculated from GPS that the asset was traveling
            at in miles per hour.
          example: 35.0
          type: number
        timeMs:
          description: Time in Unix milliseconds since epoch when the asset was at
            the location.
          example: 12314151
          type: number
      type: object
    V1AssetCurrentLocationsResponse:
      description: Basic information of an asset
      example:
        assetSerialNumber: 8dka2810
        engineHours: 104
        name: Trailer 123
        location:
        - latitude: 37.0
          speedMilesPerHour: 35.0
          location: 525 York, San Francisco, CA
          longitude: -122.7
          timeMs: 12314151
        - latitude: 37.0
          speedMilesPerHour: 35.0
          location: 525 York, San Francisco, CA
          longitude: -122.7
          timeMs: 12314151
        id: 1
        cable:
          assetType: Reefer (Thermo King)
      properties:
        assetSerialNumber:
          description: Asset serial number
          example: 8dka2810
          type: string
        cable:
          $ref: '#/components/schemas/V1AssetCurrentLocationsResponse_cable'
        engineHours:
          description: Engine hours
          example: 104
          type: integer
        id:
          description: Asset ID
          example: 1
          format: int64
          type: integer
        location:
          description: Current location of an asset
          items:
            $ref: '#/components/schemas/V1AssetCurrentLocation'
          type: array
        name:
          description: Asset name
          example: Trailer 123
          type: string
      required:
      - id
      type: object
    V1AssetLocationResponse:
      description: A list of historical asset locations.
      items:
        description: Asset location details.
        properties:
          latitude:
            description: The latitude of the location in degrees.
            example: 37.0
            type: number
          location:
            description: The best effort (street,city,state) for the latitude and
              longitude.
            example: 525 York, San Francisco, CA
            type: string
          longitude:
            description: The longitude of the location in degrees.
            example: -122.7
            type: number
          speedMilesPerHour:
            description: The speed calculated from GPS that the asset was traveling
              at in miles per hour.
            example: 35.0
            type: number
          time:
            description: Time in Unix milliseconds since epoch when the asset was
              at the location.
            example: 12314151
            type: number
        type: object
      type: array
    V1AssetReeferResponse:
      description: Reefer-specific asset details
      example:
        reeferStats:
          fuelPercentage:
          - fuelPercentage: 99
            changedAtMs: 1453449599999
          - fuelPercentage: 99
            changedAtMs: 1453449599999
          powerStatus:
          - changedAtMs: 1453449599999
            status: Active (Continuous)
          - changedAtMs: 1453449599999
            status: Active (Continuous)
          engineHours:
          - engineHours: 1200
            changedAtMs: 1453449599999
          - engineHours: 1200
            changedAtMs: 1453449599999
          setPoint:
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          returnAirTemp:
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          alarms:
          - alarms:
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            changedAtMs: 1453449599999
          - alarms:
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            changedAtMs: 1453449599999
        name: Reefer 123
        id: 1
        assetType: Reefer (Thermo King)
      properties:
        assetType:
          description: Asset type
          example: Reefer (Thermo King)
          type: string
        id:
          description: Asset ID
          example: 1
          type: integer
        name:
          description: Asset name
          example: Reefer 123
          type: string
        reeferStats:
          $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats'
      type: object
    V1AssetsReefer:
      description: Reefer-specific details
      example:
        reeferStats:
          fuelPercentage:
          - fuelPercentage: 99
            changedAtMs: 1453449599999
          - fuelPercentage: 99
            changedAtMs: 1453449599999
          powerStatus:
          - changedAtMs: 1453449599999
            status: Active (Continuous)
          - changedAtMs: 1453449599999
            status: Active (Continuous)
          engineHours:
          - engineHours: 1200
            changedAtMs: 1453449599999
          - engineHours: 1200
            changedAtMs: 1453449599999
          setPoint:
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          dischargeAirTemperature:
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          ambientAirTemperature:
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          reeferAlarms:
          - alarms:
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            changedAtMs: 1453449599999
          - alarms:
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            - severity: 1
              operatorAction: Check and repair at end of trip
              description: Check Return Air Sensor
              alarmCode: 102
            changedAtMs: 1453449599999
          returnAirTemperature:
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
          - tempInMilliC: 31110
            changedAtMs: 1453449599999
        name: Reefer 123
        id: 1
        assetType: Thermo King
      properties:
        assetType:
          description: Asset type
          example: Thermo King
          type: string
        id:
          description: Asset ID
          example: 1
          type: integer
        name:
          description: Asset name
          example: Reefer 123
          type: string
        reeferStats:
          $ref: '#/components/schemas/V1AssetsReefer_reeferStats'
      type: object
    V1CargoResponse:
      description: Contains the current cargo status of a sensor.
      example:
        sensors:
        - cargoStatusTime: 2019-04-17T16:42:55Z
          cargoEmpty: true
          name: Trailer Cargo V1Sensor
          id: 122
          vehicleId: 124
          trailerId: 123
        - cargoStatusTime: 2019-04-17T16:42:55Z
          cargoEmpty: true
          name: Trailer Cargo V1Sensor
          id: 122
          vehicleId: 124
          trailerId: 123
        groupId: 101
      properties:
        groupId:
          description: Deprecated.
          example: 101
          format: int64
          type: integer
        sensors:
          items:
            $ref: '#/components/schemas/V1CargoResponse_sensors'
          type: array
      type: object
    V1DataInputHistoryResponse:
      example:
        name: Pump Flow
        id: 12345
        points:
        - value: 12.332
          timeMs: 1453449599999
        - value: 12.332
          timeMs: 1453449599999
      properties:
        id:
          description: The ID of this data input
          example: 12345
          format: int64
          type: integer
        name:
          description: Name of this data input
          example: Pump Flow
          type: string
        points:
          description: Data points from this data input
          items:
            $ref: '#/components/schemas/V1DataInputHistoryResponse_points'
          type: array
      required:
      - name
      type: object
    V1DispatchJob:
      allOf:
      - $ref: '#/components/schemas/V1DispatchJob_allOf'
      - $ref: '#/components/schemas/V1DispatchJobCreate'
    V1DispatchJobCreate:
      properties:
        destination_address:
          description: The address of the job destination, as it would be recognized
            if provided to maps.google.com. Optional if a valid destination address
            ID is provided.
          example: 123 Main St, Philadelphia, PA 19106
          type: string
        destination_address_id:
          description: ID of the job destination associated with an address book entry.
            Optional if valid values are provided for destination address and latitude/longitude.
            If a valid destination address ID is provided, address/latitude/longitude
            will be used from the address book entry. Name of the address book entry
            will only be used if the destination name is not provided.
          example: 67890
          format: int64
          type: integer
        destination_lat:
          description: Latitude of the destination in decimal degrees. Optional if
            a valid destination address ID is provided.
          example: 123.456
          format: double
          type: number
        destination_lng:
          description: Longitude of the destination in decimal degrees. Optional if
            a valid destination address ID is provided.
          example: 37.459
          format: double
          type: number
        destination_name:
          description: The name of the job destination. If provided, it will take
            precedence over the name of the address book entry.
          example: ACME Inc. Philadelphia HQ
          type: string
        notes:
          description: Notes regarding the details of this job, maximum of 2000 characters;
            newline characters ('\n')can be used for formatting.
          example: Ensure crates are stacked no more than 3 high.
          type: string
        scheduled_arrival_time_ms:
          description: The time at which the assigned driver is scheduled to arrive
            at the job destination.
          example: 1462881998034
          format: int64
          type: integer
        scheduled_departure_time_ms:
          description: The time at which the assigned driver is scheduled to depart
            from the job destination.
          example: 1462881998034
          format: int64
          type: integer
      required:
      - scheduled_arrival_time_ms
      type: object
    V1DispatchJobDocumentInfo:
      properties:
        driverId:
          description: ID of driver that submitted the document.
          example: 1234
          type: integer
        id:
          description: ID of document. This can be used to query for the document's
            info via the /v1/fleet/drivers/{driver_id}/documents/{document_id} endpoint
          example: 2018_42424242
          type: string
      required:
      - driverId
      - id
      type: object
    V1DispatchJobUpdate:
      allOf:
      - $ref: '#/components/schemas/V1DispatchJobUpdate_allOf'
      - $ref: '#/components/schemas/V1DispatchJobCreate'
    V1DispatchJobWithoutETA:
      allOf:
      - $ref: '#/components/schemas/V1DispatchJobWithoutETA_allOf'
      - $ref: '#/components/schemas/V1DispatchJobCreate'
    V1DispatchRoute:
      allOf:
      - $ref: '#/components/schemas/V1DispatchRoute_allOf'
      - $ref: '#/components/schemas/V1DispatchRouteBase'
    V1DispatchRouteBase:
      properties:
        actual_end_ms:
          description: The time in Unix epoch milliseconds that the route actually
            ended.
          example: 1462882101000
          format: int64
          type: integer
        actual_start_ms:
          description: The time in Unix epoch milliseconds that the route actually
            started.
          example: 1462882098000
          format: int64
          type: integer
        driver_id:
          description: ID of the driver assigned to the dispatch route. Note that
            driver_id and vehicle_id are mutually exclusive. If neither is specified,
            then the route is unassigned.
          example: 555
          format: int64
          type: integer
        group_id:
          description: Deprecated.
          example: 101
          format: int64
          type: integer
        name:
          description: Descriptive name of this route.
          example: 'Bid #123'
          type: string
        notes:
          description: Notes regarding the details of this route; maximum of 2000
            characters; newline characters ('\n')can be used for formatting.
          example: |-
            Please make sure to confirm crate count at each stop on this route.
            Total number of crates for route: 23.
          type: string
        odometer_end_meters:
          description: Odometer reading at the end of the route. Will not be returned
            if Route is not completed or if Odometer information is not available
            for the relevant vehicle.
          example: 2000000
          format: int64
          type: integer
        odometer_start_meters:
          description: Odometer reading at the start of the route. Will not be returned
            if Route has not started or if Odometer information is not available for
            the relevant vehicle.
          example: 1000000
          format: int64
          type: integer
        scheduled_end_ms:
          description: The time in Unix epoch milliseconds that the last job in the
            route is scheduled to end.
          example: 1462881998034
          format: int64
          type: integer
        scheduled_meters:
          description: The distance expected to be traveled for this route in meters.
          example: 10000
          format: int64
          type: integer
        scheduled_start_ms:
          description: The time in Unix epoch milliseconds that the route is scheduled
            to start.
          example: 1462881998034
          format: int64
          type: integer
        start_location_address:
          description: The address of the route's starting location, as it would be
            recognized if provided to maps.google.com. Optional if a valid start location
            address ID is provided.
          example: 123 Main St, Philadelphia, PA 19106
          type: string
        start_location_address_id:
          description: ID of the start location associated with an address book entry.
            Optional if valid values are provided for start location address and latitude/longitude.
            If a valid start location address ID is provided, address/latitude/longitude
            will be used from the address book entry. Name of the address book entry
            will only be used if the start location name is not provided.
          example: 67890
          format: int64
          type: integer
        start_location_lat:
          description: Latitude of the start location in decimal degrees. Optional
            if a valid start location address ID is provided.
          example: 123.456
          format: double
          type: number
        start_location_lng:
          description: Longitude of the start location in decimal degrees. Optional
            if a valid start location address ID is provided.
          example: 37.459
          format: double
          type: number
        start_location_name:
          description: The name of the route's starting location. If provided, it
            will take precedence over the name of the address book entry.
          example: ACME Inc. Philadelphia HQ
          type: string
        trailer_id:
          description: ID of the trailer assigned to the dispatch route. Note that
            trailers can only be assigned to routes that have a Vehicle or Driver
            assigned to them.
          example: 666
          format: int64
          type: integer
        vehicle_id:
          description: ID of the vehicle assigned to the dispatch route. Note that
            vehicle_id and driver_id are mutually exclusive. If neither is specified,
            then the route is unassigned.
          example: 444
          format: int64
          type: integer
      type: object
    V1DispatchRouteCreate:
      allOf:
      - $ref: '#/components/schemas/V1DispatchRouteCreate_allOf'
      - $ref: '#/components/schemas/V1DispatchRouteCreateBase'
    V1DispatchRouteCreateBase:
      properties:
        driver_id:
          description: ID of the driver assigned to the dispatch route. Note that
            driver_id and vehicle_id are mutually exclusive. If neither is specified,
            then the route is unassigned.
          example: 555
          format: int64
          type: integer
        name:
          description: Descriptive name of this route.
          example: 'Bid #123'
          type: string
        notes:
          description: Notes regarding the details of this route; maximum of 2000
            characters; newline characters ('\n')can be used for formatting.
          example: |-
            Please make sure to confirm crate count at each stop on this route.
            Total number of crates for route: 23.
          type: string
        scheduled_end_ms:
          description: The time in Unix epoch milliseconds that the last job in the
            route is scheduled to end.
          example: 1462881998034
          format: int64
          type: integer
        scheduled_meters:
          description: The distance expected to be traveled for this route in meters.
          example: 10000
          format: int64
          type: integer
        scheduled_start_ms:
          description: The time in Unix epoch milliseconds that the route is scheduled
            to start.
          example: 1462881998034
          format: int64
          type: integer
        start_location_address:
          description: The address of the route's starting location, as it would be
            recognized if provided to maps.google.com. Optional if a valid start location
            address ID is provided.
          example: 123 Main St, Philadelphia, PA 19106
          type: string
        start_location_address_id:
          description: ID of the start location associated with an address book entry.
            Optional if valid values are provided for start location address and latitude/longitude.
            If a valid start location address ID is provided, address/latitude/longitude
            will be used from the address book entry. Name of the address book entry
            will only be used if the start location name is not provided.
          example: 67890
          format: int64
          type: integer
        start_location_lat:
          description: Latitude of the start location in decimal degrees. Optional
            if a valid start location address ID is provided.
          example: 123.456
          format: double
          type: number
        start_location_lng:
          description: Longitude of the start location in decimal degrees. Optional
            if a valid start location address ID is provided.
          example: 37.459
          format: double
          type: number
        start_location_name:
          description: The name of the route's starting location. If provided, it
            will take precedence over the name of the address book entry.
          example: ACME Inc. Philadelphia HQ
          type: string
        trailer_id:
          description: ID of the trailer assigned to the dispatch route. Note that
            trailers can only be assigned to routes that have a Vehicle or Driver
            assigned to them.
          example: 666
          format: int64
          type: integer
        vehicle_id:
          description: ID of the vehicle assigned to the dispatch route. Note that
            vehicle_id and driver_id are mutually exclusive. If neither is specified,
            then the route is unassigned.
          example: 444
          format: int64
          type: integer
      required:
      - name
      - scheduled_start_ms
      type: object
    V1DispatchRouteHistoricalEntry:
      example:
        changed_at_ms: 1499411220000
      properties:
        changed_at_ms:
          description: Timestamp that the route was updated, represented as Unix milliseconds
            since epoch.
          example: 1499411220000
          format: int64
          type: integer
        route:
          $ref: '#/components/schemas/V1DispatchRoute'
      type: object
    V1DispatchRouteHistory:
      example:
        history:
        - changed_at_ms: 1499411220000
        - changed_at_ms: 1499411220000
      properties:
        history:
          description: History of the route's state changes.
          items:
            $ref: '#/components/schemas/V1DispatchRouteHistoricalEntry'
          type: array
      type: object
    V1DispatchRouteUpdate:
      allOf:
      - $ref: '#/components/schemas/V1DispatchRouteUpdate_allOf'
      - $ref: '#/components/schemas/V1DispatchRouteUpdateBase'
    V1DispatchRouteUpdateBase:
      allOf:
      - $ref: '#/components/schemas/V1DispatchRouteUpdateBase_allOf'
      - $ref: '#/components/schemas/V1DispatchRouteCreateBase'
    V1DispatchRouteWithoutETA:
      allOf:
      - $ref: '#/components/schemas/V1DispatchRouteWithoutETA_allOf'
      - $ref: '#/components/schemas/V1DispatchRouteBase'
    V1DispatchRoutes:
      items:
        $ref: '#/components/schemas/V1DispatchRouteWithoutETA'
      type: array
    V1Document:
      allOf:
      - $ref: '#/components/schemas/V1Document_allOf'
      - $ref: '#/components/schemas/V1DocumentBase'
    V1DocumentBase:
      properties:
        dispatchJobId:
          description: ID of the Samsara dispatch job for which the document is submitted.
          example: 773
          format: int64
          type: integer
        notes:
          description: Notes submitted with this document.
          example: Fueled up before delivery.
          type: string
        state:
          default: Required
          description: The condition of the document created for the driver. Can be
            either `Required` or `Submitted`. If no value is specified, `state` defaults
            to `Required`. `Required` documents are pre-populated documents for the
            Driver to fill out in the Driver App and have not yet been submitted.
            `Submitted` documents have been submitted by the driver in the Driver
            App.
          enum:
          - Required
          - Submitted
          example: Submitted
          type: string
      required:
      - dispatchJobId
      - notes
      type: object
    V1DocumentCreate:
      allOf:
      - $ref: '#/components/schemas/V1DocumentCreate_allOf'
      - $ref: '#/components/schemas/V1DocumentCreateBase'
    V1DocumentCreateBase:
      properties:
        dispatchJobId:
          description: ID of the Samsara dispatch job for which the document is submitted.
          example: 773
          format: int64
          type: integer
        notes:
          description: Notes submitted with this document.
          example: Fueled up before delivery.
          type: string
        state:
          default: Required
          description: The condition of the document created for the driver. Can be
            either `Required` or `Submitted`. If no value is specified, `state` defaults
            to `Required`. `Required` documents are pre-populated documents for the
            Driver to fill out in the Driver App and have not yet been submitted.
            `Submitted` documents will show up as submitted by the driver through
            the driver app.
          enum:
          - Required
          - Submitted
          example: Required
          type: string
      type: object
    V1DocumentField:
      allOf:
      - $ref: '#/components/schemas/V1DocumentField_allOf'
      - $ref: '#/components/schemas/V1DocumentFieldCreate'
    V1DocumentFieldCreate:
      properties:
        dateTimeValue:
          $ref: '#/components/schemas/V1DocumentFieldCreate_dateTimeValue'
        multipleChoiceValue:
          description: The value of a `ValueType_MultipleChoice` field.
          items:
            $ref: '#/components/schemas/V1DocumentFieldCreate_multipleChoiceValue'
          type: array
        numberValue:
          description: The value of a `ValueType_Number` field.
          example: 12.34
          format: double
          type: number
        stringValue:
          description: The value of a `ValueType_String` field.
          example: This is a string.
          type: string
        valueType:
          description: |-
            The type of this field.
            Valid values: `ValueType_Number`, `ValueType_String`, `ValueType_Photo`, `ValueType_MultipleChoice`, `ValueType_Signature`, `ValueType_DateTime`.
            When creating documents via API, only `ValueType_Number`, `ValueType_String`, `ValueType_MultipleChoice`, and `ValueType_DateTime` are accepted.
          example: ValueType_Number
          type: string
      required:
      - valueType
      type: object
    V1DocumentFieldType:
      example:
        numberValueTypeMetadata:
          numDecimalPlaces: 2.0
        multipleChoiceValueTypeMetadata:
          multipleChoiceOptionLabels:
            label: Loaded
        signatureValueTypeMetadata:
          legalText: legalText
        valueType: ValueType_Number
        label: Fuel Cost ($)
      properties:
        label:
          description: Name of this field type.
          example: Fuel Cost ($)
          type: string
        multipleChoiceValueTypeMetadata:
          $ref: '#/components/schemas/V1DocumentFieldType_multipleChoiceValueTypeMetadata'
        numberValueTypeMetadata:
          $ref: '#/components/schemas/V1DocumentFieldType_numberValueTypeMetadata'
        signatureValueTypeMetadata:
          $ref: '#/components/schemas/V1DocumentFieldType_signatureValueTypeMetadata'
        valueType:
          description: |-
            The type of value this field can have.
            Valid values: `ValueType_Number`, `ValueType_String`, `ValueType_Photo`, `ValueType_MultipleChoice`, `ValueType_Signature`, `ValueType_DateTime`.
          example: ValueType_Number
          type: string
      required:
      - label
      - valueType
      type: object
    V1DocumentType:
      example:
        fieldTypes:
        - numberValueTypeMetadata:
            numDecimalPlaces: 2.0
          multipleChoiceValueTypeMetadata:
            multipleChoiceOptionLabels:
              label: Loaded
          signatureValueTypeMetadata:
            legalText: legalText
          valueType: ValueType_Number
          label: Fuel Cost ($)
        - numberValueTypeMetadata:
            numDecimalPlaces: 2.0
          multipleChoiceValueTypeMetadata:
            multipleChoiceOptionLabels:
              label: Loaded
          signatureValueTypeMetadata:
            legalText: legalText
          valueType: ValueType_Number
          label: Fuel Cost ($)
        name: Fuel Receipt
        uuid: 4aff772c-a7bb-45e6-8e41-6a53e34feb83
        orgId: 773
      properties:
        fieldTypes:
          description: The fields associated with this document type.
          items:
            $ref: '#/components/schemas/V1DocumentFieldType'
          type: array
        name:
          description: Name of the document type.
          example: Fuel Receipt
          type: string
        orgId:
          description: ID for the organization this document belongs to.
          example: 773
          format: int64
          type: integer
        uuid:
          description: Universally unique identifier for the document type. Can be
            passed in as the `documentTypeUuid` when creating a document for this
            document type.
          example: 4aff772c-a7bb-45e6-8e41-6a53e34feb83
          type: string
      required:
      - fieldTypes
      - orgId
      - uuid
      type: object
    V1DocumentTypes:
      items:
        $ref: '#/components/schemas/V1DocumentType'
      type: array
    V1Documents:
      description: List of documents.
      example:
        driverDocuments:
        - null
        - null
      properties:
        driverDocuments:
          description: List of documents.
          items:
            $ref: '#/components/schemas/V1Document'
          type: array
      type: object
    V1DoorResponse:
      description: Contains the current door status of a sensor.
      example:
        sensors:
        - doorClosed: true
          doorStatusTime: 2019-04-17T16:42:55Z
          name: Trailer Door V1Sensor
          id: 122
          vehicleId: 124
          trailerId: 123
        - doorClosed: true
          doorStatusTime: 2019-04-17T16:42:55Z
          name: Trailer Door V1Sensor
          id: 122
          vehicleId: 124
          trailerId: 123
        groupId: 101
      properties:
        groupId:
          description: Deprecated.
          example: 101
          format: int64
          type: integer
        sensors:
          items:
            $ref: '#/components/schemas/V1DoorResponse_sensors'
          type: array
      type: object
    V1DriverDailyLogResponse:
      example:
        days:
        - certifiedAtMs: 0.8008281904610115
          endMs: 1473836400000
          startMs: 1473750000000
          trailerIds:
          - 10293
          - 192933
          activeHours: 5.4
          distanceMiles: 123.24
          activeMs: 691200
          certified: true
          shippingDocIds:
          - 14334
          - 104920
          vehicleIds:
          - 192319
          - 12958
        - certifiedAtMs: 0.8008281904610115
          endMs: 1473836400000
          startMs: 1473750000000
          trailerIds:
          - 10293
          - 192933
          activeHours: 5.4
          distanceMiles: 123.24
          activeMs: 691200
          certified: true
          shippingDocIds:
          - 14334
          - 104920
          vehicleIds:
          - 192319
          - 12958
      properties:
        days:
          items:
            $ref: '#/components/schemas/V1DriverDailyLogResponse_days'
          type: array
      type: object
    V1DriverSafetyScoreResponse:
      description: Safety score details for a driver
      example:
        crashCount: 0
        driverId: 1234
        harshAccelCount: 1
        harshEvents:
        - harshEventType: Harsh Braking
          vehicleId: 212014918086169
          timestampMs: 1535590776000
        - harshEventType: Harsh Braking
          vehicleId: 212014918086169
          timestampMs: 1535590776000
        totalDistanceDrivenMeters: 291836
        safetyScore: 97
        totalHarshEventCount: 3
        totalTimeDrivenMs: 19708293
        harshTurningCount: 0
        timeOverSpeedLimitMs: 3769
        harshBrakingCount: 2
        safetyScoreRank: "26"
      properties:
        crashCount:
          description: Crash event count
          example: 0
          type: integer
        driverId:
          description: Driver ID
          example: 1234
          type: integer
        harshAccelCount:
          description: Harsh acceleration event count
          example: 1
          type: integer
        harshBrakingCount:
          description: Harsh braking event count
          example: 2
          type: integer
        harshEvents:
          items:
            $ref: '#/components/schemas/V1SafetyReportHarshEvent'
          type: array
        harshTurningCount:
          description: Harsh turning event count
          example: 0
          type: integer
        safetyScore:
          description: Safety Score
          example: 97
          type: integer
        safetyScoreRank:
          description: Safety Score Rank
          example: "26"
          type: string
        timeOverSpeedLimitMs:
          description: Amount of time driven over the speed limit in milliseconds
          example: 3769
          type: integer
        totalDistanceDrivenMeters:
          description: Total distance driven in meters
          example: 291836
          type: integer
        totalHarshEventCount:
          description: Total harsh event count
          example: 3
          type: integer
        totalTimeDrivenMs:
          description: Amount of time driven in milliseconds
          example: 19708293
          type: integer
      type: object
    V1DvirBase:
      example:
        defectsNeedNotBeCorrected: false
        defectsCorrected: true
        vehicleCondition: SATISFACTORY
        inspectionType: pre trip
        trailerDefects:
        - resolvedByDriverId: 2581
          resolvedAt: 1453449599999
          comment: Air Compressor not working
          id: 18
          defectType: AIR_COMPRESSOR
          resolvedByMechanicId: 14849
          resolved: true
        - resolvedByDriverId: 2581
          resolvedAt: 1453449599999
          comment: Air Compressor not working
          id: 18
          defectType: AIR_COMPRESSOR
          resolvedByMechanicId: 14849
          resolved: true
        mechanicOrAgentSignature:
          mechanicUserId: 14849
          driverId: 2581
          name: John Smith
          signedAt: 12535500000
          type: driver
          email: j.smith@yahoo.com
          username: jsmith
        mechanicNotes: The vehicle is now safe.
        vehicle:
          name: Storer's vehicle 19
          id: 19
        authorSignature:
          mechanicUserId: 14849
          driverId: 2581
          name: John Smith
          signedAt: 12535500000
          type: driver
          email: j.smith@yahoo.com
          username: jsmith
        odometerMiles: 49912
        vehicleDefects:
        - resolvedByDriverId: 2581
          resolvedAt: 1453449599999
          comment: Air Compressor not working
          id: 18
          defectType: AIR_COMPRESSOR
          resolvedByMechanicId: 14849
          resolved: true
        - resolvedByDriverId: 2581
          resolvedAt: 1453449599999
          comment: Air Compressor not working
          id: 18
          defectType: AIR_COMPRESSOR
          resolvedByMechanicId: 14849
          resolved: true
        nextDriverSignature:
          driverId: 2581
          name: John Smith
          signedAt: 12535500000
          type: driver
          email: j.smith@yahoo.com
          username: jsmith
        trailerName: Storer's Trailer 19
        id: 19
        trailerId: 19
        startedAtMs: 1453449599999
        timeMs: 1453449599999
      properties:
        authorSignature:
          $ref: '#/components/schemas/V1DvirBase_authorSignature'
        defectsCorrected:
          description: Signifies if the defects on the vehicle corrected after the
            DVIR is done.
          example: true
          type: boolean
        defectsNeedNotBeCorrected:
          description: Signifies if the defects on this vehicle can be ignored.
          example: false
          type: boolean
        id:
          description: The id of this DVIR record.
          example: 19
          format: int64
          type: integer
        inspectionType:
          description: Inspection type of the DVIR.
          example: pre trip
          type: string
        mechanicNotes:
          description: The mechanics notes on the DVIR.
          example: The vehicle is now safe.
          type: string
        mechanicOrAgentSignature:
          $ref: '#/components/schemas/V1DvirBase_mechanicOrAgentSignature'
        nextDriverSignature:
          $ref: '#/components/schemas/V1DvirBase_nextDriverSignature'
        odometerMiles:
          description: The odometer reading in miles for the vehicle when the DVIR
            was done.
          example: 49912
          format: int64
          type: integer
        startedAtMs:
          description: Timestamp when driver began filling out this DVIR, in UNIX
            milliseconds.
          example: 1453449599999
          format: int64
          type: integer
        timeMs:
          description: Timestamp of when this DVIR was signed & completed, in UNIX
            milliseconds.
          example: 1453449599999
          format: int64
          type: integer
        trailerDefects:
          description: Defects registered for the trailer which was part of the DVIR.
          items:
            $ref: '#/components/schemas/V1DvirDefectBase'
          type: array
        trailerId:
          description: The id of the trailer which was part of the DVIR.
          example: 19
          type: integer
        trailerName:
          description: The name of the trailer which was part of the DVIR.
          example: Storer's Trailer 19
          type: string
        vehicle:
          $ref: '#/components/schemas/V1DvirBase_vehicle'
        vehicleCondition:
          description: The condition of vechile on which DVIR was done.
          example: SATISFACTORY
          type: string
        vehicleDefects:
          description: Defects registered for the vehicle which was part of the DVIR.
          items:
            $ref: '#/components/schemas/V1DvirDefectBase'
          type: array
      type: object
    V1DvirDefectBase:
      example:
        resolvedByDriverId: 2581
        resolvedAt: 1453449599999
        comment: Air Compressor not working
        id: 18
        defectType: AIR_COMPRESSOR
        resolvedByMechanicId: 14849
        resolved: true
      properties:
        comment:
          description: The comment describing the type of DVIR defect.
          example: Air Compressor not working
          type: string
        defectType:
          description: 'The type of DVIR defect. Possible values: [`AIR_COMPRESSOR`,
            `AIR_CONDITIONER`, `AIR_LINES`, `BATTERY`, `BELTS_HOSES`, `BRAKE_ACCESSORIES`,
            `BRAKE_CHECK`, `BRAKE_CONNECTIONS`, `BRAKES`, `CLUTCH`, `COUPLING_DEVICES`,
            `DEFROSTER_HEATER`, `DOORS`, `DRIVE_LINE`, `EMERGENCY_DOOR_AND_BUZZER`,
            `ENGINE`, `ENTRANCE_STEPS`, `EXHAUST`, `FIFTH_WHEEL`, `FIRST_AID_KIT`,
            `FLUID_LEVELS`, `FRAME_ASSEMBLY`, `FRONT_AXLE`, `FUEL_TANKS`, `HORN`,
            `INTERIOR_AND_FLOOR`, `LANDING_GEAR`, `LIGHTS`, `MIRRORS`, `MUFFLER`,
            `OIL_PRESSURE`, `OTHER`, `RADIATOR`, `REAR_END`, `REFLECTORS`, `ROOF`,
            `SAFETY_EQUIPMENT`, `STARTER`, `STEERING`, `STOP_ARM_CONTROL`, `STOP_ARM`,
            `SUSPENSION`, `TIRE_CHAINS`, `TIRES`, `TRANSMISSION`, `TRIP_RECORDER`,
            `WHEELS_RIMS`, `WINDOWS`, `WINDSHIELD_WIPERS`, `UNSET`]'
          example: AIR_COMPRESSOR
          type: string
        id:
          description: The id of this defect.
          example: 18
          format: int64
          type: integer
        resolved:
          description: Signifies if this defect is resolved.
          example: true
          type: boolean
        resolvedAt:
          description: Timestamp when this defect was resolved, in UNIX milliseconds.  Will
            not be returned if the defect is unresolved.
          example: 1453449599999
          format: int64
          type: integer
        resolvedByDriverId:
          description: ID of the driver who resolved this defect. Will not be returned
            if the defect is unresolved or resolvedByMechanicId is returned.
          example: 2581
          format: int64
          type: integer
        resolvedByMechanicId:
          description: ID of the mechanic who resolved this defect. Will not be returned
            if the defect is unresolved or resolvedByDriverId is returned.
          example: 14849
          format: int64
          type: integer
      type: object
    V1DvirListResponse:
      example:
        dvirs:
        - defectsNeedNotBeCorrected: false
          defectsCorrected: true
          vehicleCondition: SATISFACTORY
          inspectionType: pre trip
          trailerDefects:
          - resolvedByDriverId: 2581
            resolvedAt: 1453449599999
            comment: Air Compressor not working
            id: 18
            defectType: AIR_COMPRESSOR
            resolvedByMechanicId: 14849
            resolved: true
          - resolvedByDriverId: 2581
            resolvedAt: 1453449599999
            comment: Air Compressor not working
            id: 18
            defectType: AIR_COMPRESSOR
            resolvedByMechanicId: 14849
            resolved: true
          mechanicOrAgentSignature:
            mechanicUserId: 14849
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          mechanicNotes: The vehicle is now safe.
          vehicle:
            name: Storer's vehicle 19
            id: 19
          authorSignature:
            mechanicUserId: 14849
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          odometerMiles: 49912
          vehicleDefects:
          - resolvedByDriverId: 2581
            resolvedAt: 1453449599999
            comment: Air Compressor not working
            id: 18
            defectType: AIR_COMPRESSOR
            resolvedByMechanicId: 14849
            resolved: true
          - resolvedByDriverId: 2581
            resolvedAt: 1453449599999
            comment: Air Compressor not working
            id: 18
            defectType: AIR_COMPRESSOR
            resolvedByMechanicId: 14849
            resolved: true
          nextDriverSignature:
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          trailerName: Storer's Trailer 19
          id: 19
          trailerId: 19
          startedAtMs: 1453449599999
          timeMs: 1453449599999
        - defectsNeedNotBeCorrected: false
          defectsCorrected: true
          vehicleCondition: SATISFACTORY
          inspectionType: pre trip
          trailerDefects:
          - resolvedByDriverId: 2581
            resolvedAt: 1453449599999
            comment: Air Compressor not working
            id: 18
            defectType: AIR_COMPRESSOR
            resolvedByMechanicId: 14849
            resolved: true
          - resolvedByDriverId: 2581
            resolvedAt: 1453449599999
            comment: Air Compressor not working
            id: 18
            defectType: AIR_COMPRESSOR
            resolvedByMechanicId: 14849
            resolved: true
          mechanicOrAgentSignature:
            mechanicUserId: 14849
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          mechanicNotes: The vehicle is now safe.
          vehicle:
            name: Storer's vehicle 19
            id: 19
          authorSignature:
            mechanicUserId: 14849
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          odometerMiles: 49912
          vehicleDefects:
          - resolvedByDriverId: 2581
            resolvedAt: 1453449599999
            comment: Air Compressor not working
            id: 18
            defectType: AIR_COMPRESSOR
            resolvedByMechanicId: 14849
            resolved: true
          - resolvedByDriverId: 2581
            resolvedAt: 1453449599999
            comment: Air Compressor not working
            id: 18
            defectType: AIR_COMPRESSOR
            resolvedByMechanicId: 14849
            resolved: true
          nextDriverSignature:
            driverId: 2581
            name: John Smith
            signedAt: 12535500000
            type: driver
            email: j.smith@yahoo.com
            username: jsmith
          trailerName: Storer's Trailer 19
          id: 19
          trailerId: 19
          startedAtMs: 1453449599999
          timeMs: 1453449599999
      properties:
        dvirs:
          items:
            $ref: '#/components/schemas/V1DvirBase'
          type: array
      type: object
    V1ErrorResponse:
      description: Error message describing why the request failed.
      type: string
    V1FleetVehicleLocation:
      description: Contains the location and speed of a vehicle at a particular time
      properties:
        latitude:
          description: The latitude of the location in degrees.
          example: 37.2
          format: double
          type: number
        location:
          description: The best effort (street,city,state) for the latitude and longitude.
          example: 525 York, San Francisco, CA
          type: string
        longitude:
          description: The longitude of the location in degrees.
          example: -122.5
          format: double
          type: number
        speedMilesPerHour:
          description: The speed calculated from GPS that the asset was traveling
            at in miles per hour.
          example: 35.2
          format: double
          type: number
        timeMs:
          description: Time in Unix milliseconds since epoch when the asset was at
            the location.
          example: 1535586471332
          format: int64
          type: number
      type: object
    V1FleetVehicleLocations:
      items:
        $ref: '#/components/schemas/V1FleetVehicleLocation'
      type: array
    V1FleetVehiclesLocations:
      items:
        properties:
          id:
            description: ID of the vehicle.
            example: 112
            format: int64
            type: integer
          locations:
            $ref: '#/components/schemas/V1FleetVehicleLocations'
          name:
            description: Name of the vehicle.
            example: Truck A7
            type: string
        type: object
      type: array
    V1HosAuthenticationLogsResponse:
      example:
        authenticationLogs:
        - actionType: signin
          address: THIS FIELD IS NOT USED
          city: THIS FIELD IS NOT USED
          happenedAtMs: 1462881998034
          addressName: THIS FIELD IS NOT USED
          state: THIS FIELD IS NOT USED
        - actionType: signin
          address: THIS FIELD IS NOT USED
          city: THIS FIELD IS NOT USED
          happenedAtMs: 1462881998034
          addressName: THIS FIELD IS NOT USED
          state: THIS FIELD IS NOT USED
      properties:
        authenticationLogs:
          items:
            $ref: '#/components/schemas/V1HosAuthenticationLogsResponse_authenticationLogs'
          type: array
      type: object
    V1HosLogsResponse:
      example:
        logs:
        - hosStatusType: OFF_DUTY
          locLng: -98.50289
          logStartMs: 1462881998034
          driverId: 444
          locCity: Ahwatukee
          groupId: 101
          locName: McLean Site A
          locLat: 23.413702
          remark: Lunch Break
          locState: Arizona
          vehicleId: 112
          codriverIds:
          - 445.0
          - 445.0
        - hosStatusType: OFF_DUTY
          locLng: -98.50289
          logStartMs: 1462881998034
          driverId: 444
          locCity: Ahwatukee
          groupId: 101
          locName: McLean Site A
          locLat: 23.413702
          remark: Lunch Break
          locState: Arizona
          vehicleId: 112
          codriverIds:
          - 445.0
          - 445.0
      properties:
        logs:
          items:
            $ref: '#/components/schemas/V1HosLogsResponse_logs'
          type: array
      type: object
    V1HosLogsSummaryResponse:
      example:
        pagination:
          hasNextPage: true
          endCursor: MTA1MDc5MB==
        drivers:
        - vehicleName: Vehicle 1
          pendingDriveMsToday: 2.52E+8
          currentDutyStatusCode: OFF_DUTY
          timeInCurrentStatus: 5000
          onDutyMsToday: 2.52E+8
          timeUntilBreak: 28800000
          pendingOnDutyMsToday: 2.52E+8
          drivingInViolationToday: 39600000
          driverId: 444
          cycleRemaining: 252000000
          driverName: Fred Jacobs
          cycleTomorrow: 252000000
          shiftDriveRemaining: 39600000
          drivingInViolationCycle: 50400000
          shiftRemaining: 50400000
          driveMsToday: 2.52E+8
        - vehicleName: Vehicle 1
          pendingDriveMsToday: 2.52E+8
          currentDutyStatusCode: OFF_DUTY
          timeInCurrentStatus: 5000
          onDutyMsToday: 2.52E+8
          timeUntilBreak: 28800000
          pendingOnDutyMsToday: 2.52E+8
          drivingInViolationToday: 39600000
          driverId: 444
          cycleRemaining: 252000000
          driverName: Fred Jacobs
          cycleTomorrow: 252000000
          shiftDriveRemaining: 39600000
          drivingInViolationCycle: 50400000
          shiftRemaining: 50400000
          driveMsToday: 2.52E+8
      properties:
        drivers:
          items:
            $ref: '#/components/schemas/V1HosLogsSummaryResponse_drivers'
          type: array
        pagination:
          $ref: '#/components/schemas/V1HosLogsSummaryResponse_pagination'
      type: object
    V1HumidityResponse:
      description: Contains the current humidity of a sensor.
      example:
        sensors:
        - name: Freezer Humidity V1Sensor
          humidity: 53
          id: 122
          vehicleId: 124
          trailerId: 123
          humidityTime: 2019-04-17T16:42:55Z
        - name: Freezer Humidity V1Sensor
          humidity: 53
          id: 122
          vehicleId: 124
          trailerId: 123
          humidityTime: 2019-04-17T16:42:55Z
        groupId: 101
      properties:
        groupId:
          description: Deprecated.
          example: 101
          format: int64
          type: integer
        sensors:
          items:
            $ref: '#/components/schemas/V1HumidityResponse_sensors'
          type: array
      type: object
    V1Machine:
      description: Contains information about a machine.
      example:
        notes: This is in the left hallway behind the conveyor belt
        name: Freezer ABC
        id: 123
      properties:
        id:
          description: ID of the machine.
          example: 123
          format: int64
          type: integer
        name:
          description: Name of the machine.
          example: Freezer ABC
          type: string
        notes:
          description: Notes about the machine
          example: This is in the left hallway behind the conveyor belt
          type: string
      required:
      - id
      type: object
    V1MachineHistoryResponse:
      description: Contains the results for a machine history request
      example:
        machines:
        - name: 1/3 HP Motor
          id: 1
          vibrations:
          - X: 0.01
            Y: 1.23
            Z: 2.55
            time: 1453449599999
          - X: 0.01
            Y: 1.23
            Z: 2.55
            time: 1453449599999
        - name: 1/3 HP Motor
          id: 1
          vibrations:
          - X: 0.01
            Y: 1.23
            Z: 2.55
            time: 1453449599999
          - X: 0.01
            Y: 1.23
            Z: 2.55
            time: 1453449599999
      properties:
        machines:
          items:
            $ref: '#/components/schemas/V1MachineHistoryResponse_machines'
          type: array
      type: object
    V1Message:
      example:
        driverId: 555
        text: This is a message.
      properties:
        driverId:
          description: ID of the driver for whom the message is sent to or sent by.
          example: 555
          format: int64
          type: integer
        text:
          description: The text sent in the message.
          example: This is a message.
          type: string
      required:
      - driverId
      - text
      type: object
    V1MessageResponse:
      example:
        sentAtMs: 1462881998034
        driverId: 555
        sender:
          name: John Doe
          type: dispatch
        isRead: true
        text: This is a message.
      properties:
        driverId:
          description: ID of the driver for whom the message is sent to or sent by.
          example: 555
          format: int64
          type: integer
        isRead:
          description: True if the message was read by the recipient.
          example: true
          type: boolean
        sender:
          $ref: '#/components/schemas/V1MessageSender'
        sentAtMs:
          description: The time in Unix epoch milliseconds that the message is sent
            to the recipient.
          example: 1462881998034
          format: int64
          type: integer
        text:
          description: The text sent in the message.
          example: This is a message.
          type: string
      required:
      - driverId
      - isRead
      - sender
      - sentAtMs
      - text
      type: object
    V1MessageSender:
      example:
        name: John Doe
        type: dispatch
      properties:
        name:
          description: Name of user that is sending the message.
          example: John Doe
          type: string
        type:
          description: Type of user that is sending the message. It will be either
            dispatch or driver.
          example: dispatch
          type: string
      required:
      - name
      - type
      type: object
    V1Messages:
      items:
        $ref: '#/components/schemas/V1Message'
      type: array
    V1MessagesResponse:
      items:
        $ref: '#/components/schemas/V1MessageResponse'
      type: array
    V1Pagination:
      example:
        hasPrevPage: true
        hasNextPage: true
        endCursor: MTU5MTEzNjA2OTU0MzQ3
        startCursor: MTU5MTEzNjA2OTU0MzQ3
      properties:
        endCursor:
          description: Cursor identifier representing the last element in the response.
            This value should be used in conjunction with a subsequent request's 'startingAfter'
            query parameter.
          example: MTU5MTEzNjA2OTU0MzQ3
          type: string
        hasNextPage:
          description: True if there are more pages of results after this response.
          type: boolean
        hasPrevPage:
          description: True if there are more pages of results before this response.
          type: boolean
        startCursor:
          description: Cursor identifier representing the first element in the response.
            This value should be used in conjunction with a subsequent request's 'ending_before'
            query parameter.
          example: MTU5MTEzNjA2OTU0MzQ3
          type: string
      required:
      - endCursor
      - hasNextPage
      - hasPrevPage
      - startCursor
      type: object
    V1ProgramsForTheCameraResponse:
      description: Contains the list of Programs configured on the given Camera.
      items:
        properties:
          programId:
            example: 1
            format: int64
            type: integer
          programName:
            example: Barcode verification program
            type: string
        type: object
      type: array
    V1SafetyReportHarshEvent:
      description: List of harsh events
      example:
        harshEventType: Harsh Braking
        vehicleId: 212014918086169
        timestampMs: 1535590776000
      properties:
        harshEventType:
          description: Type of the harsh event
          example: Harsh Braking
          type: string
        timestampMs:
          description: Timestamp that the harsh event occurred in Unix milliseconds
            since epoch
          example: 1535590776000
          type: integer
        vehicleId:
          description: Vehicle associated with the harsh event
          example: 212014918086169
          type: integer
      type: object
    V1Sensor:
      description: Contains information about a sensor.
      example:
        macAddress: 11:11:11:11:11:11
        name: Freezer ABC
        id: 123
      properties:
        id:
          description: ID of the sensor.
          example: 123
          format: int64
          type: integer
        macAddress:
          description: MAC address of the sensor.
          example: 11:11:11:11:11:11
          type: string
        name:
          description: Name of the sensor.
          example: Freezer ABC
          type: string
      required:
      - id
      type: object
    V1SensorHistoryResponse:
      description: Contains the results for a sensor history request. Each result
        contains a timestamp and datapoint for each requested (sensor, field) pair.
      example:
        results:
        - series:
          - 1
          - 1
          timeMs: 1453449599999
        - series:
          - 1
          - 1
          timeMs: 1453449599999
      properties:
        results:
          items:
            $ref: '#/components/schemas/V1SensorHistoryResponse_results'
          type: array
      type: object
    V1TemperatureResponse:
      description: Contains the current temperatures of a sensor.
      example:
        sensors:
        - probeTemperatureTime: 2019-04-17T16:42:55Z
          probeTemperature: -20145
          name: Freezer Temp V1Sensor
          id: 122
          vehicleId: 124
          ambientTemperatureTime: 2019-04-17T16:42:55Z
          trailerId: 123
          ambientTemperature: 11057
        - probeTemperatureTime: 2019-04-17T16:42:55Z
          probeTemperature: -20145
          name: Freezer Temp V1Sensor
          id: 122
          vehicleId: 124
          ambientTemperatureTime: 2019-04-17T16:42:55Z
          trailerId: 123
          ambientTemperature: 11057
        groupId: 101
      properties:
        groupId:
          description: Deprecated.
          example: 101
          format: int64
          type: integer
        sensors:
          items:
            $ref: '#/components/schemas/V1TemperatureResponse_sensors'
          type: array
      type: object
    V1TrailerAssignmentResponse:
      properties:
        driverId:
          description: The ID of the driver associated with this trailer.
          example: 2047
          format: int64
          type: integer
        endMs:
          description: The time at which the driver ended the assignment. If the assignment
            is current, this value will be omitted.
          example: 1462881998034
          format: int64
          type: integer
        startMs:
          description: The time at which the driver started the assignment
          example: 1462878398034
          format: int64
          type: integer
      type: object
    V1TrailerAssignmentsResponse:
      allOf:
      - $ref: '#/components/schemas/V1TrailerBase'
      - $ref: '#/components/schemas/V1TrailerAssignmentsResponse_allOf'
    V1TrailerBase:
      properties:
        id:
          description: ID of the trailer
          example: 2041
          format: int64
          type: integer
        name:
          description: Assignment trailer name (given when creating trailer via the
            trailer portal)
          example: myTrailer
          format: string
          type: string
      required:
      - id
      - name
      type: object
    V1TripResponse:
      description: Contains the trips for the vehicle in the requested timeframe.
        A trip is represented as an object that contains startMs, startLocation, startAddress,
        startCoordinates, endMs, endLocation, endAddress and endCoordinates. Ongoing
        trips will be returned with 9223372036854775807 as their endMs.
      example:
        trips:
        - endOdometer: 210430500
          distanceMeters: 2500
          endMs: 1462881998034
          startMs: 1462878398034
          fuelConsumedMl: 75700
          startAddress:
            address: 123 Main St, Sunnyvale, CA 94089
            name: Ramen Tatsunoya
            id: 581.0
          assetIds:
          - 122
          startCoordinates:
            latitude: 29.443702345
            longitude: -98.502888123
          endCoordinates:
            latitude: 23.413702345
            longitude: -91.502888123
          startOdometer: 210430450
          driverId: 719
          startLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          tollMeters: 32000
          codriverIds:
          - 122
          endAddress:
            address: 123 Main St, Sunnyvale, CA 94089
            name: Ramen Tatsunoya
            id: 581.0
          endLocation: 571 S Lake Ave, Pasadena, CA 91101
        - endOdometer: 210430500
          distanceMeters: 2500
          endMs: 1462881998034
          startMs: 1462878398034
          fuelConsumedMl: 75700
          startAddress:
            address: 123 Main St, Sunnyvale, CA 94089
            name: Ramen Tatsunoya
            id: 581.0
          assetIds:
          - 122
          startCoordinates:
            latitude: 29.443702345
            longitude: -98.502888123
          endCoordinates:
            latitude: 23.413702345
            longitude: -91.502888123
          startOdometer: 210430450
          driverId: 719
          startLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          tollMeters: 32000
          codriverIds:
          - 122
          endAddress:
            address: 123 Main St, Sunnyvale, CA 94089
            name: Ramen Tatsunoya
            id: 581.0
          endLocation: 571 S Lake Ave, Pasadena, CA 91101
      properties:
        trips:
          items:
            $ref: '#/components/schemas/V1TripResponse_trips'
          type: array
      type: object
    V1VehicleHarshEventResponse:
      description: Harsh event details for a vehicle
      example:
        downloadForwardVideoUrl: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?...
        downloadInwardVideoUrl: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?...
        incidentReportUrl: https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984
        harshEventType: Harsh Braking
        location:
          address: 350 Rhode Island St, San Francisco, CA
          latitude: 33.07614328
          longitude: -96.14907287
        downloadTrackedInwardVideoUrl: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?...
        isDistracted: true
      properties:
        downloadForwardVideoUrl:
          description: URL for downloading the forward facing video
          example: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?...
          type: string
        downloadInwardVideoUrl:
          description: URL for downloading the inward facing video
          example: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?...
          type: string
        downloadTrackedInwardVideoUrl:
          description: URL for downloading the tracked inward facing video
          example: https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?...
          type: string
        harshEventType:
          description: 'Type of the harsh event. One of: [Crash, Harsh Acceleration,
            Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake,
            Harsh Event]'
          example: Harsh Braking
          type: string
        incidentReportUrl:
          description: URL of the associated incident report page
          example: https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984
          type: string
        isDistracted:
          description: Whether the driver was deemed distracted during this harsh
            event
          example: true
          type: boolean
        location:
          $ref: '#/components/schemas/V1VehicleHarshEventResponse_location'
      required:
      - harshEventType
      - incidentReportUrl
      type: object
    V1VehicleLocation:
      description: Contains the location, in latitude and longitude, of a vehicle.
      properties:
        driverId:
          description: The ID of the driver currently assigned to this vehicle.
          example: 1
          type: integer
        heading:
          description: Heading in degrees.
          example: 246.42
          format: double
          type: number
        id:
          description: ID of the vehicle.
          example: 112
          format: int64
          type: integer
        latitude:
          description: Latitude in decimal degrees.
          example: 123.456
          format: double
          type: number
        location:
          description: Text representation of nearest identifiable location to (latitude,
            longitude) coordinates.
          example: 1 Main St, Dallas, TX
          type: string
        longitude:
          description: Longitude in decimal degrees.
          example: 32.897
          format: double
          type: number
        name:
          description: Name of the vehicle.
          example: Truck A7
          type: string
        odometerMeters:
          description: The number of meters reported by the odometer.
          example: 71774705
          format: int64
          type: integer
        odometerType:
          description: The source of data for odometerMeters. Will be either GPS or
            OBD
          enum:
          - GPS
          - OBD
          example: GPS
          type: string
        onTrip:
          description: Whether or not a trip is currently in progress for this vehicle.
            More information available via /fleet/trips endpoint.
          example: true
          type: boolean
        routeIds:
          description: A list of currently active route IDs that the vehicle is in.
          example:
          - 2244514
          - 2311654
          items:
            format: int64
            type: integer
          type: array
        speed:
          description: Speed in miles per hour.
          example: 64.37
          format: double
          type: number
        time:
          description: The time the reported location was logged, reported as a UNIX
            timestamp in milliseconds.
          example: 1462881998034
          type: integer
        vin:
          description: Vehicle Identification Number (VIN) of the vehicle.
          example: JTNBB46KX73011966
          type: string
      required:
      - id
      type: object
    V1VehicleMaintenance:
      description: Contains any J1939/Passenger engine light warnings and engine faults.
      example:
        j1939:
          checkEngineLight:
            protectIsOn: true
            stopIsOn: true
            warningIsOn: true
            emissionsIsOn: true
          diagnosticTroubleCodes:
          - spnDescription: spnDescription
            fmiText: fmiText
            spnId: 1
            occurrenceCount: 6
            txId: 5
            fmiId: 0
          - spnDescription: spnDescription
            fmiText: fmiText
            spnId: 1
            occurrenceCount: 6
            txId: 5
            fmiId: 0
        passenger:
          checkEngineLight:
            isOn: true
          diagnosticTroubleCodes:
          - dtcShortCode: dtcShortCode
            dtcId: 5
            dtcDescription: dtcDescription
          - dtcShortCode: dtcShortCode
            dtcId: 5
            dtcDescription: dtcDescription
        id: 112
      properties:
        id:
          description: ID of the vehicle.
          example: 112
          format: int64
          type: integer
        j1939:
          $ref: '#/components/schemas/V1VehicleMaintenance_j1939'
        passenger:
          $ref: '#/components/schemas/V1VehicleMaintenance_passenger'
      required:
      - id
      type: object
    V1VehicleSafetyScoreResponse:
      description: Safety score details for a vehicle
      example:
        crashCount: 0
        harshAccelCount: 1
        harshEvents:
        - harshEventType: Harsh Braking
          vehicleId: 212014918086169
          timestampMs: 1535590776000
        - harshEventType: Harsh Braking
          vehicleId: 212014918086169
          timestampMs: 1535590776000
        totalDistanceDrivenMeters: 291836
        safetyScore: 97
        totalHarshEventCount: 3
        totalTimeDrivenMs: 19708293
        vehicleId: 4321
        harshTurningCount: 0
        timeOverSpeedLimitMs: 3769
        harshBrakingCount: 2
        safetyScoreRank: "26"
      properties:
        crashCount:
          description: Crash event count
          example: 0
          type: integer
        harshAccelCount:
          description: Harsh acceleration event count
          example: 1
          type: integer
        harshBrakingCount:
          description: Harsh braking event count
          example: 2
          type: integer
        harshEvents:
          items:
            $ref: '#/components/schemas/V1SafetyReportHarshEvent'
          type: array
        harshTurningCount:
          description: Harsh turning event count
          example: 0
          type: integer
        safetyScore:
          description: Safety Score
          example: 97
          type: integer
        safetyScoreRank:
          description: Safety Score Rank
          example: "26"
          type: string
        timeOverSpeedLimitMs:
          description: Amount of time driven over the speed limit in milliseconds
          example: 3769
          type: integer
        totalDistanceDrivenMeters:
          description: Total distance driven in meters
          example: 291836
          type: integer
        totalHarshEventCount:
          description: Total harsh event count
          example: 3
          type: integer
        totalTimeDrivenMs:
          description: Amount of time driven in milliseconds
          example: 19708293
          type: integer
        vehicleId:
          description: Vehicle ID
          example: 4321
          type: integer
      type: object
    V1VisionCamerasResponse:
      description: Contains the list of Cameras installed in the org.
      items:
        properties:
          cameraId:
            example: 1234512345999
            format: int64
            type: integer
          cameraName:
            example: Line 32
            type: string
          ethernetIp:
            example: 10.1.2.34
            type: string
          wifiIp:
            example: 10.1.2.35
            type: string
        type: object
      type: array
    V1VisionRunByCameraResponse:
      example:
        runSummary:
          successCount: 181
          itemsPerMinute: 0.1
          noReadCount: 0
          rejectCount: 0
        cameraId: 1234512345123
        isOngoing: true
        endedAtMs: 0
        inspectionResults:
        - result: PASS
          stepResults:
          - '{}'
          - '{}'
          captureAtMs: 1.55381199473E+12
        - result: PASS
          stepResults:
          - '{}'
          - '{}'
          captureAtMs: 1.55381199473E+12
        program:
          name: Barcode verification program
          id: 1
        startedAtMs: 1553808606097
      properties:
        cameraId:
          example: 1234512345123
          format: int64
          type: integer
        endedAtMs:
          example: 0
          format: int64
          type: integer
        inspectionResults:
          items:
            $ref: '#/components/schemas/V1VisionRunByCameraResponse_inspectionResults'
          type: array
        isOngoing:
          example: true
          type: boolean
        program:
          $ref: '#/components/schemas/V1VisionRunByCameraResponse_program'
        runSummary:
          $ref: '#/components/schemas/V1VisionRunByCameraResponse_runSummary'
        startedAtMs:
          example: 1553808606097
          format: int64
          type: integer
      type: object
    V1VisionRunsByCameraAndProgramResponse:
      example:
        reportMetadata:
          successCount: 181
          itemsPerMinute: 0.1
          noReadCount: 0
          rejectCount: 0
        endedAtMs: 0
        deviceId: 1234512345123
        results:
        - result: PASS
          stepResults:
          - '{}'
          - '{}'
          captureAtMs: 1.55381199473E+12
        - result: PASS
          stepResults:
          - '{}'
          - '{}'
          captureAtMs: 1.55381199473E+12
        programId: 1
        startedAtMs: 1553808606097
      properties:
        deviceId:
          example: 1234512345123
          format: int64
          type: integer
        endedAtMs:
          example: 0
          format: int64
          type: integer
        programId:
          example: 1
          format: int64
          type: integer
        reportMetadata:
          $ref: '#/components/schemas/V1VisionRunByCameraResponse_runSummary'
        results:
          items:
            $ref: '#/components/schemas/V1VisionRunByCameraResponse_inspectionResults'
          type: array
        startedAtMs:
          example: 1553808606097
          format: int64
          type: integer
      type: object
    V1VisionRunsByCameraResponse:
      items:
        properties:
          deviceId:
            example: 1234512345123
            format: int64
            type: integer
          endedAtMs:
            example: 0
            format: int64
            type: integer
          program:
            properties:
              id:
                example: 1
                format: int64
                type: integer
              name:
                example: Barcode verification program
                type: string
            type: object
          reportMetadata:
            properties:
              itemsPerMinute:
                example: 0.1
                format: float64
                type: number
              noReadCount:
                example: 0
                format: int64
                type: integer
              rejectCount:
                example: 0
                format: int64
                type: integer
              successCount:
                example: 181
                format: int64
                type: integer
            type: object
          startedAtMs:
            example: 1553808606097
            format: int64
            type: integer
        type: object
      type: array
    V1VisionRunsResponse:
      example:
        visionRuns:
        - reportMetadata:
            successCount: 181
            itemsPerMinute: 0.1
            noReadCount: 181
            rejectCount: 0
          endedAtMs: 0
          deviceId: 1234512345123
          programId: 1
          startedAtMs: 1553808606097
        - reportMetadata:
            successCount: 181
            itemsPerMinute: 0.1
            noReadCount: 181
            rejectCount: 0
          endedAtMs: 0
          deviceId: 1234512345123
          programId: 1
          startedAtMs: 1553808606097
      properties:
        visionRuns:
          items:
            $ref: '#/components/schemas/V1VisionRunsResponse_visionRuns'
          type: array
      type: object
    V1VisionStepResults:
      items:
        properties:
          angleCheck:
            properties:
              angleConfigured:
                description: The configured angle allowance range (in degrees)
                properties:
                  high:
                    example: 150
                    format: int64
                    type: integer
                  low:
                    example: 90
                    format: int64
                    type: integer
                type: object
              angleFound:
                description: The counter-clockwise angle detected from the first edge
                  to the second edge
                example: 60
                format: int64
                type: integer
              endStepName:
                description: The name of the second reference step used to check the
                  angle
                example: Edge 2
                type: string
              startStepName:
                description: The name of the first reference step used to check the
                  angle
                example: Edge 1
                type: string
            type: object
          barcode:
            items:
              properties:
                contents:
                  example: "10855639004823"
                  type: string
                matchString:
                  example: "10855639004823"
                  type: string
                type:
                  example: EAN8
                  type: string
              type: object
            type: array
          booleanLogic:
            properties:
              operator:
                example: AND
                type: string
              steps:
                items:
                  properties:
                    name:
                      example: Expiration Date
                      type: string
                    result:
                      example: PASS
                      type: string
                  type: object
                type: array
            type: object
          caliper:
            properties:
              angleRange:
                description: The configured angle allowance range
                properties:
                  high:
                    example: 360
                    format: int32
                    type: integer
                  low:
                    example: 0
                    format: int32
                    type: integer
                type: object
              contrastRange:
                description: The configured contrast allowance range
                properties:
                  high:
                    example: 100
                    format: int64
                    type: integer
                  low:
                    example: 50
                    format: int64
                    type: integer
                type: object
              distanceFound:
                description: The distance found between the found edges
                example: 555.55
                format: float
                type: number
              filterPolarity:
                default: LIGHT TO DARK
                description: The configured polarity for finding edges
                enum:
                - LIGHT TO DARK
                - DARK TO LIGHT
                example: LIGHT TO DARK
                type: string
              maxDistance:
                description: The maximum allowed distance threshold
                example: 1000.0
                format: float
                type: number
              minDistance:
                description: The minumum allowed distance threshold
                example: 500.0
                format: float
                type: number
              sharpnessRange:
                description: The configured sharpness allowance range
                properties:
                  high:
                    example: 100
                    format: int64
                    type: integer
                  low:
                    example: 80
                    format: int64
                    type: integer
                type: object
              straightnessRange:
                description: The configured straightness allowance range
                properties:
                  high:
                    example: 100
                    format: int32
                    type: integer
                  low:
                    example: 80
                    format: int32
                    type: integer
                type: object
              unit:
                description: The measurement unit of the distance found and the min
                  and max distance threshold
                example: Millimeters
                type: string
            type: object
          contour:
            properties:
              angleDegrees:
                description: The rotation angle found
                example: 0
                format: int64
                type: integer
              angleTolerance:
                description: The rotation angle allowance
                example: 50
                format: int64
                type: integer
              matchPercentage:
                description: The contour match percentage with the configured contour
                example: 46
                format: int64
                type: integer
              matchThreshold:
                description: The configured match threshold for contours
                example: 18
                format: int64
                type: integer
            type: object
          distance:
            properties:
              distanceFound:
                description: The distance found between the start and end references
                format: float64
                type: integer
              endStepName:
                description: The name of the second reference step that we're checking
                  the distances between
                example: Bottom Right Square
                type: string
              enforceOffsetAngleRange:
                description: Whether an offset angle range is enforced
                example: true
                type: boolean
              maxDistance:
                description: The maximum allowed distance threshold
                example: 900
                format: float64
                type: integer
              maxOffsetAngle:
                description: The maximum angle allowance (in degrees) if enforceOffsetAngleRange
                  is true
                example: 90
                format: int64
                type: integer
              minDistance:
                description: The minumum allowed distance threshold
                example: 1500
                format: float64
                type: integer
              minOffsetAngle:
                description: The minimum angle allowance (in degrees) if enforceOffsetAngleRange
                  is true
                example: 45
                format: int64
                type: integer
              offsetAngleFound:
                description: The counter-clockwise angle (in degrees) found between
                  the horizontal axis of the start reference step and the last
                example: 50
                format: int64
                type: integer
              startStepName:
                description: The name of the first reference step that we're checking
                  the distances between
                example: Top Left Square
                type: string
              unit:
                description: The measurement unit of the distance found and the min
                  and max distance threshold
                example: Millimeters
                type: string
            type: object
          expirationDate:
            properties:
              dateOffset:
                example: 1
                format: int64
                type: integer
              foundDate:
                example: 06/13/2019
                type: string
              matchDate:
                example: 06/13/2019
                type: string
            type: object
          findCopies:
            properties:
              angleTolerance:
                description: The orientation angle tolerance (+/- °)
                example: 10
                format: int64
                type: integer
              foundCount:
                description: The number of copies found
                example: 1
                format: int64
                type: integer
              maxCount:
                description: The maximum number of copies allowed
                example: 5
                format: int64
                type: integer
              minCount:
                description: The minimum number of copies allowed
                example: 1
                format: int64
                type: integer
              threshold:
                description: The minimum required similarity (in %) of a found copy
                  compared to the configured match region
                example: 70
                format: int64
                type: integer
            type: object
          findEdge:
            properties:
              angleFound:
                description: The detected angle in degrees
                example: 90
                format: float64
                type: integer
              angleRange:
                description: The configured angle allowance range
                properties:
                  high:
                    example: 360
                    format: int32
                    type: integer
                  low:
                    example: 0
                    format: int32
                    type: integer
                type: object
              contrastPercent:
                description: The detected contrast percentage
                format: float64
                type: integer
              contrastRange:
                description: The configured contrast allowance range
                properties:
                  high:
                    example: 100
                    format: int64
                    type: integer
                  low:
                    example: 50
                    format: int64
                    type: integer
                type: object
              filterPolarity:
                description: The configured polarity for finding edges
                example: ANY
                type: string
              sharpnessPercent:
                description: The detected sharpness percentage
                example: 95
                format: float64
                type: integer
              sharpnessRange:
                description: The configured sharpness allowance range
                properties:
                  high:
                    example: 100
                    format: int64
                    type: integer
                  low:
                    example: 80
                    format: int64
                    type: integer
                type: object
              straightnessFound:
                description: The detected straightness percentage
                example: 95
                format: float64
                type: integer
              straightnessRange:
                description: The configured straightness allowance range
                properties:
                  high:
                    example: 100
                    format: int32
                    type: integer
                  low:
                    example: 80
                    format: int32
                    type: integer
                type: object
            type: object
          findShapes:
            properties:
              foundCount:
                example: 1
                format: int32
                type: integer
              maxCount:
                example: 5
                format: int32
                type: integer
              minCount:
                example: 1
                format: int32
                type: integer
            type: object
          fixture:
            properties:
              coordinates:
                properties:
                  x:
                    example: 10
                    format: int32
                    type: integer
                  y:
                    example: 10
                    format: int32
                    type: integer
                type: object
              found:
                example: true
                type: boolean
              rotationDegrees:
                example: 90
                format: int64
                type: integer
            type: object
          labelMatch:
            properties:
              score:
                example: 10
                format: int64
                type: integer
              threshold:
                example: 10
                format: int64
                type: integer
            type: object
          name:
            example: Chicken Caesar Label
            type: string
          presenceAbsence:
            properties:
              blueRange:
                properties:
                  high:
                    example: 150
                    format: int64
                    type: integer
                  low:
                    example: 90
                    format: int64
                    type: integer
                type: object
              checkForAbsence:
                example: true
                type: boolean
              grayscaleRange:
                properties:
                  high:
                    example: 100
                    format: int64
                    type: integer
                  low:
                    example: 20
                    format: int64
                    type: integer
                type: object
              greenRange:
                properties:
                  high:
                    example: 150
                    format: int64
                    type: integer
                  low:
                    example: 90
                    format: int64
                    type: integer
                type: object
              hueRange:
                properties:
                  high:
                    example: 100
                    format: int64
                    type: integer
                  low:
                    example: 20
                    format: int64
                    type: integer
                type: object
              redRange:
                properties:
                  high:
                    example: 150
                    format: int64
                    type: integer
                  low:
                    example: 90
                    format: int64
                    type: integer
                type: object
              saturationRange:
                properties:
                  high:
                    example: 50
                    format: int64
                    type: integer
                  low:
                    example: 10
                    format: int64
                    type: integer
                type: object
              score:
                example: 50
                format: int64
                type: integer
              threshold:
                example: 50
                format: int64
                type: integer
              valueRange:
                properties:
                  high:
                    example: 50
                    format: int64
                    type: integer
                  low:
                    example: 10
                    format: int64
                    type: integer
                type: object
            type: object
          result:
            example: PASS
            type: string
          textMatch:
            properties:
              foundText:
                example: ABCD
                type: string
              matchString:
                example: ABCD
                type: string
            type: object
        type: object
      type: array
    V1allRouteJobUpdates:
      example:
        sequence_id: eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0=
        job_updates:
        - changed_at_ms: 1462881998034
          route_id: 556
          job_id: 773
          prev_job_state: JobState_Arrived
          job_state: JobState_Arrived
        - changed_at_ms: 1462881998034
          route_id: 556
          job_id: 773
          prev_job_state: JobState_Arrived
          job_state: JobState_Arrived
      properties:
        job_updates:
          items:
            $ref: '#/components/schemas/V1jobUpdateObject'
          type: array
        sequence_id:
          description: Sequence ID of the last update returned in the response
          example: eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0=
          type: string
      type: object
    V1jobStatus:
      description: The state of the dispatch job.
      enum:
      - JobState_Unassigned
      - JobState_Scheduled
      - JobState_EnRoute
      - JobState_Arrived
      - JobState_Completed
      - JobState_Skipped
      example: JobState_Arrived
      type: string
    V1jobUpdateObject:
      example:
        changed_at_ms: 1462881998034
        route_id: 556
        job_id: 773
        prev_job_state: JobState_Arrived
        job_state: JobState_Arrived
      properties:
        changed_at_ms:
          description: Timestamp that this event was updated, represented as Unix
            milliseconds since epoch.
          example: 1462881998034
          format: int64
          type: integer
        job_id:
          description: ID of the Samsara job.
          example: 773
          format: int64
          type: integer
        job_state:
          $ref: '#/components/schemas/V1jobStatus'
        prev_job_state:
          $ref: '#/components/schemas/V1jobStatus'
        route:
          $ref: '#/components/schemas/V1DispatchRoute'
        route_id:
          description: ID of the Samsara dispatch route.
          example: 556
          format: int64
          type: integer
      type: object
    Vehicle:
      description: The vehicle object.
      example:
        notes: These are notes about this given vehicle.
        year: "2008"
        externalIds:
          maintenanceId: "250020"
          payrollId: ABFS18600
        harshAccelerationSettingType: "off"
        tags:
        - parentTagId: "4815"
          name: East Coast
          id: "3914"
        - parentTagId: "4815"
          name: East Coast
          id: "3914"
        licensePlate: XHK1234
        staticAssignedDriver:
          name: Susan Bob
          id: "88668"
        auxInputType2: boom
        name: Truck A7
        model: F150
        vin: 1FUJA6BD31LJ09646
        auxInputType1: boom
        id: "112"
        make: Ford
      properties:
        auxInputType1:
          $ref: '#/components/schemas/VehicleAuxInputType'
        auxInputType2:
          $ref: '#/components/schemas/VehicleAuxInputType'
        externalIds:
          additionalProperties:
            type: string
          description: The [external IDs](https://developers.samsara.com/docs/external-ids)
            for the given object.
          example:
            maintenanceId: "250020"
            payrollId: ABFS18600
          type: object
        harshAccelerationSettingType:
          $ref: '#/components/schemas/VehicleHarshAccelerationSettingType'
        id:
          description: The unique Samsara ID of the Vehicle. This is automatically
            generated when the Vehicle object is created. It cannot be changed.
          example: "112"
          type: string
        licensePlate:
          description: 'The license plate of the Vehicle. **By default**: empty. Can
            be set or updated through the Samsara Dashboard or the API at any time.'
          example: XHK1234
          maxLength: 12
          type: string
        make:
          description: The Vehicle’s manufacturing make. Automatically read from the
            engine computer if available. Empty if not available. Cannot be manually
            set.
          example: Ford
          maxLength: 255
          type: string
        model:
          description: The Vehicle’s manufacturing model. Automatically read from
            the engine computer if available. Empty if not available. Cannot be manually
            set.
          example: F150
          maxLength: 255
          type: string
        name:
          description: The human-readable name of the Vehicle. This is set by a fleet
            administrator and will appear in both Samsara’s cloud dashboard as well
            as the Samsara Driver mobile app. **By default**, this name is the serial
            number of the Samsara Vehicle Gateway. It can be set or updated through
            the Samsara Dashboard or through the API at any time.
          example: Truck A7
          type: string
        notes:
          default: ""
          description: These are generic notes about the Vehicle. Empty by default.
            Can be set or updated through the Samsara Dashboard or the API at any
            time.
          example: These are notes about this given vehicle.
          maxLength: 255
          type: string
        staticAssignedDriver:
          $ref: '#/components/schemas/driverTinyResponse'
        tags:
          description: 'The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting)
            associated with the Vehicle. **By default**: empty. Can be set or updated
            through the Samsara Dashboard or the API at any time.'
          items:
            $ref: '#/components/schemas/tagTinyResponse'
          type: array
        vin:
          description: The VIN of the Vehicle. Most of the time, this will be automatically
            read from the engine computer by the Samsara Vehicle Gateway. It will
            be empty if it cannot be read. It can be set or updated through the Samsara
            Dashboard or the API at any time.
          example: 1FUJA6BD31LJ09646
          maxLength: 17
          minLength: 11
          type: string
        year:
          description: The Vehicle’s manufacturing model. Automatically read from
            the engine computer if available. Empty if not available. Cannot be manually
            set.
          example: "2008"
          type: string
      required:
      - id
      type: object
    VehicleAuxInputType:
      description: 'The type of [auxiliary input](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs)
        configured for this Vehicle. Once configured, these inputs will generate dynamic,
        time-series data that will be available to view in the Samsara Dashboard.
        **By default**: empty. This can be set or updated through the Samsara Dashboard
        or the API at any time.'
      enum:
      - none
      - emergencyLights
      - emergencyAlarm
      - stopPaddle
      - powerTakeOff
      - plow
      - sweeper
      - salter
      - reefer
      - door
      - boom
      - auxiliaryEngine
      - generator
      - eightWayLights
      example: boom
      type: string
    VehicleAuxInputType1:
      $ref: '#/components/schemas/VehicleAuxInputType'
    VehicleAuxInputType2:
      $ref: '#/components/schemas/VehicleAuxInputType'
    VehicleEngineHours:
      description: A manual override for the vehicle's engine hours. You may only
        override a vehicle's engine hours if it cannot be read from on-board diagnostics.
        When you provide a manual engine hours override, Samsara will begin updating
        a vehicle's engine hours based on when the Samsara Vehicle Gateway is recieving
        power or not.
      example: 10943
      format: int64
      type: integer
    VehicleExternalIds:
      $ref: '#/components/schemas/externalIds'
    VehicleHarshAccelerationSettingType:
      description: The harsh acceleration setting type. This setting influences the
        acceleration sensitivity from which a [harsh event](https://kb.samsara.com/hc/en-us/articles/360006938891-Harsh-Events)
        is triggered. **By default**, this setting is inferred by the Samsara Vehicle
        Gateway from the engine computer, but it may be set or updated through the
        Samsara Dashboard or the API at any time. If set to `off`, then no acceleration
        based harsh events are triggered for the vehicle.
      enum:
      - passengerCar
      - lightTruck
      - heavyDuty
      - "off"
      - automatic
      example: "off"
      type: string
    VehicleId:
      description: The unique Samsara ID of the Vehicle. This is automatically generated
        when the Vehicle object is created. It cannot be changed.
      example: "112"
      type: string
    VehicleLicensePlate:
      description: 'The license plate of the Vehicle. **By default**: empty. Can be
        set or updated through the Samsara Dashboard or the API at any time.'
      example: XHK1234
      maxLength: 12
      type: string
    VehicleLocation:
      description: Vehicle location event.
      example:
        heading: 120
        latitude: 122.142
        time: 2020-01-27T07:06:25Z
        speed: 48.3
        longitude: -93.343
        reverseGeo:
          formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
      properties:
        heading:
          description: Heading of the vehicle in degrees.
          example: 120
          format: double
          type: number
        latitude:
          description: GPS latitude represented in degrees
          example: 122.142
          format: double
          type: number
        longitude:
          description: GPS longitude represented in degrees
          example: -93.343
          format: double
          type: number
        reverseGeo:
          $ref: '#/components/schemas/VehicleLocationReverseGeo'
        speed:
          description: GPS speed of the vehicle in miles per hour.
          example: 48.3
          format: double
          type: number
        time:
          description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
      required:
      - latitude
      - longitude
      - time
      type: object
    VehicleLocationHeading:
      description: Heading of the vehicle in degrees.
      example: 120
      format: double
      type: number
    VehicleLocationLatitude:
      description: GPS latitude represented in degrees
      example: 122.142
      format: double
      type: number
    VehicleLocationLongitude:
      description: GPS longitude represented in degrees
      example: -93.343
      format: double
      type: number
    VehicleLocationReverseGeo:
      description: Reverse geocoded information.
      example:
        formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
      properties:
        formattedLocation:
          description: Formatted address of the reverse geocoding data.
          example: 16 N Fair Oaks Ave, Pasadena, CA 91103
          type: string
      type: object
    VehicleLocationSpeed:
      description: GPS speed of the vehicle in miles per hour.
      example: 48.3
      format: double
      type: number
    VehicleLocationTime:
      $ref: '#/components/schemas/time'
    VehicleLocationsListResponse:
      description: List of vehicle location events and pagination info.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - name: Truck A7
          locations:
          - heading: 120
            latitude: 122.142
            time: 2020-01-27T07:06:25Z
            speed: 48.3
            longitude: -93.343
            reverseGeo:
              formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          - heading: 120
            latitude: 122.142
            time: 2020-01-27T07:06:25Z
            speed: 48.3
            longitude: -93.343
            reverseGeo:
              formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          id: "112"
        - name: Truck A7
          locations:
          - heading: 120
            latitude: 122.142
            time: 2020-01-27T07:06:25Z
            speed: 48.3
            longitude: -93.343
            reverseGeo:
              formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          - heading: 120
            latitude: 122.142
            time: 2020-01-27T07:06:25Z
            speed: 48.3
            longitude: -93.343
            reverseGeo:
              formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          id: "112"
      properties:
        data:
          description: A list of vehicles and an array of location events for each
            vehicle.
          items:
            $ref: '#/components/schemas/VehicleLocationsListResponse_data'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - data
      - pagination
      type: object
    VehicleLocationsResponse:
      description: Most recent vehicle locations and pagination info.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - name: Truck A7
          location:
            heading: 120
            latitude: 122.142
            time: 2020-01-27T07:06:25Z
            speed: 48.3
            longitude: -93.343
            reverseGeo:
              formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          id: "112"
        - name: Truck A7
          location:
            heading: 120
            latitude: 122.142
            time: 2020-01-27T07:06:25Z
            speed: 48.3
            longitude: -93.343
            reverseGeo:
              formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
          id: "112"
      properties:
        data:
          description: List of the most recent locations for the specified vehicles.
          items:
            $ref: '#/components/schemas/VehicleLocationsResponse_data'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - data
      - pagination
      type: object
    VehicleMake:
      description: The Vehicle’s manufacturing make. Automatically read from the engine
        computer if available. Empty if not available. Cannot be manually set.
      example: Ford
      maxLength: 255
      type: string
    VehicleModel:
      description: The Vehicle’s manufacturing model. Automatically read from the
        engine computer if available. Empty if not available. Cannot be manually set.
      example: F150
      maxLength: 255
      type: string
    VehicleName:
      description: The human-readable name of the Vehicle. This is set by a fleet
        administrator and will appear in both Samsara’s cloud dashboard as well as
        the Samsara Driver mobile app. **By default**, this name is the serial number
        of the Samsara Vehicle Gateway. It can be set or updated through the Samsara
        Dashboard or through the API at any time.
      example: Truck A7
      type: string
    VehicleNotes:
      default: ""
      description: These are generic notes about the Vehicle. Empty by default. Can
        be set or updated through the Samsara Dashboard or the API at any time.
      example: These are notes about this given vehicle.
      maxLength: 255
      type: string
    VehicleOdometerMeters:
      description: A manual override for the vehicle's odometer. You may only override
        a vehicle's odometer if it cannot be read from on-board diagnostics. When
        you provide a manual odometer override, Samsara will begin updating a vehicle's
        odometer using GPS distance traveled since this override was set. See [here](https://kb.samsara.com/hc/en-us/articles/115005273667)
        for more details.
      example: 9182
      format: int64
      type: integer
    VehicleResponse:
      description: A single vehicle.
      example:
        data:
          notes: These are notes about this given vehicle.
          year: "2008"
          externalIds:
            maintenanceId: "250020"
            payrollId: ABFS18600
          harshAccelerationSettingType: "off"
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          licensePlate: XHK1234
          staticAssignedDriver:
            name: Susan Bob
            id: "88668"
          auxInputType2: boom
          name: Truck A7
          model: F150
          vin: 1FUJA6BD31LJ09646
          auxInputType1: boom
          id: "112"
          make: Ford
      properties:
        data:
          $ref: '#/components/schemas/Vehicle'
      required:
      - data
      type: object
    VehicleStaticAssignedDriver:
      $ref: '#/components/schemas/driverTinyResponse'
    VehicleStaticAssignedDriverId:
      description: ID for the static assigned driver of the vehicle.
      example: "123"
      type: string
    VehicleStatsCtpSmogTestData:
      description: Required data for one CTP smog test.
      example:
        dlcPinVoltageMilliVoltsValid: true
        testDateTime: 2020-01-27T07:06:25Z
        linkId: 0
        remoteObdTestRecords:
        - o2Sensor: U
          pidCountValid: true
          minutesSinceCodesCleared: 3
          notReadyCount: 3
          fuel: U
          obdVinValid: true
          warmupsSinceCodesCleared: 3
          distanceTraveledSinceCodesClearedValid: true
          distanceTraveledWithMilOnValid: true
          permanentDtcs: P0151|P0300|P0301
          minutesSinceCodesClearedValid: true
          pcmId: 7E8
          milValid: true
          minutesSinceMilValid: true
          egr: U
          isoSaeReserved: U
          mil: "Y"
          calCvn: AaPl1io=
          obdVin: 1HGBH41JXMN109186
          permanentDtcsValid: true
          distanceTraveledSinceCodesCleared: 3
          compressionIgnitionMonitorSupported: "Y"
          calCvnValid: true
          compressionIgnitionMonitorSupportedValid: true
          dtcCount: 3
          pendingDtcs: P0151|P0300|P0301
          rpmValid: true
          heatedO2Sensor: U
          warmupsSinceCodesClearedValid: true
          calId: AVRCSUUzRDcuSEVYAAAAAAA=
          emissionRelatedDtcs: P0151|P0300|P0301
          rpm: 3
          heatedCatalyst: U
          permanentDtcCount: 3
          catalyst: U
          minutesSinceMil: 3
          misfire: U
          pendingDtcsValid: true
          obdMonitorStatusValid: true
          emissionRelatedDtcsValid: true
          pendingDtcCount: 3
          secondaryAir: U
          calIdValid: true
          distanceTraveledWithMilOn: 3
          comprehensive: U
          evapSystem: U
          pidCount: 3
        - o2Sensor: U
          pidCountValid: true
          minutesSinceCodesCleared: 3
          notReadyCount: 3
          fuel: U
          obdVinValid: true
          warmupsSinceCodesCleared: 3
          distanceTraveledSinceCodesClearedValid: true
          distanceTraveledWithMilOnValid: true
          permanentDtcs: P0151|P0300|P0301
          minutesSinceCodesClearedValid: true
          pcmId: 7E8
          milValid: true
          minutesSinceMilValid: true
          egr: U
          isoSaeReserved: U
          mil: "Y"
          calCvn: AaPl1io=
          obdVin: 1HGBH41JXMN109186
          permanentDtcsValid: true
          distanceTraveledSinceCodesCleared: 3
          compressionIgnitionMonitorSupported: "Y"
          calCvnValid: true
          compressionIgnitionMonitorSupportedValid: true
          dtcCount: 3
          pendingDtcs: P0151|P0300|P0301
          rpmValid: true
          heatedO2Sensor: U
          warmupsSinceCodesClearedValid: true
          calId: AVRCSUUzRDcuSEVYAAAAAAA=
          emissionRelatedDtcs: P0151|P0300|P0301
          rpm: 3
          heatedCatalyst: U
          permanentDtcCount: 3
          catalyst: U
          minutesSinceMil: 3
          misfire: U
          pendingDtcsValid: true
          obdMonitorStatusValid: true
          emissionRelatedDtcsValid: true
          pendingDtcCount: 3
          secondaryAir: U
          calIdValid: true
          distanceTraveledWithMilOn: 3
          comprehensive: U
          evapSystem: U
          pidCount: 3
        deviceFirmware: CTPv1
        commProtocol: V
        dlcPinVoltageMilliVolts: 12000
      properties:
        commProtocol:
          description: CAN bus communication protocol as detected by the vehicle gateway.
          enum:
          - V
          - P
          - I
          - Kf
          - Ks
          - C11
          - C29
          - C11s
          - C29s
          example: V
          type: string
        deviceFirmware:
          description: CTP firmware version as reported by the vehicle gateway.
          example: CTPv1
          type: string
        dlcPinVoltageMilliVolts:
          description: Positive battery voltage as detected by the vehicle gateway
            reported in millivolts.
          example: 12000
          type: integer
        dlcPinVoltageMilliVoltsValid:
          description: Indicates DlcPinVoltageMilliVolts was successfully read from
            the CAN bus.
          type: boolean
        linkId:
          description: Device serial number.
          type: integer
        remoteObdTestRecords:
          description: Contains all of the specific OBD data collected for a single
            ECU present on a vehicle. There can can be multiple ECUs on a vehicle.
          items:
            $ref: '#/components/schemas/RemoteObdTestRecordType'
          type: array
        testDateTime:
          description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
      type: object
    VehicleStatsEngineState:
      description: Vehicle engine state event.
      example:
        time: 2020-01-27T07:06:25Z
        value: "On"
      properties:
        time:
          description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        value:
          description: The state of the engine.
          enum:
          - "Off"
          - "On"
          - Idle
          example: "On"
          type: string
      required:
      - time
      - value
      type: object
    VehicleStatsFuelPercent:
      description: Vehicle fuel percentage reading.
      example:
        time: 2020-01-27T07:06:25Z
        value: 54
      properties:
        time:
          description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        value:
          description: The engine fuel level in percentage points (e.g. `99`, `50`,
            etc).
          example: 54
          format: int64
          type: integer
      required:
      - time
      - value
      type: object
    VehicleStatsGpsDistanceMeters:
      description: Vehicle GPS distance event.
      example:
        time: 2020-01-27T07:06:25Z
        value: 81029.591434899
      properties:
        time:
          description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        value:
          description: Number of meters the vehicle has traveled since the gateway
            was installed, based on GPS calculations.
          example: 81029.591434899
          format: double
          type: number
      required:
      - time
      - value
      type: object
    VehicleStatsGpsOdometerMeters:
      description: Vehicle GPS odometer event.
      example:
        time: 2020-01-27T07:06:25Z
        value: 14010293
      properties:
        time:
          description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        value:
          description: Number of meters the vehicle has traveled according to the
            GPS calculations and the manually-specified odometer reading.
          example: 14010293
          format: int64
          type: integer
      required:
      - time
      - value
      type: object
    VehicleStatsListResponse:
      description: List of vehicle stat events and pagination info.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - fuelPercent:
          - time: 2020-01-27T07:06:25Z
            value: 54
          - time: 2020-01-27T07:06:25Z
            value: 54
          obdEngineSeconds:
          - time: 2020-01-27T07:06:25Z
            value: 9723103
          - time: 2020-01-27T07:06:25Z
            value: 9723103
          ctpSmogTestData:
          - dlcPinVoltageMilliVoltsValid: true
            testDateTime: 2020-01-27T07:06:25Z
            linkId: 0
            remoteObdTestRecords:
            - o2Sensor: U
              pidCountValid: true
              minutesSinceCodesCleared: 3
              notReadyCount: 3
              fuel: U
              obdVinValid: true
              warmupsSinceCodesCleared: 3
              distanceTraveledSinceCodesClearedValid: true
              distanceTraveledWithMilOnValid: true
              permanentDtcs: P0151|P0300|P0301
              minutesSinceCodesClearedValid: true
              pcmId: 7E8
              milValid: true
              minutesSinceMilValid: true
              egr: U
              isoSaeReserved: U
              mil: "Y"
              calCvn: AaPl1io=
              obdVin: 1HGBH41JXMN109186
              permanentDtcsValid: true
              distanceTraveledSinceCodesCleared: 3
              compressionIgnitionMonitorSupported: "Y"
              calCvnValid: true
              compressionIgnitionMonitorSupportedValid: true
              dtcCount: 3
              pendingDtcs: P0151|P0300|P0301
              rpmValid: true
              heatedO2Sensor: U
              warmupsSinceCodesClearedValid: true
              calId: AVRCSUUzRDcuSEVYAAAAAAA=
              emissionRelatedDtcs: P0151|P0300|P0301
              rpm: 3
              heatedCatalyst: U
              permanentDtcCount: 3
              catalyst: U
              minutesSinceMil: 3
              misfire: U
              pendingDtcsValid: true
              obdMonitorStatusValid: true
              emissionRelatedDtcsValid: true
              pendingDtcCount: 3
              secondaryAir: U
              calIdValid: true
              distanceTraveledWithMilOn: 3
              comprehensive: U
              evapSystem: U
              pidCount: 3
            - o2Sensor: U
              pidCountValid: true
              minutesSinceCodesCleared: 3
              notReadyCount: 3
              fuel: U
              obdVinValid: true
              warmupsSinceCodesCleared: 3
              distanceTraveledSinceCodesClearedValid: true
              distanceTraveledWithMilOnValid: true
              permanentDtcs: P0151|P0300|P0301
              minutesSinceCodesClearedValid: true
              pcmId: 7E8
              milValid: true
              minutesSinceMilValid: true
              egr: U
              isoSaeReserved: U
              mil: "Y"
              calCvn: AaPl1io=
              obdVin: 1HGBH41JXMN109186
              permanentDtcsValid: true
              distanceTraveledSinceCodesCleared: 3
              compressionIgnitionMonitorSupported: "Y"
              calCvnValid: true
              compressionIgnitionMonitorSupportedValid: true
              dtcCount: 3
              pendingDtcs: P0151|P0300|P0301
              rpmValid: true
              heatedO2Sensor: U
              warmupsSinceCodesClearedValid: true
              calId: AVRCSUUzRDcuSEVYAAAAAAA=
              emissionRelatedDtcs: P0151|P0300|P0301
              rpm: 3
              heatedCatalyst: U
              permanentDtcCount: 3
              catalyst: U
              minutesSinceMil: 3
              misfire: U
              pendingDtcsValid: true
              obdMonitorStatusValid: true
              emissionRelatedDtcsValid: true
              pendingDtcCount: 3
              secondaryAir: U
              calIdValid: true
              distanceTraveledWithMilOn: 3
              comprehensive: U
              evapSystem: U
              pidCount: 3
            deviceFirmware: CTPv1
            commProtocol: V
            dlcPinVoltageMilliVolts: 12000
          - dlcPinVoltageMilliVoltsValid: true
            testDateTime: 2020-01-27T07:06:25Z
            linkId: 0
            remoteObdTestRecords:
            - o2Sensor: U
              pidCountValid: true
              minutesSinceCodesCleared: 3
              notReadyCount: 3
              fuel: U
              obdVinValid: true
              warmupsSinceCodesCleared: 3
              distanceTraveledSinceCodesClearedValid: true
              distanceTraveledWithMilOnValid: true
              permanentDtcs: P0151|P0300|P0301
              minutesSinceCodesClearedValid: true
              pcmId: 7E8
              milValid: true
              minutesSinceMilValid: true
              egr: U
              isoSaeReserved: U
              mil: "Y"
              calCvn: AaPl1io=
              obdVin: 1HGBH41JXMN109186
              permanentDtcsValid: true
              distanceTraveledSinceCodesCleared: 3
              compressionIgnitionMonitorSupported: "Y"
              calCvnValid: true
              compressionIgnitionMonitorSupportedValid: true
              dtcCount: 3
              pendingDtcs: P0151|P0300|P0301
              rpmValid: true
              heatedO2Sensor: U
              warmupsSinceCodesClearedValid: true
              calId: AVRCSUUzRDcuSEVYAAAAAAA=
              emissionRelatedDtcs: P0151|P0300|P0301
              rpm: 3
              heatedCatalyst: U
              permanentDtcCount: 3
              catalyst: U
              minutesSinceMil: 3
              misfire: U
              pendingDtcsValid: true
              obdMonitorStatusValid: true
              emissionRelatedDtcsValid: true
              pendingDtcCount: 3
              secondaryAir: U
              calIdValid: true
              distanceTraveledWithMilOn: 3
              comprehensive: U
              evapSystem: U
              pidCount: 3
            - o2Sensor: U
              pidCountValid: true
              minutesSinceCodesCleared: 3
              notReadyCount: 3
              fuel: U
              obdVinValid: true
              warmupsSinceCodesCleared: 3
              distanceTraveledSinceCodesClearedValid: true
              distanceTraveledWithMilOnValid: true
              permanentDtcs: P0151|P0300|P0301
              minutesSinceCodesClearedValid: true
              pcmId: 7E8
              milValid: true
              minutesSinceMilValid: true
              egr: U
              isoSaeReserved: U
              mil: "Y"
              calCvn: AaPl1io=
              obdVin: 1HGBH41JXMN109186
              permanentDtcsValid: true
              distanceTraveledSinceCodesCleared: 3
              compressionIgnitionMonitorSupported: "Y"
              calCvnValid: true
              compressionIgnitionMonitorSupportedValid: true
              dtcCount: 3
              pendingDtcs: P0151|P0300|P0301
              rpmValid: true
              heatedO2Sensor: U
              warmupsSinceCodesClearedValid: true
              calId: AVRCSUUzRDcuSEVYAAAAAAA=
              emissionRelatedDtcs: P0151|P0300|P0301
              rpm: 3
              heatedCatalyst: U
              permanentDtcCount: 3
              catalyst: U
              minutesSinceMil: 3
              misfire: U
              pendingDtcsValid: true
              obdMonitorStatusValid: true
              emissionRelatedDtcsValid: true
              pendingDtcCount: 3
              secondaryAir: U
              calIdValid: true
              distanceTraveledWithMilOn: 3
              comprehensive: U
              evapSystem: U
              pidCount: 3
            deviceFirmware: CTPv1
            commProtocol: V
            dlcPinVoltageMilliVolts: 12000
          engineStates:
          - time: 2020-01-27T07:06:25Z
            value: "On"
          - time: 2020-01-27T07:06:25Z
            value: "On"
          gpsDistanceMeters:
          - time: 2020-01-27T07:06:25Z
            value: 81029.591434899
          - time: 2020-01-27T07:06:25Z
            value: 81029.591434899
          gpsOdometerMeters:
          - time: 2020-01-27T07:06:25Z
            value: 14010293
          - time: 2020-01-27T07:06:25Z
            value: 14010293
          obdOdometerMeters:
          - time: 2020-01-27T07:06:25Z
            value: 14010293
          - time: 2020-01-27T07:06:25Z
            value: 14010293
          name: Truck A7
          id: "112"
        - fuelPercent:
          - time: 2020-01-27T07:06:25Z
            value: 54
          - time: 2020-01-27T07:06:25Z
            value: 54
          obdEngineSeconds:
          - time: 2020-01-27T07:06:25Z
            value: 9723103
          - time: 2020-01-27T07:06:25Z
            value: 9723103
          ctpSmogTestData:
          - dlcPinVoltageMilliVoltsValid: true
            testDateTime: 2020-01-27T07:06:25Z
            linkId: 0
            remoteObdTestRecords:
            - o2Sensor: U
              pidCountValid: true
              minutesSinceCodesCleared: 3
              notReadyCount: 3
              fuel: U
              obdVinValid: true
              warmupsSinceCodesCleared: 3
              distanceTraveledSinceCodesClearedValid: true
              distanceTraveledWithMilOnValid: true
              permanentDtcs: P0151|P0300|P0301
              minutesSinceCodesClearedValid: true
              pcmId: 7E8
              milValid: true
              minutesSinceMilValid: true
              egr: U
              isoSaeReserved: U
              mil: "Y"
              calCvn: AaPl1io=
              obdVin: 1HGBH41JXMN109186
              permanentDtcsValid: true
              distanceTraveledSinceCodesCleared: 3
              compressionIgnitionMonitorSupported: "Y"
              calCvnValid: true
              compressionIgnitionMonitorSupportedValid: true
              dtcCount: 3
              pendingDtcs: P0151|P0300|P0301
              rpmValid: true
              heatedO2Sensor: U
              warmupsSinceCodesClearedValid: true
              calId: AVRCSUUzRDcuSEVYAAAAAAA=
              emissionRelatedDtcs: P0151|P0300|P0301
              rpm: 3
              heatedCatalyst: U
              permanentDtcCount: 3
              catalyst: U
              minutesSinceMil: 3
              misfire: U
              pendingDtcsValid: true
              obdMonitorStatusValid: true
              emissionRelatedDtcsValid: true
              pendingDtcCount: 3
              secondaryAir: U
              calIdValid: true
              distanceTraveledWithMilOn: 3
              comprehensive: U
              evapSystem: U
              pidCount: 3
            - o2Sensor: U
              pidCountValid: true
              minutesSinceCodesCleared: 3
              notReadyCount: 3
              fuel: U
              obdVinValid: true
              warmupsSinceCodesCleared: 3
              distanceTraveledSinceCodesClearedValid: true
              distanceTraveledWithMilOnValid: true
              permanentDtcs: P0151|P0300|P0301
              minutesSinceCodesClearedValid: true
              pcmId: 7E8
              milValid: true
              minutesSinceMilValid: true
              egr: U
              isoSaeReserved: U
              mil: "Y"
              calCvn: AaPl1io=
              obdVin: 1HGBH41JXMN109186
              permanentDtcsValid: true
              distanceTraveledSinceCodesCleared: 3
              compressionIgnitionMonitorSupported: "Y"
              calCvnValid: true
              compressionIgnitionMonitorSupportedValid: true
              dtcCount: 3
              pendingDtcs: P0151|P0300|P0301
              rpmValid: true
              heatedO2Sensor: U
              warmupsSinceCodesClearedValid: true
              calId: AVRCSUUzRDcuSEVYAAAAAAA=
              emissionRelatedDtcs: P0151|P0300|P0301
              rpm: 3
              heatedCatalyst: U
              permanentDtcCount: 3
              catalyst: U
              minutesSinceMil: 3
              misfire: U
              pendingDtcsValid: true
              obdMonitorStatusValid: true
              emissionRelatedDtcsValid: true
              pendingDtcCount: 3
              secondaryAir: U
              calIdValid: true
              distanceTraveledWithMilOn: 3
              comprehensive: U
              evapSystem: U
              pidCount: 3
            deviceFirmware: CTPv1
            commProtocol: V
            dlcPinVoltageMilliVolts: 12000
          - dlcPinVoltageMilliVoltsValid: true
            testDateTime: 2020-01-27T07:06:25Z
            linkId: 0
            remoteObdTestRecords:
            - o2Sensor: U
              pidCountValid: true
              minutesSinceCodesCleared: 3
              notReadyCount: 3
              fuel: U
              obdVinValid: true
              warmupsSinceCodesCleared: 3
              distanceTraveledSinceCodesClearedValid: true
              distanceTraveledWithMilOnValid: true
              permanentDtcs: P0151|P0300|P0301
              minutesSinceCodesClearedValid: true
              pcmId: 7E8
              milValid: true
              minutesSinceMilValid: true
              egr: U
              isoSaeReserved: U
              mil: "Y"
              calCvn: AaPl1io=
              obdVin: 1HGBH41JXMN109186
              permanentDtcsValid: true
              distanceTraveledSinceCodesCleared: 3
              compressionIgnitionMonitorSupported: "Y"
              calCvnValid: true
              compressionIgnitionMonitorSupportedValid: true
              dtcCount: 3
              pendingDtcs: P0151|P0300|P0301
              rpmValid: true
              heatedO2Sensor: U
              warmupsSinceCodesClearedValid: true
              calId: AVRCSUUzRDcuSEVYAAAAAAA=
              emissionRelatedDtcs: P0151|P0300|P0301
              rpm: 3
              heatedCatalyst: U
              permanentDtcCount: 3
              catalyst: U
              minutesSinceMil: 3
              misfire: U
              pendingDtcsValid: true
              obdMonitorStatusValid: true
              emissionRelatedDtcsValid: true
              pendingDtcCount: 3
              secondaryAir: U
              calIdValid: true
              distanceTraveledWithMilOn: 3
              comprehensive: U
              evapSystem: U
              pidCount: 3
            - o2Sensor: U
              pidCountValid: true
              minutesSinceCodesCleared: 3
              notReadyCount: 3
              fuel: U
              obdVinValid: true
              warmupsSinceCodesCleared: 3
              distanceTraveledSinceCodesClearedValid: true
              distanceTraveledWithMilOnValid: true
              permanentDtcs: P0151|P0300|P0301
              minutesSinceCodesClearedValid: true
              pcmId: 7E8
              milValid: true
              minutesSinceMilValid: true
              egr: U
              isoSaeReserved: U
              mil: "Y"
              calCvn: AaPl1io=
              obdVin: 1HGBH41JXMN109186
              permanentDtcsValid: true
              distanceTraveledSinceCodesCleared: 3
              compressionIgnitionMonitorSupported: "Y"
              calCvnValid: true
              compressionIgnitionMonitorSupportedValid: true
              dtcCount: 3
              pendingDtcs: P0151|P0300|P0301
              rpmValid: true
              heatedO2Sensor: U
              warmupsSinceCodesClearedValid: true
              calId: AVRCSUUzRDcuSEVYAAAAAAA=
              emissionRelatedDtcs: P0151|P0300|P0301
              rpm: 3
              heatedCatalyst: U
              permanentDtcCount: 3
              catalyst: U
              minutesSinceMil: 3
              misfire: U
              pendingDtcsValid: true
              obdMonitorStatusValid: true
              emissionRelatedDtcsValid: true
              pendingDtcCount: 3
              secondaryAir: U
              calIdValid: true
              distanceTraveledWithMilOn: 3
              comprehensive: U
              evapSystem: U
              pidCount: 3
            deviceFirmware: CTPv1
            commProtocol: V
            dlcPinVoltageMilliVolts: 12000
          engineStates:
          - time: 2020-01-27T07:06:25Z
            value: "On"
          - time: 2020-01-27T07:06:25Z
            value: "On"
          gpsDistanceMeters:
          - time: 2020-01-27T07:06:25Z
            value: 81029.591434899
          - time: 2020-01-27T07:06:25Z
            value: 81029.591434899
          gpsOdometerMeters:
          - time: 2020-01-27T07:06:25Z
            value: 14010293
          - time: 2020-01-27T07:06:25Z
            value: 14010293
          obdOdometerMeters:
          - time: 2020-01-27T07:06:25Z
            value: 14010293
          - time: 2020-01-27T07:06:25Z
            value: 14010293
          name: Truck A7
          id: "112"
      properties:
        data:
          description: A list of vehicles and an array of stat events for each vehicle.
          items:
            $ref: '#/components/schemas/VehicleStatsListResponse_data'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - data
      - pagination
      type: object
    VehicleStatsObdEngineSeconds:
      description: Vehicle OBD engine seconds reading.
      example:
        time: 2020-01-27T07:06:25Z
        value: 9723103
      properties:
        time:
          description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        value:
          description: Number of seconds the vehicle's engine has been on according
            to the on-baord diagnostics.
          example: 9723103
          format: int64
          type: integer
      required:
      - time
      - value
      type: object
    VehicleStatsObdOdometerMeters:
      description: Vehicle OBD odometer reading.
      example:
        time: 2020-01-27T07:06:25Z
        value: 14010293
      properties:
        time:
          description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          format: date-time
          type: string
        value:
          description: Number of meters the vehicle has traveled according to the
            on-board diagnostics.
          example: 14010293
          format: int64
          type: integer
      required:
      - time
      - value
      type: object
    VehicleStatsResponse:
      description: Most recent vehicle stats and pagination info.
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - fuelPercent:
            time: 2020-01-27T07:06:25Z
            value: 54
          obdEngineSeconds:
            time: 2020-01-27T07:06:25Z
            value: 9723103
          engineState:
            time: 2020-01-27T07:06:25Z
            value: "On"
          gpsDistanceMeters:
            time: 2020-01-27T07:06:25Z
            value: 81029.591434899
          gpsOdometerMeters:
            time: 2020-01-27T07:06:25Z
            value: 14010293
          obdOdometerMeters:
            time: 2020-01-27T07:06:25Z
            value: 14010293
          name: Truck A7
          id: "112"
        - fuelPercent:
            time: 2020-01-27T07:06:25Z
            value: 54
          obdEngineSeconds:
            time: 2020-01-27T07:06:25Z
            value: 9723103
          engineState:
            time: 2020-01-27T07:06:25Z
            value: "On"
          gpsDistanceMeters:
            time: 2020-01-27T07:06:25Z
            value: 81029.591434899
          gpsOdometerMeters:
            time: 2020-01-27T07:06:25Z
            value: 14010293
          obdOdometerMeters:
            time: 2020-01-27T07:06:25Z
            value: 14010293
          name: Truck A7
          id: "112"
      properties:
        data:
          description: List of the most recent stats for the specified vehicles and
            stat types.
          items:
            $ref: '#/components/schemas/VehicleStatsResponse_data'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - data
      - pagination
      type: object
    VehicleStatsTime:
      $ref: '#/components/schemas/time'
    VehicleTagIds:
      description: An array of IDs of tags to associate with this vehicle.
      items:
        example: "321"
        type: string
      type: array
    VehicleTags:
      description: 'The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting)
        associated with the Vehicle. **By default**: empty. Can be set or updated
        through the Samsara Dashboard or the API at any time.'
      items:
        $ref: '#/components/schemas/tagTinyResponse'
      type: array
    VehicleVin:
      description: The VIN of the Vehicle. Most of the time, this will be automatically
        read from the engine computer by the Samsara Vehicle Gateway. It will be empty
        if it cannot be read. It can be set or updated through the Samsara Dashboard
        or the API at any time.
      example: 1FUJA6BD31LJ09646
      maxLength: 17
      minLength: 11
      type: string
    VehicleYear:
      description: The Vehicle’s manufacturing model. Automatically read from the
        engine computer if available. Empty if not available. Cannot be manually set.
      example: "2008"
      type: string
    Webhook:
      allOf:
      - $ref: '#/components/schemas/Webhook_allOf'
      description: A webhook object
    WebhookCreate:
      allOf:
      - $ref: '#/components/schemas/WebhookCreate_allOf'
      description: A webhook object
    annotation:
      description: Annotation for the driving segment.
      example: Yard move.
      format: string
      type: string
    contactTinyResponse:
      description: A minified contact object
      example:
        firstName: Jane
        lastName: Jones
        id: "22408"
      properties:
        firstName:
          description: First name of the contact.
          example: Jane
          type: string
        id:
          description: ID of the contact.
          example: "22408"
          type: string
        lastName:
          description: Last name of the contact.
          example: Jones
          type: string
      type: object
    documentTypeTinyResponse:
      description: A tiny document type response object.
      example:
        name: "112"
        id: "112"
      properties:
        id:
          description: Unique Samsara ID for the document type.
          example: "112"
          type: string
        name:
          description: Name of the document type.
          example: "112"
          type: string
      required:
      - id
      type: object
    driverId:
      description: ID of Driver to assign this segment to. The driver assignment is
        a tentative assignment until the ID is 'ACCEPTED'.
      example: "1234"
      type: string
    driverTinyResponse:
      description: A minified driver object.
      example:
        name: Susan Bob
        id: "88668"
      properties:
        id:
          description: ID of the driver.
          example: "88668"
          type: string
        name:
          description: Name of the driver.
          example: Susan Bob
          type: string
      type: object
    dvirTrailerDefectsItems:
      example:
        trailer: '{}'
        resolvedAtTime: 2020-01-27T07:06:25Z
        resolvedBy:
          name: name
          id: id
          type: driver
        comment: Air Compressor not working
        createdAtTime: 2020-01-27T07:06:25Z
        id: "18"
        defectType: Air Compressor
        isResolved: true
        vehicle: '{}'
      properties:
        comment:
          description: Comment on the defect.
          example: Air Compressor not working
          type: string
        createdAtTime:
          description: 'Time when the defect was created. UTC timestamp in RFC 3339
            format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          type: string
        defectType:
          description: The type of DVIR defect.
          example: Air Compressor
          type: string
        id:
          description: ID of the defect.
          example: "18"
          type: string
        isResolved:
          description: Signifies if this defect is resolved.
          example: true
          type: boolean
        resolvedAtTime:
          description: 'Time when this defect was resolved. Will not be returned if
            the defect is unresolved. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
          example: 2020-01-27T07:06:25Z
          type: string
        resolvedBy:
          $ref: '#/components/schemas/Defect_resolvedBy'
        trailer:
          allOf:
          - description: The trailer this defect was submitted for.
            type: object
          - description: A minified trailer object.
            properties:
              id:
                description: ID of the trailer.
                example: "123456789"
                type: string
              name:
                description: Name of the trailer.
                example: 'Midwest Trailer #5'
                type: string
            type: object
          type: object
        vehicle:
          allOf:
          - description: The vehicle this defect was submitted for.
            type: object
          - description: A minified vehicle object.
            properties:
              id:
                description: ID of the vehicle.
                example: "123456789"
                type: string
              name:
                description: Name of the vehicle.
                example: 'Midwest Truck #4'
                type: string
            type: object
          type: object
      required:
      - id
      - isResolved
      type: object
      x-go-gen-location: models
    endTimeBodyParam:
      description: End time of the driving segment, specified in RFC 3339 format.
      example: 2019-04-17T16:42:55Z
      format: date-time
      type: string
    equipmentTinyResponse:
      description: A minified equipment object.
      properties:
        id:
          description: ID of the equipment.
          example: "123456789"
          type: string
        name:
          description: Name of the equipment.
          example: '40'' crane #5'
          type: string
      required:
      - id
      type: object
    externalIds:
      additionalProperties:
        type: string
      description: The [external IDs](https://developers.samsara.com/docs/external-ids)
        for the given object.
      example:
        maintenanceId: "250020"
        payrollId: ABFS18600
      type: object
    location:
      description: Location object
      properties:
        latitude:
          description: GPS latitude represented in degrees
          example: 122.142
          format: double
          type: number
        longitude:
          description: GPS longitude represented in degrees
          example: -93.343
          format: double
          type: number
      required:
      - latitude
      - longitude
      type: object
    paginationResponse:
      description: Pagination parameters.
      example:
        hasNextPage: true
        endCursor: MjkY
      properties:
        endCursor:
          description: Cursor identifier representing the last element in the response.
            This value should be used in conjunction with a subsequent request's 'after'
            query parameter. This may be an empty string if there are no more pages
            left to view.
          example: MjkY
          format: string
          type: string
        hasNextPage:
          description: True if there are more pages of results immediately available
            after this endCursor.
          example: true
          type: boolean
      required:
      - endCursor
      - hasNextPage
      type: object
    routeStopTinyResponse:
      description: A tiny route stop response object.
      example:
        name: Sam Ave
        id: "112"
      properties:
        id:
          description: Unique Samsara ID for the route stop.
          example: "112"
          type: string
        name:
          description: Name of the route stop.
          example: Sam Ave
          type: string
      type: object
    standardErrorResponse:
      description: Error response
      properties:
        message:
          description: The message of the error.
          type: string
        requestId:
          description: The ID of the request.
          type: string
      type: object
    startTimeBodyParam:
      description: Start time of the driving segment, specified in RFC 3339 format.
      example: 2019-04-17T15:42:55Z
      format: date-time
      type: string
    tagTinyResponse:
      description: A minified tag object
      example:
        parentTagId: "4815"
        name: East Coast
        id: "3914"
      properties:
        id:
          description: ID of the tag.
          example: "3914"
          type: string
        name:
          description: Name of the tag.
          example: East Coast
          type: string
        parentTagId:
          description: If this tag is part a hierarchical tag tree, this is the ID
            of the parent tag, otherwise this will be omitted.
          example: "4815"
          type: string
      type: object
    time:
      description: 'UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.'
      example: 2020-01-27T07:06:25Z
      format: date-time
      type: string
    trailerNameOnlyResponse:
      description: A trailer object with only a name.
      example:
        name: 'Midwest Trailer #5'
      properties:
        name:
          description: Name of the trailer.
          example: 'Midwest Trailer #5'
          type: string
      type: object
    trailerTinyResponse:
      description: A minified trailer object.
      properties:
        id:
          description: ID of the trailer.
          example: "123456789"
          type: string
        name:
          description: Name of the trailer.
          example: 'Midwest Trailer #5'
          type: string
      type: object
    userTinyResponse:
      description: A minified user object.
      properties:
        id:
          description: ID of the user.
          example: "88668"
          type: string
        name:
          description: Name of the user.
          example: Susan Bob
          type: string
      type: object
    vehicleTinyResponse:
      description: A minified vehicle object.
      example:
        name: 'Midwest Truck #4'
        id: "123456789"
      properties:
        id:
          description: ID of the vehicle.
          example: "123456789"
          type: string
        name:
          description: Name of the vehicle.
          example: 'Midwest Truck #4'
          type: string
      type: object
    inline_response_200:
      example:
        data:
          notes: notes
          driver:
            name: Susan Bob
            id: "88668"
          documentType:
            name: "112"
            id: "112"
          routeStop:
            name: Sam Ave
            id: "112"
          updatedAtTime: 2006-01-02T15:04:05Z07:00
          createdAtTime: 2006-01-02T15:04:05Z07:00
          id: id
          state: submitted
          fields:
          - label: label
            fieldType: string
            value: value
          - label: label
            fieldType: string
            value: value
          vehicle:
            name: 'Midwest Truck #4'
            id: "123456789"
      properties:
        data:
          $ref: '#/components/schemas/Document'
    inline_response_200_1:
      example:
        data:
          notes: These are notes about this given equipment.
          assetSerial: 1FUJA6BD31LJ09646
          name: Crane A7
          id: "112"
          tags:
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
          - parentTagId: "4815"
            name: East Coast
            id: "3914"
      properties:
        data:
          $ref: '#/components/schemas/EquipmentResponse'
    inline_response_200_2:
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - annotation: Yard move.
          driver:
            name: Susan Bob
            id: "88668"
          startTime: 2019-04-17T15:42:55Z
          createdAtTime: 2019-04-17T16:43:00Z
          endTime: 2019-04-17T16:42:55Z
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: pending
          vehicle:
            name: 'Midwest Truck #4'
            id: "123456789"
        - annotation: Yard move.
          driver:
            name: Susan Bob
            id: "88668"
          startTime: 2019-04-17T15:42:55Z
          createdAtTime: 2019-04-17T16:43:00Z
          endTime: 2019-04-17T16:42:55Z
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: pending
          vehicle:
            name: 'Midwest Truck #4'
            id: "123456789"
      properties:
        data:
          description: A list of driving segments with no associated driver(s).
          items:
            $ref: '#/components/schemas/UnassignedDrivingSegmentResponse'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
    inline_object:
      properties:
        annotation:
          description: Annotation for the driving segment.
          example: Yard move.
          format: string
          type: string
        driverId:
          description: ID of Driver to assign this segment to. The driver assignment
            is a tentative assignment until the ID is 'ACCEPTED'.
          example: "1234"
          type: string
      required:
      - annotation
      - driverId
      type: object
    inline_response_200_3:
      example:
        data:
          annotation: Yard move.
          driver:
            name: Susan Bob
            id: "88668"
          startTime: 2019-04-17T15:42:55Z
          createdAtTime: 2019-04-17T16:43:00Z
          endTime: 2019-04-17T16:42:55Z
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: pending
          vehicle:
            name: 'Midwest Truck #4'
            id: "123456789"
      properties:
        data:
          $ref: '#/components/schemas/UnassignedDrivingSegmentResponse'
    inline_response_200_4:
      example:
        pagination:
          hasNextPage: true
          endCursor: MjkY
        data:
        - null
        - null
      properties:
        data:
          description: An array of data input objects. Each object contains the data
            input's name, ID, and other metadata.
          items:
            $ref: '#/components/schemas/ListDataInputsResponse'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
    inline_object_1:
      properties:
        driverIds:
          description: IDs of the drivers for whom the messages are sent to.
          example:
          - 111
          - 222
          - 333
          items:
            example: 555.0
            format: int64
            type: number
          type: array
        text:
          description: The text sent in the message.
          example: This is a message.
          maxLength: 65533
          minLength: 1
          type: string
      required:
      - driverIds
      - text
      type: object
    inline_response_200_5:
      description: A list of created messages.
      example:
        data:
        - driverId: 555
          text: This is a message.
        - driverId: 555
          text: This is a message.
      properties:
        data:
          items:
            $ref: '#/components/schemas/Message'
          type: array
    inline_response_200_6:
      example:
        assets:
        - assetSerialNumber: SNTEST123
          engineHours: 104
          name: Trailer 123
          id: 1
          vehicleId: 2
          cable:
          - assetType: Reefer (Thermo King)
          - assetType: Reefer (Thermo King)
        - assetSerialNumber: SNTEST123
          engineHours: 104
          name: Trailer 123
          id: 1
          vehicleId: 2
          cable:
          - assetType: Reefer (Thermo King)
          - assetType: Reefer (Thermo King)
      properties:
        assets:
          items:
            $ref: '#/components/schemas/V1Asset'
          type: array
    inline_response_200_7:
      example:
        assets:
        - assetSerialNumber: 8dka2810
          engineHours: 104
          name: Trailer 123
          location:
          - latitude: 37.0
            speedMilesPerHour: 35.0
            location: 525 York, San Francisco, CA
            longitude: -122.7
            timeMs: 12314151
          - latitude: 37.0
            speedMilesPerHour: 35.0
            location: 525 York, San Francisco, CA
            longitude: -122.7
            timeMs: 12314151
          id: 1
          cable:
            assetType: Reefer (Thermo King)
        - assetSerialNumber: 8dka2810
          engineHours: 104
          name: Trailer 123
          location:
          - latitude: 37.0
            speedMilesPerHour: 35.0
            location: 525 York, San Francisco, CA
            longitude: -122.7
            timeMs: 12314151
          - latitude: 37.0
            speedMilesPerHour: 35.0
            location: 525 York, San Francisco, CA
            longitude: -122.7
            timeMs: 12314151
          id: 1
          cable:
            assetType: Reefer (Thermo King)
        pagination:
          hasPrevPage: true
          hasNextPage: true
          endCursor: MTU5MTEzNjA2OTU0MzQ3
          startCursor: MTU5MTEzNjA2OTU0MzQ3
      properties:
        assets:
          items:
            $ref: '#/components/schemas/V1AssetCurrentLocationsResponse'
          type: array
        pagination:
          $ref: '#/components/schemas/V1Pagination'
    inline_response_200_8:
      example:
        pagination:
          hasPrevPage: true
          hasNextPage: true
          endCursor: MTU5MTEzNjA2OTU0MzQ3
          startCursor: MTU5MTEzNjA2OTU0MzQ3
        data:
        - reeferStats:
            fuelPercentage:
            - fuelPercentage: 99
              changedAtMs: 1453449599999
            - fuelPercentage: 99
              changedAtMs: 1453449599999
            powerStatus:
            - changedAtMs: 1453449599999
              status: Active (Continuous)
            - changedAtMs: 1453449599999
              status: Active (Continuous)
            engineHours:
            - engineHours: 1200
              changedAtMs: 1453449599999
            - engineHours: 1200
              changedAtMs: 1453449599999
            setPoint:
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            dischargeAirTemperature:
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            ambientAirTemperature:
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            reeferAlarms:
            - alarms:
              - severity: 1
                operatorAction: Check and repair at end of trip
                description: Check Return Air Sensor
                alarmCode: 102
              - severity: 1
                operatorAction: Check and repair at end of trip
                description: Check Return Air Sensor
                alarmCode: 102
              changedAtMs: 1453449599999
            - alarms:
              - severity: 1
                operatorAction: Check and repair at end of trip
                description: Check Return Air Sensor
                alarmCode: 102
              - severity: 1
                operatorAction: Check and repair at end of trip
                description: Check Return Air Sensor
                alarmCode: 102
              changedAtMs: 1453449599999
            returnAirTemperature:
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
          name: Reefer 123
          id: 1
          assetType: Thermo King
        - reeferStats:
            fuelPercentage:
            - fuelPercentage: 99
              changedAtMs: 1453449599999
            - fuelPercentage: 99
              changedAtMs: 1453449599999
            powerStatus:
            - changedAtMs: 1453449599999
              status: Active (Continuous)
            - changedAtMs: 1453449599999
              status: Active (Continuous)
            engineHours:
            - engineHours: 1200
              changedAtMs: 1453449599999
            - engineHours: 1200
              changedAtMs: 1453449599999
            setPoint:
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            dischargeAirTemperature:
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            ambientAirTemperature:
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            reeferAlarms:
            - alarms:
              - severity: 1
                operatorAction: Check and repair at end of trip
                description: Check Return Air Sensor
                alarmCode: 102
              - severity: 1
                operatorAction: Check and repair at end of trip
                description: Check Return Air Sensor
                alarmCode: 102
              changedAtMs: 1453449599999
            - alarms:
              - severity: 1
                operatorAction: Check and repair at end of trip
                description: Check Return Air Sensor
                alarmCode: 102
              - severity: 1
                operatorAction: Check and repair at end of trip
                description: Check Return Air Sensor
                alarmCode: 102
              changedAtMs: 1453449599999
            returnAirTemperature:
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
            - tempInMilliC: 31110
              changedAtMs: 1453449599999
          name: Reefer 123
          id: 1
          assetType: Thermo King
      properties:
        data:
          items:
            $ref: '#/components/schemas/V1AssetsReefer'
          type: array
        pagination:
          $ref: '#/components/schemas/V1Pagination'
    inline_object_2:
      properties:
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          format: int64
          type: integer
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX
            time.
          example: 1462878398034
          format: int64
          type: integer
      required:
      - endMs
      - startMs
      type: object
    inline_object_3:
      properties:
        driverId:
          description: Driver ID to query.
          example: 444
          format: int64
          type: integer
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          type: integer
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX
            time.
          example: 1462878398034
          type: integer
      required:
      - driverId
      - endMs
      - startMs
      type: object
    inline_object_4:
      properties:
        inspectionType:
          description: Only type 'mechanic' is currently accepted.
          enum:
          - mechanic
          example: mechanic
          type: string
        mechanicNotes:
          description: Any notes from the mechanic.
          example: Replaced headlight on passenger side.
          type: string
        odometerMiles:
          description: The current odometer of the vehicle.
          example: 38426
          type: integer
        previousDefectsCorrected:
          description: Whether any previous defects were corrected. If this vehicle
            or trailer was previously marked unsafe, and this DVIR marks it as safe,
            either previousDefectsCorrected or previousDefectsIgnored must be true.
          example: true
          type: boolean
        previousDefectsIgnored:
          description: Whether any previous defects were ignored. If this vehicle
            or trailer was previously marked unsafe, and this DVIR marks it as safe,
            either previousDefectsCorrected or previousDefectsIgnored must be true.
          example: false
          type: boolean
        resolvedDefectIds:
          description: List of defect IDs to resolve.  The defects must be associated
            with the provided vehicle or trailer.
          example:
          - 18
          - 19
          items:
            format: int64
            type: integer
          type: array
        safe:
          description: Whether or not this vehicle or trailer is safe to drive.
          enum:
          - safe
          - unsafe
          example: safe
          type: string
        trailerId:
          description: Id of trailer being inspected. Either vehicleId or trailerId
            must be provided.
          example: 11
          type: integer
        userEmail:
          description: The Samsara login email for the person creating the DVIR. The
            email must correspond to a Samsara user's email.
          example: j.smith@yahoo.com
          type: string
        vehicleId:
          description: Id of vehicle being inspected. Either vehicleId or trailerId
            must be provided.
          example: 10
          type: integer
      required:
      - inspectionType
      - safe
      - userEmail
      type: object
    inline_response_200_9:
      example:
        vehicles:
        - j1939:
            checkEngineLight:
              protectIsOn: true
              stopIsOn: true
              warningIsOn: true
              emissionsIsOn: true
            diagnosticTroubleCodes:
            - spnDescription: spnDescription
              fmiText: fmiText
              spnId: 1
              occurrenceCount: 6
              txId: 5
              fmiId: 0
            - spnDescription: spnDescription
              fmiText: fmiText
              spnId: 1
              occurrenceCount: 6
              txId: 5
              fmiId: 0
          passenger:
            checkEngineLight:
              isOn: true
            diagnosticTroubleCodes:
            - dtcShortCode: dtcShortCode
              dtcId: 5
              dtcDescription: dtcDescription
            - dtcShortCode: dtcShortCode
              dtcId: 5
              dtcDescription: dtcDescription
          id: 112
        - j1939:
            checkEngineLight:
              protectIsOn: true
              stopIsOn: true
              warningIsOn: true
              emissionsIsOn: true
            diagnosticTroubleCodes:
            - spnDescription: spnDescription
              fmiText: fmiText
              spnId: 1
              occurrenceCount: 6
              txId: 5
              fmiId: 0
            - spnDescription: spnDescription
              fmiText: fmiText
              spnId: 1
              occurrenceCount: 6
              txId: 5
              fmiId: 0
          passenger:
            checkEngineLight:
              isOn: true
            diagnosticTroubleCodes:
            - dtcShortCode: dtcShortCode
              dtcId: 5
              dtcDescription: dtcDescription
            - dtcShortCode: dtcShortCode
              dtcId: 5
              dtcDescription: dtcDescription
          id: 112
      properties:
        vehicles:
          items:
            $ref: '#/components/schemas/V1VehicleMaintenance'
          type: array
    inline_response_200_10:
      description: A list of messages.
      example:
        data:
        - sentAtMs: 1462881998034
          driverId: 555
          sender:
            name: John Doe
            type: dispatch
          isRead: true
          text: This is a message.
        - sentAtMs: 1462881998034
          driverId: 555
          sender:
            name: John Doe
            type: dispatch
          isRead: true
          text: This is a message.
      properties:
        data:
          items:
            $ref: '#/components/schemas/V1MessageResponse'
          type: array
    inline_object_5:
      properties:
        driverIds:
          description: IDs of the drivers for whom the messages are sent to.
          example:
          - 111
          - 222
          - 333
          items:
            example: 555.0
            format: int64
            type: number
          type: array
        text:
          description: The text sent in the message.
          example: This is a message.
          type: string
      required:
      - driverIds
      - text
      type: object
    inline_response_200_11:
      description: A list of created messages.
      example:
        data:
        - driverId: 555
          text: This is a message.
        - driverId: 555
          text: This is a message.
      properties:
        data:
          items:
            $ref: '#/components/schemas/V1Message'
          type: array
    inline_response_200_12:
      example:
        pagination:
          hasPrevPage: true
          hasNextPage: true
          endCursor: MTU5MTEzNjA2OTU0MzQ3
          startCursor: MTU5MTEzNjA2OTU0MzQ3
        trailers:
        - null
        - null
      properties:
        pagination:
          $ref: '#/components/schemas/V1Pagination'
        trailers:
          items:
            $ref: '#/components/schemas/V1TrailerAssignmentsResponse'
          type: array
    inline_response_200_13:
      example:
        dataInputs:
        - name: Pump Flow
          id: 12345
          points:
          - value: 12.332
            timeMs: 1453449599999
          - value: 12.332
            timeMs: 1453449599999
        - name: Pump Flow
          id: 12345
          points:
          - value: 12.332
            timeMs: 1453449599999
          - value: 12.332
            timeMs: 1453449599999
      properties:
        dataInputs:
          items:
            $ref: '#/components/schemas/V1DataInputHistoryResponse'
          type: array
    inline_object_6:
      properties:
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          type: integer
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX
            time.
          example: 1462878398034
          type: integer
      required:
      - endMs
      - startMs
      type: object
    inline_response_200_14:
      example:
        machines:
        - notes: This is in the left hallway behind the conveyor belt
          name: Freezer ABC
          id: 123
        - notes: This is in the left hallway behind the conveyor belt
          name: Freezer ABC
          id: 123
      properties:
        machines:
          items:
            $ref: '#/components/schemas/V1Machine'
          type: array
    inline_object_7:
      properties:
        sensors:
          description: List of sensor IDs to query.
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
      required:
      - sensors
      type: object
    inline_object_8:
      properties:
        sensors:
          description: List of sensor IDs to query.
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
      required:
      - sensors
      type: object
    _v1_sensors_history_series:
      description: V1Sensor ID and field to query.
      properties:
        field:
          description: Field to query.
          enum:
          - ambientTemperature
          - cargoPercent
          - currentLoop1Raw
          - currentLoop1Mapped
          - currentLoop2Raw
          - currentLoop2Mapped
          - doorClosed
          - humidity
          - pmPowerTotal
          - pmPhase1Power
          - pmPhase2Power
          - pmPhase3Power
          - pmPhase1PowerFactor
          - pmPhase2PowerFactor
          - pmPhase3PowerFactor
          - probeTemperature
          example: ambientTemperature
          type: string
        widgetId:
          description: V1Sensor ID to query.
          example: 1
          format: int64
          type: integer
      required:
      - field
      - widgetId
    inline_object_9:
      properties:
        endMs:
          description: End of the time range, specified in milliseconds UNIX time.
          example: 1462881998034
          type: integer
        fillMissing:
          default: withNull
          enum:
          - withNull
          - withPrevious
          type: string
        series:
          items:
            $ref: '#/components/schemas/_v1_sensors_history_series'
          type: array
        startMs:
          description: Beginning of the time range, specified in milliseconds UNIX
            time.
          example: 1462878398034
          type: integer
        stepMs:
          description: Time resolution for which data should be returned, in milliseconds.
            Specifying 3600000 will return data at hour intervals.
          example: 3600000
          type: integer
      required:
      - endMs
      - series
      - startMs
      - stepMs
      type: object
    inline_object_10:
      properties:
        sensors:
          description: List of sensor IDs to query.
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
      required:
      - sensors
      type: object
    inline_response_200_15:
      example:
        sensors:
        - macAddress: 11:11:11:11:11:11
          name: Freezer ABC
          id: 123
        - macAddress: 11:11:11:11:11:11
          name: Freezer ABC
          id: 123
      properties:
        sensors:
          items:
            $ref: '#/components/schemas/V1Sensor'
          type: array
    inline_object_11:
      properties:
        sensors:
          description: List of sensor IDs to query.
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
      required:
      - sensors
      type: object
    AddressGeofence_circle:
      description: Information about a circular geofence. This field is only needed
        if the geofence is a circle.
      example:
        latitude: 37.765363
        radiusMeters: 25
        longitude: -122.4029238
      properties:
        latitude:
          description: Latitude of the address. Will be geocoded from `formattedAddress`
            if not provided.
          example: 37.765363
          format: double
          type: number
        longitude:
          description: Longitude of the address. Will be geocoded from `formattedAddress`
            if not provided.
          example: -122.4029238
          format: double
          type: number
        radiusMeters:
          description: The radius of the circular geofence in meters.
          example: 25
          format: int64
          type: integer
      required:
      - radiusMeters
    AddressGeofence_polygon_vertices:
      properties:
        latitude:
          description: The latitude of a geofence vertex in decimal degrees.
          format: double
          type: number
        longitude:
          description: The longitude of a geofence vertex in decimal degrees.
          format: double
          type: number
      required:
      - latitude
      - longitude
    AddressGeofence_polygon:
      description: Information about a polygon geofence. This field is only needed
        if the geofence is a polygon.
      example:
        vertices:
        - latitude: 37.765363
          longitude: -122.403098
        - latitude: 38.765363
          longitude: -122.403098
        - latitude: 37.765363
          longitude: -123.403098
      properties:
        vertices:
          description: The vertices of the polygon geofence. These geofence vertices
            describe the perimeter of the polygon, and must consist of at least 3
            vertices and less than 40.
          example:
          - latitude: 37.765363
            longitude: -122.403098
          - latitude: 38.765363
            longitude: -122.403098
          - latitude: 37.765363
            longitude: -123.403098
          items:
            $ref: '#/components/schemas/AddressGeofence_polygon_vertices'
          maxItems: 40
          minItems: 3
          type: array
      required:
      - vertices
    DataInputResponse_allOf:
      properties:
        numberPoints:
          description: List of numeric data points from the data input.
          items:
            $ref: '#/components/schemas/NumberDataPoint'
          type: array
    DataInputSnapshot_allOf:
      properties:
        numberPoint:
          $ref: '#/components/schemas/NumberDataPoint'
    Defect_resolvedBy:
      description: The person who resolved this defect.  Will not be returned if the
        defect is unresolved.
      example:
        name: name
        id: id
        type: driver
      properties:
        id:
          description: ID of the entity that resolved this defect. If the defect was
            resolved by a driver, this will be a Samsara Driver ID. If the defect
            was resolved by a mechanic, this will be the Samsara Dashboard User ID
            of the mechanic.
          type: string
        name:
          description: Name of the person who resolved this defect.
          type: string
        type:
          description: Indicates whether this defect was resolved by a `driver` or
            a `mechanic`.
          enum:
          - driver
          - mechanic
          type: string
    Document_fields:
      description: item
      example:
        label: label
        fieldType: string
        value: value
      properties:
        fieldType:
          description: The type of the field in the document.
          enum:
          - photo
          - number
          - string
          - multipleChoice
          - signature
          - dateTime
          example: string
          type: string
        label:
          description: Descriptive name of this field.
          type: string
        value:
          description: |-
            The shape of the value property depends on the fieldType selected.

            - fieldType `string`: returns a string (e.g. `"hello"`).

            - fieldType `number`: returns a number (e.g. `100`).

            - fieldType `signature`: returns an array of signature objects where each object contains the `name`, `signedAtTime`, and `signatureUrl` properties for a signature. Example:

            ```json
            [
              {
                "name": "John Smith",
                "signedAtTime": "2006-01-02T15:04:05Z07:00",
                "signatureUrl": "https://www.samsara.com/signature1"
              }
            ]
            ```

            The `name` property returns the name of the signee in string format (e.g. John Smith). The `signedAtTime` property returns the time the signature was created in string format, following RFC 3339 standard (e.g. `"2006-01-02T15:04:05Z07:00"`). The `signatureUrl` property returns a string URL to get the signature data in base64 format (e.g. `"https://www.samsara.com/signature1"`).

            - fieldType `photo`: returns an array of photo objects where each object contains a `url` property for a photo. The `url` property returns a string URL for a JPG image (e.g. `"https://www.samsara.com/photo1"`).

            - fieldType `multipleChoiceField`: returns an array of multiple choice objects where each object contains the `selected` and `label` properties for a multiple choice field item. The `selected` property indicates whether the multiple choice field is selected and returns a boolean value (e.g. `false`). The `label` property describes the multiple choice field and returns a string value (e.g. `"Answer choice 1"`).
          type: string
    DocumentCreate_fields:
      description: item
      properties:
        fieldType:
          description: The type of the field in the document.
          enum:
          - photo
          - number
          - string
          - multipleChoice
          - signature
          - dateTime
          example: photo
          type: string
        label:
          description: Descriptive name of this field.
          type: string
        value:
          description: |-
            The shape of the value property depends on the fieldType selected.

            - fieldType `string`: returns a string (e.g. `"hello"`).

            - fieldType `number`: returns a number (e.g. `100`).

            - fieldType `signature`: returns an array of signature objects where each object contains the `name`, `signedAtTime`, and `signatureUrl` properties for a signature. Example:

            ```json
            [
              {
                "name": "John Smith",
                "signedAtTime": "2006-01-02T15:04:05Z07:00",
                "signatureUrl": "https://www.samsara.com/signature1"
              }
            ]
            ```

            The `name` property returns the name of the signee in string format (e.g. John Smith). The `signedAtTime` property returns the time the signature was created in string format, following RFC 3339 standard (e.g. `"2006-01-02T15:04:05Z07:00"`). The `signatureUrl` property returns a string URL to get the signature data in base64 format (e.g. `"https://www.samsara.com/signature1"`).

            - fieldType `photo`: returns an array of photo objects where each object contains a `url` property for a photo. The `url` property returns a string URL for a JPG image (e.g. `"https://www.samsara.com/photo1"`).

            - fieldType `multipleChoice`: returns an array of multiple choice objects where each object contains the `selected` and `label` properties for a multiple choice field item. The `selected` property indicates whether the multiple choice field is selected and returns a boolean value (e.g. `false`). The `label` property describes the multiple choice field and returns a string value (e.g. `"Answer choice 1"`).

            - fieldType `dateTime`: returns a string with the timestamp in RFC 3339 format.
          type: string
    DocumentField_multipleChoiceMetadata_options:
      description: The option that can be selected.
      properties:
        label:
          description: The label of the option.
          example: Option A
          type: string
    DocumentField_multipleChoiceMetadata:
      description: 'Additional metadata information for a multiple choice field type.
        Only defined when a field has fieldType: multipleChoice.'
      properties:
        options:
          description: The options that can be selected.
          items:
            $ref: '#/components/schemas/DocumentField_multipleChoiceMetadata_options'
          type: array
    DocumentField_numberMetadata:
      description: 'Additional metadata information for a number field type. Only
        defined when a field has fieldType: number.'
      properties:
        numDecimalPlaces:
          description: Number of decimal places that values for this field can have.
          example: 2.0
          format: int64
          type: number
    DocumentField_signatureMetadata:
      description: 'Additional metadata information for a signature field type. Only
        defined when a field has fieldType: signature.'
      properties:
        legalText:
          description: Legal text to accompany the signature.
          example: I consent on behalf of myself and my employer to using electronic
            signatures in this transaction. I understand that I can request a copy
            of the signed documentation from the party requesting my signature.
          type: string
    EquipmentLocation_allOf:
      properties:
        heading:
          description: Heading of the equipment in degrees.
          example: 120.0
          format: double
          type: number
        speed:
          description: Speed of the equipment in miles per hour.
          example: 48.3
          format: double
          type: number
    EquipmentLocation_allOf_1:
      properties:
        time:
          description: UTC timestamp of the time the data point was generated by the
            equipment, in RFC3339 format.
          example: 2019-05-03T04:30:31.492Z
          type: string
      required:
      - time
    EquipmentLocationSnapshotResponse_allOf:
      properties:
        location:
          $ref: '#/components/schemas/EquipmentLocation'
    EquipmentLocationsResponse_allOf:
      description: Location point for the equipment.
      properties:
        locations:
          items:
            $ref: '#/components/schemas/EquipmentLocation'
          type: array
    EquipmentStatsResponse_allOf:
      properties:
        engineRpm:
          items:
            $ref: '#/components/schemas/EquipmentEngineRpm'
          type: array
        engineSeconds:
          items:
            $ref: '#/components/schemas/EquipmentEngineSeconds'
          type: array
        engineStates:
          items:
            $ref: '#/components/schemas/EquipmentEngineState'
          type: array
        fuelPercents:
          items:
            $ref: '#/components/schemas/EquipmentFuelPercent'
          type: array
        gatewayEngineSeconds:
          items:
            $ref: '#/components/schemas/EquipmentGatewayEngineSeconds'
          type: array
        gatewayEngineStates:
          items:
            $ref: '#/components/schemas/EquipmentGatewayEngineState'
          type: array
        gpsOdometerMeters:
          items:
            $ref: '#/components/schemas/EquipmentGpsOdometerMeters'
          type: array
        obdEngineSeconds:
          items:
            $ref: '#/components/schemas/EquipmentObdEngineSeconds'
          type: array
        obdEngineStates:
          items:
            $ref: '#/components/schemas/EquipmentObdEngineState'
          type: array
    EquipmentStatsSnapshotResponse_allOf:
      properties:
        engineRpm:
          allOf:
          - $ref: '#/definitions/EquipmentEngineRpm'
          type: object
        engineSeconds:
          allOf:
          - $ref: '#/definitions/EquipmentEngineSeconds'
          type: object
        engineState:
          allOf:
          - $ref: '#/definitions/EquipmentEngineState'
          type: object
        fuelPercent:
          allOf:
          - $ref: '#/definitions/EquipmentFuelPercent'
          type: object
        gatewayEngineSeconds:
          allOf:
          - $ref: '#/definitions/EquipmentGatewayEngineSeconds'
          type: object
        gatewayEngineState:
          allOf:
          - $ref: '#/definitions/EquipmentGatewayEngineState'
          type: object
        gpsOdometerMeters:
          allOf:
          - $ref: '#/definitions/EquipmentGpsOdometerMeters'
          type: object
        obdEngineSeconds:
          allOf:
          - $ref: '#/definitions/EquipmentObdEngineSeconds'
          type: object
        obdEngineState:
          allOf:
          - $ref: '#/definitions/EquipmentObdEngineState'
          type: object
    ListDataInputsResponse_allOf:
      properties:
        type:
          description: Type of data input, specified by the user at the time of creation
            of the data input.
          example: Flow
          format: string
          type: string
    OrgHarshEventsKondoResponse_behaviorLabels:
      example:
        labelSource: SYSTEM
        labelType: Braking
      properties:
        labelSource:
          description: Label source of the harsh event
          example: SYSTEM
          format: string
          type: string
        labelType:
          description: Label type of the harsh event
          example: Braking
          format: string
          type: string
    OrgHarshEventsKondoResponse_location:
      example:
        latitude: 37.762554
        longitude: -122.409355
      properties:
        latitude:
          description: Longitude at which the harsh event happened
          example: 37.762554
          format: float
          type: number
        longitude:
          description: Longitude at which the harsh event happened
          example: -122.409355
          format: float
          type: number
    OrgHarshEventsKondoResponse_data:
      example:
        downloadForwardVideoUrl: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
        downloadInwardVideoUrl: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
        behaviorLabels:
        - labelSource: SYSTEM
          labelType: Braking
        - labelSource: SYSTEM
          labelType: Braking
        incidentReportUrl: https://cloud.samsara.com/groups/4185/fleet/reports/safety/vehicle/222/incident/1499411220000
        location:
          latitude: 37.762554
          longitude: -122.409355
        downloadTrackedInwardVideoUrl: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
      properties:
        behaviorLabels:
          items:
            $ref: '#/components/schemas/OrgHarshEventsKondoResponse_behaviorLabels'
          type: array
        downloadForwardVideoUrl:
          description: Download forward video url
          example: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
          format: string
          type: string
        downloadInwardVideoUrl:
          description: Download inward video url
          example: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
          format: string
          type: string
        downloadTrackedInwardVideoUrl:
          description: Download tracked inward video url
          example: samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4
          format: string
          type: string
        incidentReportUrl:
          description: Incident report url
          example: https://cloud.samsara.com/groups/4185/fleet/reports/safety/vehicle/222/incident/1499411220000
          format: string
          type: string
        location:
          $ref: '#/components/schemas/OrgHarshEventsKondoResponse_location'
    OrgSafetyScoresResponse_harshEventIdentifiers:
      example:
        eventTime: 2019-04-17T16:42:55Z
        vehicleId: 212014918214656
      properties:
        eventTime:
          description: Event time, specified in RFC 3339
          example: 2019-04-17T16:42:55Z
          format: string
          type: string
        vehicleId:
          description: Vehicle Id
          example: 212014918214656
          format: int64
          type: integer
    OrgSafetyScoresResponse_data:
      example:
        harshAccelCount: 3
        totalDistanceDrivenMeters: 2509
        harshEventIdentifiers:
        - eventTime: 2019-04-17T16:42:55Z
          vehicleId: 212014918214656
        - eventTime: 2019-04-17T16:42:55Z
          vehicleId: 212014918214656
        totalHarshEventCount: 20
        harshTurningCount: 10
        harshBrakingCount: 5
        crashCount: 1
        driverId: 319596
        safetyScore: 92
        totalTimeDrivenMs: 12343
        vehicleId: 212014918214656
        timeOverSpeedLimitMs: 123
        safetyScoreRank: 7
      properties:
        crashCount:
          description: Crash count
          example: 1
          format: int64
          type: integer
        driverId:
          description: Driver Id
          example: 319596
          format: int64
          type: integer
        harshAccelCount:
          description: Harsh accel count
          example: 3
          format: int64
          type: integer
        harshBrakingCount:
          description: Harsh braking count
          example: 5
          format: int64
          type: integer
        harshEventIdentifiers:
          items:
            $ref: '#/components/schemas/OrgSafetyScoresResponse_harshEventIdentifiers'
          type: array
        harshTurningCount:
          description: Harsh turning count
          example: 10
          format: int64
          type: integer
        safetyScore:
          description: Vehicle/Driver Safety Score
          example: 92
          format: int64
          type: integer
        safetyScoreRank:
          description: Vehicle/Driver Safety Rank
          example: 7
          format: int64
          type: integer
        timeOverSpeedLimitMs:
          description: Overspeed limit time, specified in milliseconds UNIX time.
          example: 123
          format: int64
          type: integer
        totalDistanceDrivenMeters:
          description: Total distance driven meters
          example: 2509
          format: int64
          type: integer
        totalHarshEventCount:
          description: Total harsh event count
          example: 20
          format: int64
          type: integer
        totalTimeDrivenMs:
          description: Total driver time, specified in milliseconds UNIX time.
          example: 12343
          format: int64
          type: integer
        vehicleId:
          description: Vehicle Id
          example: 212014918214656
          format: int64
          type: integer
    OrganizationInfoResponse_carrierSettings:
      description: Carrier for a given organization.
      properties:
        carrierName:
          description: Carrier for a given organization.
          example: Acme Inc.
          maxLength: 255
          type: string
        dotNumber:
          description: Carrier US DOT Number for the organization.
          example: 98231
          format: int64
          type: integer
        mainOfficeAddress:
          description: Main office address for a given organization.
          example: 1234 Pear St., Scranton, PA 62814
          maxLength: 255
          type: string
    RouteStop_documents:
      description: A document object
      properties:
        id:
          description: Unique identifier for the document.
          example: b6199cf8-3073-441c-9b04-524fb2bb120d
          type: string
    Tag_allOf:
      properties:
        addresses:
          description: The addresses that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObject'
          type: array
        assets:
          description: The trailers, unpowered, and powered assets that belong to
            this tag.
          items:
            $ref: '#/components/schemas/TaggedObject'
          type: array
        drivers:
          description: The drivers that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObject'
          type: array
        machines:
          description: The machines that belong to thistag.
          items:
            $ref: '#/components/schemas/TaggedObject'
          type: array
        parentTag:
          $ref: '#/components/schemas/ParentTag'
        sensors:
          description: The sensors that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObject'
          type: array
        vehicles:
          description: The vehicles that belong to this tag.
          items:
            $ref: '#/components/schemas/TaggedObject'
          type: array
    V1Asset_cable:
      example:
        assetType: Reefer (Thermo King)
      properties:
        assetType:
          description: Asset type
          example: Reefer (Thermo King)
          type: string
    V1AssetCurrentLocationsResponse_cable:
      description: The cable connected to the asset
      example:
        assetType: Reefer (Thermo King)
      properties:
        assetType:
          description: Asset type
          example: Reefer (Thermo King)
          type: string
    V1AssetReeferResponse_reeferStats_alarms:
      example:
        severity: 1
        operatorAction: Check and repair at end of trip
        description: Check Return Air Sensor
        alarmCode: 102
      properties:
        alarmCode:
          description: ID of the alarm
          example: 102
          format: int64
          type: integer
        description:
          description: Description of the alarm
          example: Check Return Air Sensor
          type: string
        operatorAction:
          description: Recommended operator action
          example: Check and repair at end of trip
          type: string
        severity:
          description: 'Severity of the alarm: 1: OK to run, 2: Check as specified,
            3: Take immediate action'
          example: 1
          format: int64
          type: integer
    V1AssetReeferResponse_reeferStats_alarms_1:
      example:
        alarms:
        - severity: 1
          operatorAction: Check and repair at end of trip
          description: Check Return Air Sensor
          alarmCode: 102
        - severity: 1
          operatorAction: Check and repair at end of trip
          description: Check Return Air Sensor
          alarmCode: 102
        changedAtMs: 1453449599999
      properties:
        alarms:
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_alarms'
          type: array
        changedAtMs:
          description: Timestamp when the alarms were reported, in Unix milliseconds
            since epoch
          example: 1453449599999
          format: int64
          type: integer
    V1AssetReeferResponse_reeferStats_engineHours:
      example:
        engineHours: 1200
        changedAtMs: 1453449599999
      properties:
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
        engineHours:
          description: Engine hours of the reefer.
          example: 1200
          format: int64
          type: integer
    V1AssetReeferResponse_reeferStats_fuelPercentage:
      example:
        fuelPercentage: 99
        changedAtMs: 1453449599999
      properties:
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
        fuelPercentage:
          description: Fuel percentage of the reefer.
          example: 99
          format: int64
          type: integer
    V1AssetReeferResponse_reeferStats_powerStatus:
      example:
        changedAtMs: 1453449599999
        status: Active (Continuous)
      properties:
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
        status:
          description: Power status of the reefer.
          example: Active (Continuous)
          type: string
    V1AssetReeferResponse_reeferStats_returnAirTemp:
      example:
        tempInMilliC: 31110
        changedAtMs: 1453449599999
      properties:
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
        tempInMilliC:
          description: Return air temperature in millidegree Celsius.
          example: 31110
          format: int64
          type: integer
    V1AssetReeferResponse_reeferStats_setPoint:
      example:
        tempInMilliC: 31110
        changedAtMs: 1453449599999
      properties:
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
        tempInMilliC:
          description: Set point temperature in millidegree Celsius.
          example: 31110
          format: int64
          type: integer
    V1AssetReeferResponse_reeferStats:
      example:
        fuelPercentage:
        - fuelPercentage: 99
          changedAtMs: 1453449599999
        - fuelPercentage: 99
          changedAtMs: 1453449599999
        powerStatus:
        - changedAtMs: 1453449599999
          status: Active (Continuous)
        - changedAtMs: 1453449599999
          status: Active (Continuous)
        engineHours:
        - engineHours: 1200
          changedAtMs: 1453449599999
        - engineHours: 1200
          changedAtMs: 1453449599999
        setPoint:
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        returnAirTemp:
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        alarms:
        - alarms:
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          changedAtMs: 1453449599999
        - alarms:
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          changedAtMs: 1453449599999
      properties:
        alarms:
          description: Reefer alarms
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_alarms_1'
          type: array
        engineHours:
          description: Engine hours of the reefer
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_engineHours'
          type: array
        fuelPercentage:
          description: Fuel percentage of the reefer
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_fuelPercentage'
          type: array
        powerStatus:
          description: Power status of the reefer
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_powerStatus'
          type: array
        returnAirTemp:
          description: Return air temperature of the reefer
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_returnAirTemp'
          type: array
        setPoint:
          description: Set point temperature of the reefer
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_setPoint'
          type: array
    V1AssetsReefer_reeferStats_ambientAirTemperature:
      example:
        tempInMilliC: 31110
        changedAtMs: 1453449599999
      properties:
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
        tempInMilliC:
          description: Ambient temperature in millidegree Celsius.
          example: 31110
          format: int64
          type: integer
    V1AssetsReefer_reeferStats_dischargeAirTemperature:
      example:
        tempInMilliC: 31110
        changedAtMs: 1453449599999
      properties:
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
        tempInMilliC:
          description: Discharge temperature in millidegree Celsius.
          example: 31110
          format: int64
          type: integer
    V1AssetsReefer_reeferStats_powerStatus:
      example:
        changedAtMs: 1453449599999
        status: Active (Continuous)
      properties:
        changedAtMs:
          description: Timestamp in Unix milliseconds since epoch.
          example: 1453449599999
          format: int64
          type: integer
        status:
          description: Power status of the reefer.
          enum:
          - "Off"
          - Active
          - Active (Start/Stop)
          - Active (Continuous)
          example: Active (Continuous)
          type: string
    V1AssetsReefer_reeferStats:
      description: Contains all the state changes of the reefer for the included stat
        types. Each state change is recorded independently, so the number of records
        in each array may differ depending on when that stat changed state. Stat types
        with a continuous value (such as temperature) will be recorded at different
        rates depending on the reefer, but generally readings have a frequency on
        the order of seconds.
      example:
        fuelPercentage:
        - fuelPercentage: 99
          changedAtMs: 1453449599999
        - fuelPercentage: 99
          changedAtMs: 1453449599999
        powerStatus:
        - changedAtMs: 1453449599999
          status: Active (Continuous)
        - changedAtMs: 1453449599999
          status: Active (Continuous)
        engineHours:
        - engineHours: 1200
          changedAtMs: 1453449599999
        - engineHours: 1200
          changedAtMs: 1453449599999
        setPoint:
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        dischargeAirTemperature:
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        ambientAirTemperature:
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        reeferAlarms:
        - alarms:
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          changedAtMs: 1453449599999
        - alarms:
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          - severity: 1
            operatorAction: Check and repair at end of trip
            description: Check Return Air Sensor
            alarmCode: 102
          changedAtMs: 1453449599999
        returnAirTemperature:
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
        - tempInMilliC: 31110
          changedAtMs: 1453449599999
      properties:
        ambientAirTemperature:
          description: Ambient temperature of the reefer. This is the temperature
            of the air around the Samsara Asset Gateway.
          items:
            $ref: '#/components/schemas/V1AssetsReefer_reeferStats_ambientAirTemperature'
          type: array
        dischargeAirTemperature:
          description: Discharge air temperature of the reefer. This is the temperature
            of the air as it leaves the cooling unit.
          items:
            $ref: '#/components/schemas/V1AssetsReefer_reeferStats_dischargeAirTemperature'
          type: array
        engineHours:
          description: Engine hours of the reefer
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_engineHours'
          type: array
        fuelPercentage:
          description: Fuel percentage of the reefer
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_fuelPercentage'
          type: array
        powerStatus:
          description: Power status of the reefer
          items:
            $ref: '#/components/schemas/V1AssetsReefer_reeferStats_powerStatus'
          type: array
        reeferAlarms:
          description: Reefer alarms
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_alarms_1'
          type: array
        returnAirTemperature:
          description: Return air temperature of the reefer. This is the temperature
            read by the reefer module (Carrier, Thermo King) that shows the temperature
            of the air as it enters the system.
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_returnAirTemp'
          type: array
        setPoint:
          description: Set point temperature of the reefer
          items:
            $ref: '#/components/schemas/V1AssetReeferResponse_reeferStats_setPoint'
          type: array
    V1CargoResponse_sensors:
      example:
        cargoStatusTime: 2019-04-17T16:42:55Z
        cargoEmpty: true
        name: Trailer Cargo V1Sensor
        id: 122
        vehicleId: 124
        trailerId: 123
      properties:
        cargoEmpty:
          description: Flag indicating whether the current cargo is empty or loaded.
          example: true
          type: boolean
        cargoStatusTime:
          description: The timestamp of reported cargo status, specified in RFC 3339
            time.
          example: 2019-04-17T16:42:55Z
          type: string
        id:
          description: ID of the sensor.
          example: 122
          format: int64
          type: integer
        name:
          description: Name of the sensor.
          example: Trailer Cargo V1Sensor
          type: string
        trailerId:
          description: ID of the trailer associated with the sensor for the data point.
            If no trailer is connected, this parameter will not be reported.
          example: 123
          type: integer
        vehicleId:
          description: ID of the vehicle associated with the sensor for the data point.
            If no vehicle is connected, this parameter will not be reported.
          example: 124
          type: integer
    V1DataInputHistoryResponse_points:
      example:
        value: 12.332
        timeMs: 1453449599999
      properties:
        timeMs:
          example: 1453449599999
          format: int64
          type: integer
        value:
          example: 12.332
          format: double
          type: number
    V1DispatchJob_allOf:
      properties:
        arrived_at_ms:
          description: The time at which the driver arrived at the job destination.
          example: 1462881998034
          format: int64
          type: integer
        completed_at_ms:
          description: The time at which the job was marked complete (e.g. started
            driving to the next destination).
          example: 1462881998034
          format: int64
          type: integer
        dispatch_route_id:
          description: ID of the route that this job belongs to.
          example: 55
          format: int64
          type: integer
        documents:
          description: Document submissions associated with this job.
          items:
            $ref: '#/components/schemas/V1DispatchJobDocumentInfo'
          type: array
        driver_id:
          description: ID of the driver assigned to the dispatch job.
          example: 444
          format: int64
          type: integer
        en_route_at_ms:
          description: The time at which the assigned driver started fulfilling the
            job (e.g. started driving to the destination).
          example: 1462881998034
          format: int64
          type: integer
        estimated_arrival_ms:
          description: The time at which the assigned driver is estimated to arrive
            at the job destination. Only valid for en-route jobs.
          example: 1462881998034
          format: int64
          type: integer
        fleet_viewer_url:
          description: Fleet viewer url of the dispatch job.
          example: https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token
          type: string
        group_id:
          description: Deprecated.
          example: 101
          format: int64
          type: integer
        id:
          description: ID of the Samsara dispatch job.
          example: 773
          format: int64
          type: integer
        job_state:
          $ref: '#/components/schemas/V1jobStatus'
        skipped_at_ms:
          description: The time at which the job was marked skipped.
          example: 1462881998034
          format: int64
          type: integer
        vehicle_id:
          description: ID of the vehicle used for the dispatch job.
          example: 112
          format: int64
          type: integer
      required:
      - dispatch_route_id
      - id
      - job_state
    V1DispatchJobUpdate_allOf:
      properties:
        id:
          description: ID of the Samsara dispatch job to update
          example: 42
          format: int64
          type: integer
      required:
      - id
    V1DispatchJobWithoutETA_allOf:
      properties:
        arrived_at_ms:
          description: The time at which the driver arrived at the job destination.
          example: 1462881998034
          format: int64
          type: integer
        completed_at_ms:
          description: The time at which the job was marked complete (e.g. started
            driving to the next destination).
          example: 1462881998034
          format: int64
          type: integer
        dispatch_route_id:
          description: ID of the route that this job belongs to.
          example: 55
          format: int64
          type: integer
        documents:
          description: Document submissions associated with this job.
          items:
            $ref: '#/components/schemas/V1DispatchJobDocumentInfo'
          type: array
        driver_id:
          description: ID of the driver assigned to the dispatch job.
          example: 444
          format: int64
          type: integer
        en_route_at_ms:
          description: The time at which the assigned driver started fulfilling the
            job (e.g. started driving to the destination).
          example: 1462881998034
          format: int64
          type: integer
        fleet_viewer_url:
          description: Fleet viewer url of the dispatch job.
          example: https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token
          type: string
        group_id:
          description: Deprecated.
          example: 101
          format: int64
          type: integer
        id:
          description: ID of the Samsara dispatch job.
          example: 773
          format: int64
          type: integer
        job_state:
          $ref: '#/components/schemas/V1jobStatus'
        skipped_at_ms:
          description: The time at which the job was marked skipped.
          example: 1462881998034
          format: int64
          type: integer
        vehicle_id:
          description: ID of the vehicle used for the dispatch job.
          example: 112
          format: int64
          type: integer
      required:
      - dispatch_route_id
      - id
      - job_state
    V1DispatchRoute_allOf:
      properties:
        dispatch_jobs:
          description: The dispatch jobs associated with this route.
          items:
            $ref: '#/components/schemas/V1DispatchJob'
          type: array
        id:
          description: ID of the Samsara dispatch route.
          example: 556
          format: int64
          type: integer
    V1DispatchRouteCreate_allOf:
      properties:
        dispatch_jobs:
          description: The dispatch jobs to create for this route.
          items:
            $ref: '#/components/schemas/V1DispatchJobCreate'
          type: array
      required:
      - dispatch_jobs
    V1DispatchRouteUpdate_allOf:
      properties:
        dispatch_jobs:
          description: The dispatch jobs for the route.
          items:
            $ref: '#/components/schemas/V1DispatchJobUpdate'
          type: array
      required:
      - dispatch_jobs
    V1DispatchRouteUpdateBase_allOf:
      properties:
        id:
          description: ID of route. This must match the route ID passed in URL.
          example: 42
          format: int64
          type: integer
      required:
      - id
    V1DispatchRouteWithoutETA_allOf:
      properties:
        dispatch_jobs:
          description: The dispatch jobs associated with this route.
          items:
            $ref: '#/components/schemas/V1DispatchJobWithoutETA'
          type: array
        id:
          description: ID of the Samsara dispatch route.
          example: 556
          format: int64
          type: integer
    V1Document_allOf:
      properties:
        documentType:
          description: Name of the document type.
          example: Fuel Receipt
          type: string
        driverCreatedAtMs:
          description: The time in Unix epoch milliseconds that the document was created
            in the driver app.
          example: 1462881998034
          format: int64
          type: integer
        driverId:
          description: ID of the driver for whom the document is submitted.
          example: 555
          format: int64
          type: integer
        fields:
          description: The fields associated with this document.
          items:
            $ref: '#/components/schemas/V1DocumentField'
          type: array
        id:
          description: ID of the document.
          example: 2018_42424242
          type: string
        orgId:
          description: Organization ID that the document belongs to.
          example: 555
          format: int64
          type: integer
        serverCreatedAtMs:
          description: The time in Unix epoch milliseconds that the document was received
            by the server.
          example: 1462881998034
          format: int64
          type: integer
        serverUpdatedAtMs:
          description: The time in Unix epoch milliseconds that the document was updated
            on the server.
          example: 1462881998034
          format: int64
          type: integer
        vehicleId:
          description: ID of the vehicle the driver was signed into when the document
            was submitted. Will be `null` if the document `state` is `Required`.
          example: 222
          format: int64
          type: integer
      required:
      - documentType
      - driverCreatedAtMs
      - driverId
      - fields
      - id
      - orgId
      - serverCreatedAtMs
      - serverUpdatedAtMs
      - vehicleId
    V1DocumentCreate_allOf:
      description: Arguments to create a document.
      properties:
        documentTypeUuid:
          description: Universally unique identifier for the document type that this
            document is being created for.
          example: 4aff772c-a7bb-45e6-8e41-6a53e34feb83
          type: string
        fields:
          description: List of fields for the document. The fields must be listed
            in the order that that they appear in the document type. Only `stringValue`,
            `numberValue`, `multipleChoiceValue`, and `dateTimeValue` fields are supported
            for document creation via the API.
          items:
            $ref: '#/components/schemas/V1DocumentField'
          type: array
      required:
      - documentTypeUuid
      - fields
    V1DocumentField_allOf:
      properties:
        label:
          description: The name of the field.
          example: Fuel Cost ($)
          type: string
        value:
          description: 'DEPRECATED: Please use `stringValue`, `numberValue`, `photoValue`,
            `multipleChoiceValue`, `signatureValue`, or `dateTimeValue` instead.'
          type: object
      required:
      - label
    V1DocumentFieldCreate_dateTimeValue:
      description: The value of a `ValueType_DateTime` field.
      properties:
        dateTimeMs:
          description: The Unix epoch on milliseconds of this date time field.
          example: 10855639004823
          format: int64
          type: integer
      required:
      - dateTimeMs
    V1DocumentFieldCreate_multipleChoiceValue:
      properties:
        selected:
          description: Whether the multiple choice field is selected or not.
          type: boolean
        value:
          description: The name of the multiple choice field.
          type: string
    V1DocumentFieldType_multipleChoiceValueTypeMetadata_multipleChoiceOptionLabels:
      description: The labels for the multiple choice options.
      example:
        label: Loaded
      properties:
        label:
          description: The lable for the multiple choice option
          example: Loaded
          type: string
    V1DocumentFieldType_multipleChoiceValueTypeMetadata:
      description: Metadata about the multiple choice value. Only present for value
        type `ValueType_MultipleChoice`.
      example:
        multipleChoiceOptionLabels:
          label: Loaded
      properties:
        multipleChoiceOptionLabels:
          $ref: '#/components/schemas/V1DocumentFieldType_multipleChoiceValueTypeMetadata_multipleChoiceOptionLabels'
    V1DocumentFieldType_numberValueTypeMetadata:
      description: Metadata about the numeric value type. Only present for value type
        `ValueType_Number`.
      example:
        numDecimalPlaces: 2.0
      properties:
        numDecimalPlaces:
          description: The number of decimal places this value type can have.
          example: 2.0
          format: int64
          type: number
    V1DocumentFieldType_signatureValueTypeMetadata:
      description: Metadata about the signature value type. Only present for value
        type `ValueType_Signature`.
      example:
        legalText: legalText
      properties:
        legalText:
          description: The legal text associated with this signature.
          type: string
    V1DoorResponse_sensors:
      example:
        doorClosed: true
        doorStatusTime: 2019-04-17T16:42:55Z
        name: Trailer Door V1Sensor
        id: 122
        vehicleId: 124
        trailerId: 123
      properties:
        doorClosed:
          description: Flag indicating whether the current door is closed or open.
          example: true
          type: boolean
        doorStatusTime:
          description: The timestamp of reported door status, specified in RFC 3339
            time.
          example: 2019-04-17T16:42:55Z
          type: string
        id:
          description: ID of the sensor.
          example: 122
          format: int64
          type: integer
        name:
          description: Name of the sensor.
          example: Trailer Door V1Sensor
          type: string
        trailerId:
          description: ID of the trailer associated with the sensor for the data point.
            If no trailer is connected, this parameter will not be reported.
          example: 123
          type: integer
        vehicleId:
          description: ID of the vehicle associated with the sensor for the data point.
            If no vehicle is connected, this parameter will not be reported.
          example: 124
          type: integer
    V1DriverDailyLogResponse_days:
      example:
        certifiedAtMs: 0.8008281904610115
        endMs: 1473836400000
        startMs: 1473750000000
        trailerIds:
        - 10293
        - 192933
        activeHours: 5.4
        distanceMiles: 123.24
        activeMs: 691200
        certified: true
        shippingDocIds:
        - 14334
        - 104920
        vehicleIds:
        - 192319
        - 12958
      properties:
        activeHours:
          description: Hours spent on duty or driving, rounded to two decimal places.
          example: 5.4
          format: double
          type: number
        activeMs:
          description: Milliseconds spent on duty or driving.
          example: 691200
          format: int64
          type: integer
        certified:
          description: Whether this HOS day chart was certified by the driver.
          type: boolean
        certifiedAtMs:
          description: Unix epoch time (in ms) of time when this chart was certified.
            If this chart is uncertified, 0.
          format: int64
          type: number
        distanceMiles:
          description: Distance driven in miles, rounded to two decimal places.
          example: 123.24
          format: double
          type: number
        endMs:
          description: End of the HOS day, specified in milliseconds UNIX time.
          example: 1473836400000
          type: integer
        shippingDocIds:
          description: List of customer shipping document IDs associated with the
            driver for the day.
          example:
          - 14334
          - 104920
          properties: {}
          type: object
        startMs:
          description: End of the HOS day, specified in milliseconds UNIX time.
          example: 1473750000000
          type: integer
        trailerIds:
          description: List of trailer ID's associated with the driver for the day.
          example:
          - 10293
          - 192933
          properties: {}
          type: object
        vehicleIds:
          description: List of vehicle ID's associated with the driver for the day.
          example:
          - 192319
          - 12958
          properties: {}
          type: object
    V1DvirBase_authorSignature:
      description: The authors signature for the DVIR.
      example:
        mechanicUserId: 14849
        driverId: 2581
        name: John Smith
        signedAt: 12535500000
        type: driver
        email: j.smith@yahoo.com
        username: jsmith
      properties:
        driverId:
          description: ID of the driver who signed the DVIR. Will not be returned
            if mechanicUserId is returned.
          example: 2581
          format: int64
          type: integer
        email:
          description: Email of the  driver|mechanic who signed the DVIR.
          example: j.smith@yahoo.com
          type: string
        mechanicUserId:
          description: ID of the mechanic who signed the DVIR. Will not be returned
            if driverId is returned.
          example: 14849
          format: int64
          type: integer
        name:
          description: The name of the driver or mechanic who signed the DVIR.
          example: John Smith
          type: string
        signedAt:
          description: The time in millis when the DVIR was signed
          example: 12535500000
          format: int64
          type: integer
        type:
          description: Type corresponds to whether the signature corresponds to driver|mechanic.
          example: driver
          type: string
        username:
          description: Username of the  driver|mechanic who signed the DVIR.
          example: jsmith
          type: string
    V1DvirBase_mechanicOrAgentSignature:
      description: The mechanic's or agent's signature for the DVIR.
      example:
        mechanicUserId: 14849
        driverId: 2581
        name: John Smith
        signedAt: 12535500000
        type: driver
        email: j.smith@yahoo.com
        username: jsmith
      properties:
        driverId:
          description: ID of the driver who signed the DVIR. Will not be returned
            if mechanicUserId is returned.
          example: 2581
          format: int64
          type: integer
        email:
          description: Email of the  agent|mechanic who signed the DVIR.
          example: j.smith@yahoo.com
          type: string
        mechanicUserId:
          description: ID of the mechanic who signed the DVIR. Will not be returned
            if driverId is returned.
          example: 14849
          format: int64
          type: integer
        name:
          description: The name of the agent or mechanic who signed the DVIR.
          example: John Smith
          type: string
        signedAt:
          description: The time in millis when the DVIR was signed
          example: 12535500000
          format: int64
          type: integer
        type:
          description: Type corresponds to whether the signature corresponds to driver|mechanic.
          example: driver
          type: string
        username:
          description: Username of the  agent|mechanic who signed the DVIR.
          example: jsmith
          type: string
    V1DvirBase_nextDriverSignature:
      description: The next driver signature for the DVIR.
      example:
        driverId: 2581
        name: John Smith
        signedAt: 12535500000
        type: driver
        email: j.smith@yahoo.com
        username: jsmith
      properties:
        driverId:
          description: ID of the driver who signed the DVIR
          example: 2581
          format: int64
          type: integer
        email:
          description: Email of the  driver who signed the next DVIR on this vehicle.
          example: j.smith@yahoo.com
          type: string
        name:
          description: The name of the driver who signed the next DVIR on this vehicle.
          example: John Smith
          type: string
        signedAt:
          description: The time in millis when the next driver signed the DVIR on
            this vehicle.
          example: 12535500000
          format: int64
          type: integer
        type:
          description: Type corresponds to driver.
          example: driver
          type: string
        username:
          description: Username of the  driver who signed the next DVIR on this vehicle.
          example: jsmith
          type: string
    V1DvirBase_vehicle:
      description: The vehicle on which DVIR was done.
      example:
        name: Storer's vehicle 19
        id: 19
      properties:
        id:
          description: The vehicle id on which DVIR was done.
          example: 19
          format: int64
          type: integer
        name:
          description: The vehicle on which DVIR was done.
          example: Storer's vehicle 19
          type: string
    V1HosAuthenticationLogsResponse_authenticationLogs:
      example:
        actionType: signin
        address: THIS FIELD IS NOT USED
        city: THIS FIELD IS NOT USED
        happenedAtMs: 1462881998034
        addressName: THIS FIELD IS NOT USED
        state: THIS FIELD IS NOT USED
      properties:
        actionType:
          description: The log type - one of 'signin' or 'signout'
          example: signin
          type: string
        address:
          description: 'DEPRECATED: THIS FIELD IS NOT POPULATED'
          example: THIS FIELD IS NOT USED
          type: string
        addressName:
          description: 'DEPRECATED: THIS FIELD IS NOT POPULATED'
          example: THIS FIELD IS NOT USED
          type: string
        city:
          description: 'DEPRECATED: THIS FIELD IS NOT POPULATED'
          example: THIS FIELD IS NOT USED
          type: string
        happenedAtMs:
          description: The time at which the event was recorded in UNIX milliseconds.
          example: 1462881998034
          format: int64
          type: integer
        state:
          description: 'DEPRECATED: THIS FIELD IS NOT POPULATED'
          example: THIS FIELD IS NOT USED
          type: string
    V1HosLogsResponse_logs:
      example:
        hosStatusType: OFF_DUTY
        locLng: -98.50289
        logStartMs: 1462881998034
        driverId: 444
        locCity: Ahwatukee
        groupId: 101
        locName: McLean Site A
        locLat: 23.413702
        remark: Lunch Break
        locState: Arizona
        vehicleId: 112
        codriverIds:
        - 445.0
        - 445.0
      properties:
        codriverIds:
          items:
            description: Ids of codrivers during any of the logged trips
            example: 445.0
            type: number
          type: array
        driverId:
          description: ID of the driver.
          example: 444
          format: int64
          type: integer
        groupId:
          description: Deprecated.
          example: 101
          format: int64
          type: integer
        hosStatusType:
          description: The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`,
            `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
          example: OFF_DUTY
          type: string
        locCity:
          description: City in which the log was recorded.
          example: Ahwatukee
          type: string
        locLat:
          description: Latitude at which the log was recorded.
          example: 23.413702
          format: float
          type: number
        locLng:
          description: Longitude at which the log was recorded.
          example: -98.50289
          format: float
          type: number
        locName:
          description: Name of location at which the log was recorded.
          example: McLean Site A
          type: string
        locState:
          description: State in which the log was recorded.
          example: Arizona
          type: string
        logStartMs:
          description: The time at which the log/HOS status started in UNIX milliseconds.
          example: 1462881998034
          format: int64
          type: integer
        remark:
          description: Remark associated with the log entry.
          example: Lunch Break
          type: string
        vehicleId:
          description: ID of the vehicle.
          example: 112
          format: int64
          type: integer
    V1HosLogsSummaryResponse_drivers:
      example:
        vehicleName: Vehicle 1
        pendingDriveMsToday: 2.52E+8
        currentDutyStatusCode: OFF_DUTY
        timeInCurrentStatus: 5000
        onDutyMsToday: 2.52E+8
        timeUntilBreak: 28800000
        pendingOnDutyMsToday: 2.52E+8
        drivingInViolationToday: 39600000
        driverId: 444
        cycleRemaining: 252000000
        driverName: Fred Jacobs
        cycleTomorrow: 252000000
        shiftDriveRemaining: 39600000
        drivingInViolationCycle: 50400000
        shiftRemaining: 50400000
        driveMsToday: 2.52E+8
      properties:
        currentDutyStatusCode:
          description: The Hours of Service status type.
          enum:
          - AUTO_DUTY
          - DRIVING
          - OFF_DUTY
          - ON_DUTY
          - PERSONAL_CONVEYANCE
          - SLEEPER_BED
          - YARD_MOVE
          - WAITING_TIME
          example: OFF_DUTY
          type: string
        cycleRemaining:
          description: The amount of remaining cycle time (in ms).
          example: 252000000
          format: int64
          type: integer
        cycleTomorrow:
          description: The amount of cycle time (in ms) available tomorrow.
          example: 252000000
          format: int64
          type: integer
        driveMsToday:
          description: The amount of driving time today (in ms).
          example: 2.52E+8
          format: int64
          type: number
        driverId:
          description: ID of the driver.
          example: 444
          format: int64
          type: integer
        driverName:
          description: Name of the driver.
          example: Fred Jacobs
          type: string
        drivingInViolationCycle:
          description: The amount of driving time in violation in this cycle (in ms).
          example: 50400000
          format: int64
          type: integer
        drivingInViolationToday:
          description: The amount of driving time in violation today (in ms).
          example: 39600000
          format: int64
          type: integer
        onDutyMsToday:
          description: The amount of on duty time today (in ms).
          example: 2.52E+8
          format: int64
          type: number
        pendingDriveMsToday:
          description: The amount of driving time today for pending logs (in ms).
          example: 2.52E+8
          format: int64
          type: number
        pendingOnDutyMsToday:
          description: The amount of on duty time today for pending logs (in ms).
          example: 2.52E+8
          format: int64
          type: number
        shiftDriveRemaining:
          description: The amount of remaining shift drive time (in ms).
          example: 39600000
          format: int64
          type: integer
        shiftRemaining:
          description: The amount of remaining shift time (in ms).
          example: 50400000
          format: int64
          type: integer
        timeInCurrentStatus:
          description: The amount of time (in ms) that the driver has been in the
            current `dutyStatus`.
          example: 5000
          format: int64
          type: integer
        timeUntilBreak:
          description: The amount of time (in ms) remaining until the driver cannot
            drive without a rest break.
          example: 28800000
          format: int64
          type: integer
        vehicleName:
          description: Name of the vehicle.
          example: Vehicle 1
          type: string
    V1HosLogsSummaryResponse_pagination:
      example:
        hasNextPage: true
        endCursor: MTA1MDc5MB==
      properties:
        endCursor:
          description: Cursor identifier representing the last element in the response.
            This value should be used in conjunction with a subsequent request's 'after'
            query parameter.
          example: MTA1MDc5MB==
          type: string
        hasNextPage:
          description: True if there are more pages of results after this response.
          type: boolean
      required:
      - endCursor
      - hasNextPage
    V1HumidityResponse_sensors:
      example:
        name: Freezer Humidity V1Sensor
        humidity: 53
        id: 122
        vehicleId: 124
        trailerId: 123
        humidityTime: 2019-04-17T16:42:55Z
      properties:
        humidity:
          description: Currently reported relative humidity in percent, from 0-100.
          example: 53
          type: integer
        humidityTime:
          description: The timestamp of reported relative humidity, specified in RFC
            3339 time.
          example: 2019-04-17T16:42:55Z
          type: string
        id:
          description: ID of the sensor.
          example: 122
          format: int64
          type: integer
        name:
          description: Name of the sensor.
          example: Freezer Humidity V1Sensor
          type: string
        trailerId:
          description: ID of the trailer associated with the sensor for the data point.
            If no trailer is connected, this parameter will not be reported.
          example: 123
          type: integer
        vehicleId:
          description: ID of the vehicle associated with the sensor for the data point.
            If no vehicle is connected, this parameter will not be reported.
          example: 124
          type: integer
    V1MachineHistoryResponse_vibrations:
      example:
        X: 0.01
        Y: 1.23
        Z: 2.55
        time: 1453449599999
      properties:
        X:
          example: 0.01
          format: double
          type: number
        Y:
          example: 1.23
          format: double
          type: number
        Z:
          example: 2.55
          format: double
          type: number
        time:
          example: 1453449599999
          format: int64
          type: integer
    V1MachineHistoryResponse_machines:
      example:
        name: 1/3 HP Motor
        id: 1
        vibrations:
        - X: 0.01
          Y: 1.23
          Z: 2.55
          time: 1453449599999
        - X: 0.01
          Y: 1.23
          Z: 2.55
          time: 1453449599999
      properties:
        id:
          description: Machine ID
          example: 1
          type: integer
        name:
          description: Machine name
          example: 1/3 HP Motor
          type: string
        vibrations:
          description: List of vibration datapoints, with timestamp and vibration
            measurement for x/y/z axis in mm/s
          items:
            $ref: '#/components/schemas/V1MachineHistoryResponse_vibrations'
          type: array
    V1SensorHistoryResponse_results:
      example:
        series:
        - 1
        - 1
        timeMs: 1453449599999
      properties:
        series:
          description: List of datapoints, one for each requested (sensor, field)
            pair.
          items:
            example: 1
            format: int64
            type: integer
          type: array
        timeMs:
          description: Timestamp in UNIX milliseconds.
          example: 1453449599999
          type: integer
    V1TemperatureResponse_sensors:
      example:
        probeTemperatureTime: 2019-04-17T16:42:55Z
        probeTemperature: -20145
        name: Freezer Temp V1Sensor
        id: 122
        vehicleId: 124
        ambientTemperatureTime: 2019-04-17T16:42:55Z
        trailerId: 123
        ambientTemperature: 11057
      properties:
        ambientTemperature:
          description: Currently reported ambient temperature in millidegrees celsius.
          example: 11057
          type: integer
        ambientTemperatureTime:
          description: The timestamp of reported ambient temperature, specified in
            RFC 3339 time.
          example: 2019-04-17T16:42:55Z
          type: string
        id:
          description: ID of the sensor.
          example: 122
          format: int64
          type: integer
        name:
          description: Name of the sensor.
          example: Freezer Temp V1Sensor
          type: string
        probeTemperature:
          description: Currently reported probe temperature in millidegrees celsius.
            If no probe is connected, this parameter will not be reported.
          example: -20145
          type: integer
        probeTemperatureTime:
          description: The timestamp of reported probe temperature, specified in RFC
            3339 time.
          example: 2019-04-17T16:42:55Z
          type: string
        trailerId:
          description: ID of the trailer associated with the sensor for the data point.
            If no trailer is connected, this parameter will not be reported.
          example: 123
          type: integer
        vehicleId:
          description: ID of the vehicle associated with the sensor for the data point.
            If no vehicle is connected, this parameter will not be reported.
          example: 124
          type: integer
    V1TrailerAssignmentsResponse_allOf:
      properties:
        trailerAssignments:
          items:
            $ref: '#/components/schemas/V1TrailerAssignmentResponse'
          type: array
    V1TripResponse_endAddress:
      description: Text representation of nearest identifiable location to the end
        (latitude, longitude) coordinates.
      example:
        address: 123 Main St, Sunnyvale, CA 94089
        name: Ramen Tatsunoya
        id: 581.0
      properties:
        address:
          description: The formatted address
          example: 123 Main St, Sunnyvale, CA 94089
          type: string
        id:
          description: The ID of the address
          example: 581.0
          format: int64
          type: number
        name:
          description: The name of the address
          example: Ramen Tatsunoya
          type: string
    V1TripResponse_endCoordinates:
      description: End (latitude, longitude) in decimal degrees.
      example:
        latitude: 23.413702345
        longitude: -91.502888123
      properties:
        latitude:
          example: 23.413702345
          format: double
          type: number
        longitude:
          example: -91.502888123
          format: double
          type: number
    V1TripResponse_startAddress:
      description: Text representation of nearest identifiable location to the start
        (latitude, longitude) coordinates.
      example:
        address: 123 Main St, Sunnyvale, CA 94089
        name: Ramen Tatsunoya
        id: 581.0
      properties:
        address:
          description: The formatted address
          example: 123 Main St, Sunnyvale, CA 94089
          type: string
        id:
          description: The ID of the address
          example: 581.0
          format: int64
          type: number
        name:
          description: The name of the address
          example: Ramen Tatsunoya
          type: string
    V1TripResponse_startCoordinates:
      description: Start (latitude, longitude) in decimal degrees.
      example:
        latitude: 29.443702345
        longitude: -98.502888123
      properties:
        latitude:
          example: 29.443702345
          format: double
          type: number
        longitude:
          example: -98.502888123
          format: double
          type: number
    V1TripResponse_trips:
      example:
        endOdometer: 210430500
        distanceMeters: 2500
        endMs: 1462881998034
        startMs: 1462878398034
        fuelConsumedMl: 75700
        startAddress:
          address: 123 Main St, Sunnyvale, CA 94089
          name: Ramen Tatsunoya
          id: 581.0
        assetIds:
        - 122
        startCoordinates:
          latitude: 29.443702345
          longitude: -98.502888123
        endCoordinates:
          latitude: 23.413702345
          longitude: -91.502888123
        startOdometer: 210430450
        driverId: 719
        startLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
        tollMeters: 32000
        codriverIds:
        - 122
        endAddress:
          address: 123 Main St, Sunnyvale, CA 94089
          name: Ramen Tatsunoya
          id: 581.0
        endLocation: 571 S Lake Ave, Pasadena, CA 91101
      properties:
        assetIds:
          description: List of associated asset IDs
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
        codriverIds:
          description: List of codriver IDs
          example:
          - 122
          items:
            format: int64
            type: integer
          type: array
        distanceMeters:
          description: Length of the trip in meters. This value is calculated from
            the GPS data collected by the Samsara Vehicle Gateway.
          example: 2500
          type: integer
        driverId:
          description: ID of the driver.
          example: 719
          type: integer
        endAddress:
          $ref: '#/components/schemas/V1TripResponse_endAddress'
        endCoordinates:
          $ref: '#/components/schemas/V1TripResponse_endCoordinates'
        endLocation:
          description: Geocoded street address of start (latitude, longitude) coordinates.
          example: 571 S Lake Ave, Pasadena, CA 91101
          type: string
        endMs:
          description: End of the trip in UNIX milliseconds. Ongoing trips are indicated
            by an endMs value of 9223372036854775807.
          example: 1462881998034
          type: integer
        endOdometer:
          description: Odometer reading (in meters) at the end of the trip. This is
            read from the vehicle's on-board diagnostics. If Samsara cannot read the
            vehicle's odometer values from on-board diagnostics, this value will be
            0.
          example: 210430500
          type: integer
        fuelConsumedMl:
          description: Amount in milliliters of fuel consumed on this trip.
          example: 75700
          type: integer
        startAddress:
          $ref: '#/components/schemas/V1TripResponse_startAddress'
        startCoordinates:
          $ref: '#/components/schemas/V1TripResponse_startCoordinates'
        startLocation:
          description: Geocoded street address of start (latitude, longitude) coordinates.
          example: 16 N Fair Oaks Ave, Pasadena, CA 91103
          type: string
        startMs:
          description: Beginning of the trip in UNIX milliseconds.
          example: 1462878398034
          type: integer
        startOdometer:
          description: Odometer reading (in meters) at the beginning of the trip.
            This is read from the vehicle's on-board diagnostics. If Samsara cannot
            read the vehicle's odometer values from on-board diagnostics, this value
            will be 0.
          example: 210430450
          type: integer
        tollMeters:
          description: Length in meters trip spent on toll roads.
          example: 32000
          type: integer
    V1VehicleHarshEventResponse_location:
      example:
        address: 350 Rhode Island St, San Francisco, CA
        latitude: 33.07614328
        longitude: -96.14907287
      properties:
        address:
          description: Address of location where the harsh event occurred
          example: 350 Rhode Island St, San Francisco, CA
          type: string
        latitude:
          description: Latitude of location where the harsh event occurred
          example: 33.07614328
          type: number
        longitude:
          description: Longitude of location where the harsh event occurred
          example: -96.14907287
          type: number
    V1VehicleMaintenance_j1939_checkEngineLight:
      description: J1939 check engine lights.
      example:
        protectIsOn: true
        stopIsOn: true
        warningIsOn: true
        emissionsIsOn: true
      properties:
        emissionsIsOn:
          type: boolean
        protectIsOn:
          type: boolean
        stopIsOn:
          type: boolean
        warningIsOn:
          type: boolean
    V1VehicleMaintenance_j1939_diagnosticTroubleCodes:
      example:
        spnDescription: spnDescription
        fmiText: fmiText
        spnId: 1
        occurrenceCount: 6
        txId: 5
        fmiId: 0
      properties:
        fmiId:
          type: integer
        fmiText:
          type: string
        occurrenceCount:
          type: integer
        spnDescription:
          type: string
        spnId:
          type: integer
        txId:
          type: integer
      required:
      - fmiId
      - fmiText
      - occurrenceCount
      - spnDescription
      - spnId
      - txId
    V1VehicleMaintenance_j1939:
      description: J1939 based data. Null if no data is available.
      example:
        checkEngineLight:
          protectIsOn: true
          stopIsOn: true
          warningIsOn: true
          emissionsIsOn: true
        diagnosticTroubleCodes:
        - spnDescription: spnDescription
          fmiText: fmiText
          spnId: 1
          occurrenceCount: 6
          txId: 5
          fmiId: 0
        - spnDescription: spnDescription
          fmiText: fmiText
          spnId: 1
          occurrenceCount: 6
          txId: 5
          fmiId: 0
      properties:
        checkEngineLight:
          $ref: '#/components/schemas/V1VehicleMaintenance_j1939_checkEngineLight'
        diagnosticTroubleCodes:
          description: J1939 DTCs.
          items:
            $ref: '#/components/schemas/V1VehicleMaintenance_j1939_diagnosticTroubleCodes'
          type: array
    V1VehicleMaintenance_passenger_checkEngineLight:
      description: Passenger vehicle check engine light.
      example:
        isOn: true
      properties:
        isOn:
          type: boolean
    V1VehicleMaintenance_passenger_diagnosticTroubleCodes:
      example:
        dtcShortCode: dtcShortCode
        dtcId: 5
        dtcDescription: dtcDescription
      properties:
        dtcDescription:
          type: string
        dtcId:
          type: integer
        dtcShortCode:
          type: string
      required:
      - dtcDescription
      - dtcId
      - dtcShortCode
    V1VehicleMaintenance_passenger:
      description: Passenger vehicle data. Null if no data is available.
      example:
        checkEngineLight:
          isOn: true
        diagnosticTroubleCodes:
        - dtcShortCode: dtcShortCode
          dtcId: 5
          dtcDescription: dtcDescription
        - dtcShortCode: dtcShortCode
          dtcId: 5
          dtcDescription: dtcDescription
      properties:
        checkEngineLight:
          $ref: '#/components/schemas/V1VehicleMaintenance_passenger_checkEngineLight'
        diagnosticTroubleCodes:
          description: Passenger vehicle DTCs.
          items:
            $ref: '#/components/schemas/V1VehicleMaintenance_passenger_diagnosticTroubleCodes'
          type: array
    V1VisionRunByCameraResponse_inspectionResults:
      example:
        result: PASS
        stepResults:
        - '{}'
        - '{}'
        captureAtMs: 1.55381199473E+12
      properties:
        captureAtMs:
          example: 1.55381199473E+12
          format: float64
          type: number
        result:
          example: PASS
          type: string
        stepResults:
          items:
            properties:
              angleCheck:
                properties:
                  angleConfigured:
                    description: The configured angle allowance range (in degrees)
                    properties:
                      high:
                        example: 150
                        format: int64
                        type: integer
                      low:
                        example: 90
                        format: int64
                        type: integer
                    type: object
                  angleFound:
                    description: The counter-clockwise angle detected from the first
                      edge to the second edge
                    example: 60
                    format: int64
                    type: integer
                  endStepName:
                    description: The name of the second reference step used to check
                      the angle
                    example: Edge 2
                    type: string
                  startStepName:
                    description: The name of the first reference step used to check
                      the angle
                    example: Edge 1
                    type: string
                type: object
              barcode:
                items:
                  properties:
                    contents:
                      example: "10855639004823"
                      type: string
                    matchString:
                      example: "10855639004823"
                      type: string
                    type:
                      example: EAN8
                      type: string
                  type: object
                type: array
              booleanLogic:
                properties:
                  operator:
                    example: AND
                    type: string
                  steps:
                    items:
                      properties:
                        name:
                          example: Expiration Date
                          type: string
                        result:
                          example: PASS
                          type: string
                      type: object
                    type: array
                type: object
              caliper:
                properties:
                  angleRange:
                    description: The configured angle allowance range
                    properties:
                      high:
                        example: 360
                        format: int32
                        type: integer
                      low:
                        example: 0
                        format: int32
                        type: integer
                    type: object
                  contrastRange:
                    description: The configured contrast allowance range
                    properties:
                      high:
                        example: 100
                        format: int64
                        type: integer
                      low:
                        example: 50
                        format: int64
                        type: integer
                    type: object
                  distanceFound:
                    description: The distance found between the found edges
                    example: 555.55
                    format: float
                    type: number
                  filterPolarity:
                    default: LIGHT TO DARK
                    description: The configured polarity for finding edges
                    enum:
                    - LIGHT TO DARK
                    - DARK TO LIGHT
                    example: LIGHT TO DARK
                    type: string
                  maxDistance:
                    description: The maximum allowed distance threshold
                    example: 1000.0
                    format: float
                    type: number
                  minDistance:
                    description: The minumum allowed distance threshold
                    example: 500.0
                    format: float
                    type: number
                  sharpnessRange:
                    description: The configured sharpness allowance range
                    properties:
                      high:
                        example: 100
                        format: int64
                        type: integer
                      low:
                        example: 80
                        format: int64
                        type: integer
                    type: object
                  straightnessRange:
                    description: The configured straightness allowance range
                    properties:
                      high:
                        example: 100
                        format: int32
                        type: integer
                      low:
                        example: 80
                        format: int32
                        type: integer
                    type: object
                  unit:
                    description: The measurement unit of the distance found and the
                      min and max distance threshold
                    example: Millimeters
                    type: string
                type: object
              contour:
                properties:
                  angleDegrees:
                    description: The rotation angle found
                    example: 0
                    format: int64
                    type: integer
                  angleTolerance:
                    description: The rotation angle allowance
                    example: 50
                    format: int64
                    type: integer
                  matchPercentage:
                    description: The contour match percentage with the configured
                      contour
                    example: 46
                    format: int64
                    type: integer
                  matchThreshold:
                    description: The configured match threshold for contours
                    example: 18
                    format: int64
                    type: integer
                type: object
              distance:
                properties:
                  distanceFound:
                    description: The distance found between the start and end references
                    format: float64
                    type: integer
                  endStepName:
                    description: The name of the second reference step that we're
                      checking the distances between
                    example: Bottom Right Square
                    type: string
                  enforceOffsetAngleRange:
                    description: Whether an offset angle range is enforced
                    example: true
                    type: boolean
                  maxDistance:
                    description: The maximum allowed distance threshold
                    example: 900
                    format: float64
                    type: integer
                  maxOffsetAngle:
                    description: The maximum angle allowance (in degrees) if enforceOffsetAngleRange
                      is true
                    example: 90
                    format: int64
                    type: integer
                  minDistance:
                    description: The minumum allowed distance threshold
                    example: 1500
                    format: float64
                    type: integer
                  minOffsetAngle:
                    description: The minimum angle allowance (in degrees) if enforceOffsetAngleRange
                      is true
                    example: 45
                    format: int64
                    type: integer
                  offsetAngleFound:
                    description: The counter-clockwise angle (in degrees) found between
                      the horizontal axis of the start reference step and the last
                    example: 50
                    format: int64
                    type: integer
                  startStepName:
                    description: The name of the first reference step that we're checking
                      the distances between
                    example: Top Left Square
                    type: string
                  unit:
                    description: The measurement unit of the distance found and the
                      min and max distance threshold
                    example: Millimeters
                    type: string
                type: object
              expirationDate:
                properties:
                  dateOffset:
                    example: 1
                    format: int64
                    type: integer
                  foundDate:
                    example: 06/13/2019
                    type: string
                  matchDate:
                    example: 06/13/2019
                    type: string
                type: object
              findCopies:
                properties:
                  angleTolerance:
                    description: The orientation angle tolerance (+/- °)
                    example: 10
                    format: int64
                    type: integer
                  foundCount:
                    description: The number of copies found
                    example: 1
                    format: int64
                    type: integer
                  maxCount:
                    description: The maximum number of copies allowed
                    example: 5
                    format: int64
                    type: integer
                  minCount:
                    description: The minimum number of copies allowed
                    example: 1
                    format: int64
                    type: integer
                  threshold:
                    description: The minimum required similarity (in %) of a found
                      copy compared to the configured match region
                    example: 70
                    format: int64
                    type: integer
                type: object
              findEdge:
                properties:
                  angleFound:
                    description: The detected angle in degrees
                    example: 90
                    format: float64
                    type: integer
                  angleRange:
                    description: The configured angle allowance range
                    properties:
                      high:
                        example: 360
                        format: int32
                        type: integer
                      low:
                        example: 0
                        format: int32
                        type: integer
                    type: object
                  contrastPercent:
                    description: The detected contrast percentage
                    format: float64
                    type: integer
                  contrastRange:
                    description: The configured contrast allowance range
                    properties:
                      high:
                        example: 100
                        format: int64
                        type: integer
                      low:
                        example: 50
                        format: int64
                        type: integer
                    type: object
                  filterPolarity:
                    description: The configured polarity for finding edges
                    example: ANY
                    type: string
                  sharpnessPercent:
                    description: The detected sharpness percentage
                    example: 95
                    format: float64
                    type: integer
                  sharpnessRange:
                    description: The configured sharpness allowance range
                    properties:
                      high:
                        example: 100
                        format: int64
                        type: integer
                      low:
                        example: 80
                        format: int64
                        type: integer
                    type: object
                  straightnessFound:
                    description: The detected straightness percentage
                    example: 95
                    format: float64
                    type: integer
                  straightnessRange:
                    description: The configured straightness allowance range
                    properties:
                      high:
                        example: 100
                        format: int32
                        type: integer
                      low:
                        example: 80
                        format: int32
                        type: integer
                    type: object
                type: object
              findShapes:
                properties:
                  foundCount:
                    example: 1
                    format: int32
                    type: integer
                  maxCount:
                    example: 5
                    format: int32
                    type: integer
                  minCount:
                    example: 1
                    format: int32
                    type: integer
                type: object
              fixture:
                properties:
                  coordinates:
                    properties:
                      x:
                        example: 10
                        format: int32
                        type: integer
                      y:
                        example: 10
                        format: int32
                        type: integer
                    type: object
                  found:
                    example: true
                    type: boolean
                  rotationDegrees:
                    example: 90
                    format: int64
                    type: integer
                type: object
              labelMatch:
                properties:
                  score:
                    example: 10
                    format: int64
                    type: integer
                  threshold:
                    example: 10
                    format: int64
                    type: integer
                type: object
              name:
                example: Chicken Caesar Label
                type: string
              presenceAbsence:
                properties:
                  blueRange:
                    properties:
                      high:
                        example: 150
                        format: int64
                        type: integer
                      low:
                        example: 90
                        format: int64
                        type: integer
                    type: object
                  checkForAbsence:
                    example: true
                    type: boolean
                  grayscaleRange:
                    properties:
                      high:
                        example: 100
                        format: int64
                        type: integer
                      low:
                        example: 20
                        format: int64
                        type: integer
                    type: object
                  greenRange:
                    properties:
                      high:
                        example: 150
                        format: int64
                        type: integer
                      low:
                        example: 90
                        format: int64
                        type: integer
                    type: object
                  hueRange:
                    properties:
                      high:
                        example: 100
                        format: int64
                        type: integer
                      low:
                        example: 20
                        format: int64
                        type: integer
                    type: object
                  redRange:
                    properties:
                      high:
                        example: 150
                        format: int64
                        type: integer
                      low:
                        example: 90
                        format: int64
                        type: integer
                    type: object
                  saturationRange:
                    properties:
                      high:
                        example: 50
                        format: int64
                        type: integer
                      low:
                        example: 10
                        format: int64
                        type: integer
                    type: object
                  score:
                    example: 50
                    format: int64
                    type: integer
                  threshold:
                    example: 50
                    format: int64
                    type: integer
                  valueRange:
                    properties:
                      high:
                        example: 50
                        format: int64
                        type: integer
                      low:
                        example: 10
                        format: int64
                        type: integer
                    type: object
                type: object
              result:
                example: PASS
                type: string
              textMatch:
                properties:
                  foundText:
                    example: ABCD
                    type: string
                  matchString:
                    example: ABCD
                    type: string
                type: object
            type: object
          type: array
    V1VisionRunByCameraResponse_program:
      example:
        name: Barcode verification program
        id: 1
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: Barcode verification program
          type: string
    V1VisionRunByCameraResponse_runSummary:
      example:
        successCount: 181
        itemsPerMinute: 0.1
        noReadCount: 0
        rejectCount: 0
      properties:
        itemsPerMinute:
          example: 0.1
          format: float64
          type: number
        noReadCount:
          example: 0
          format: int64
          type: integer
        rejectCount:
          example: 0
          format: int64
          type: integer
        successCount:
          example: 181
          format: int64
          type: integer
    V1VisionRunsResponse_reportMetadata:
      description: The response includes 4 additional fields that are now deprecated
      example:
        successCount: 181
        itemsPerMinute: 0.1
        noReadCount: 181
        rejectCount: 0
      properties:
        itemsPerMinute:
          description: Returns average scanned items per minute. Should be used instead
            of scanRate.
          example: 0.1
          format: float64
          type: number
        noReadCount:
          description: Returns no read count for the run. Should be used instead of
            noReadScansCount
          example: 181
          format: int64
          type: integer
        rejectCount:
          description: Returns reject count for the run. Should be used instead of
            failedScansCount
          example: 0
          format: int64
          type: integer
        successCount:
          description: Returns success count for the run. Should be used instead of
            successfulScansCount
          example: 181
          format: int64
          type: integer
    V1VisionRunsResponse_visionRuns:
      example:
        reportMetadata:
          successCount: 181
          itemsPerMinute: 0.1
          noReadCount: 181
          rejectCount: 0
        endedAtMs: 0
        deviceId: 1234512345123
        programId: 1
        startedAtMs: 1553808606097
      properties:
        deviceId:
          example: 1234512345123
          format: int64
          type: integer
        endedAtMs:
          example: 0
          format: int64
          type: integer
        programId:
          example: 1
          format: int64
          type: integer
        reportMetadata:
          $ref: '#/components/schemas/V1VisionRunsResponse_reportMetadata'
        startedAtMs:
          example: 1553808606097
          format: int64
          type: integer
    VehicleLocationsListResponse_data:
      description: A vehicle and its list of location events.
      example:
        name: Truck A7
        locations:
        - heading: 120
          latitude: 122.142
          time: 2020-01-27T07:06:25Z
          speed: 48.3
          longitude: -93.343
          reverseGeo:
            formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
        - heading: 120
          latitude: 122.142
          time: 2020-01-27T07:06:25Z
          speed: 48.3
          longitude: -93.343
          reverseGeo:
            formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
        id: "112"
      properties:
        id:
          description: The unique Samsara ID of the Vehicle. This is automatically
            generated when the Vehicle object is created. It cannot be changed.
          example: "112"
          type: string
        locations:
          description: A list of location events for the given vehicle.
          items:
            $ref: '#/components/schemas/VehicleLocation'
          type: array
        name:
          description: The human-readable name of the Vehicle. This is set by a fleet
            administrator and will appear in both Samsara’s cloud dashboard as well
            as the Samsara Driver mobile app. **By default**, this name is the serial
            number of the Samsara Vehicle Gateway. It can be set or updated through
            the Samsara Dashboard or through the API at any time.
          example: Truck A7
          type: string
      required:
      - id
      - locations
      - name
    VehicleLocationsResponse_data:
      description: A vehicle and its most recent location.
      example:
        name: Truck A7
        location:
          heading: 120
          latitude: 122.142
          time: 2020-01-27T07:06:25Z
          speed: 48.3
          longitude: -93.343
          reverseGeo:
            formattedLocation: 16 N Fair Oaks Ave, Pasadena, CA 91103
        id: "112"
      properties:
        id:
          description: The unique Samsara ID of the Vehicle. This is automatically
            generated when the Vehicle object is created. It cannot be changed.
          example: "112"
          type: string
        location:
          $ref: '#/components/schemas/VehicleLocation'
        name:
          description: The human-readable name of the Vehicle. This is set by a fleet
            administrator and will appear in both Samsara’s cloud dashboard as well
            as the Samsara Driver mobile app. **By default**, this name is the serial
            number of the Samsara Vehicle Gateway. It can be set or updated through
            the Samsara Dashboard or through the API at any time.
          example: Truck A7
          type: string
      required:
      - id
      - location
      - name
    VehicleStatsListResponse_data:
      description: A vehicle and its list of stat events.
      example:
        fuelPercent:
        - time: 2020-01-27T07:06:25Z
          value: 54
        - time: 2020-01-27T07:06:25Z
          value: 54
        obdEngineSeconds:
        - time: 2020-01-27T07:06:25Z
          value: 9723103
        - time: 2020-01-27T07:06:25Z
          value: 9723103
        ctpSmogTestData:
        - dlcPinVoltageMilliVoltsValid: true
          testDateTime: 2020-01-27T07:06:25Z
          linkId: 0
          remoteObdTestRecords:
          - o2Sensor: U
            pidCountValid: true
            minutesSinceCodesCleared: 3
            notReadyCount: 3
            fuel: U
            obdVinValid: true
            warmupsSinceCodesCleared: 3
            distanceTraveledSinceCodesClearedValid: true
            distanceTraveledWithMilOnValid: true
            permanentDtcs: P0151|P0300|P0301
            minutesSinceCodesClearedValid: true
            pcmId: 7E8
            milValid: true
            minutesSinceMilValid: true
            egr: U
            isoSaeReserved: U
            mil: "Y"
            calCvn: AaPl1io=
            obdVin: 1HGBH41JXMN109186
            permanentDtcsValid: true
            distanceTraveledSinceCodesCleared: 3
            compressionIgnitionMonitorSupported: "Y"
            calCvnValid: true
            compressionIgnitionMonitorSupportedValid: true
            dtcCount: 3
            pendingDtcs: P0151|P0300|P0301
            rpmValid: true
            heatedO2Sensor: U
            warmupsSinceCodesClearedValid: true
            calId: AVRCSUUzRDcuSEVYAAAAAAA=
            emissionRelatedDtcs: P0151|P0300|P0301
            rpm: 3
            heatedCatalyst: U
            permanentDtcCount: 3
            catalyst: U
            minutesSinceMil: 3
            misfire: U
            pendingDtcsValid: true
            obdMonitorStatusValid: true
            emissionRelatedDtcsValid: true
            pendingDtcCount: 3
            secondaryAir: U
            calIdValid: true
            distanceTraveledWithMilOn: 3
            comprehensive: U
            evapSystem: U
            pidCount: 3
          - o2Sensor: U
            pidCountValid: true
            minutesSinceCodesCleared: 3
            notReadyCount: 3
            fuel: U
            obdVinValid: true
            warmupsSinceCodesCleared: 3
            distanceTraveledSinceCodesClearedValid: true
            distanceTraveledWithMilOnValid: true
            permanentDtcs: P0151|P0300|P0301
            minutesSinceCodesClearedValid: true
            pcmId: 7E8
            milValid: true
            minutesSinceMilValid: true
            egr: U
            isoSaeReserved: U
            mil: "Y"
            calCvn: AaPl1io=
            obdVin: 1HGBH41JXMN109186
            permanentDtcsValid: true
            distanceTraveledSinceCodesCleared: 3
            compressionIgnitionMonitorSupported: "Y"
            calCvnValid: true
            compressionIgnitionMonitorSupportedValid: true
            dtcCount: 3
            pendingDtcs: P0151|P0300|P0301
            rpmValid: true
            heatedO2Sensor: U
            warmupsSinceCodesClearedValid: true
            calId: AVRCSUUzRDcuSEVYAAAAAAA=
            emissionRelatedDtcs: P0151|P0300|P0301
            rpm: 3
            heatedCatalyst: U
            permanentDtcCount: 3
            catalyst: U
            minutesSinceMil: 3
            misfire: U
            pendingDtcsValid: true
            obdMonitorStatusValid: true
            emissionRelatedDtcsValid: true
            pendingDtcCount: 3
            secondaryAir: U
            calIdValid: true
            distanceTraveledWithMilOn: 3
            comprehensive: U
            evapSystem: U
            pidCount: 3
          deviceFirmware: CTPv1
          commProtocol: V
          dlcPinVoltageMilliVolts: 12000
        - dlcPinVoltageMilliVoltsValid: true
          testDateTime: 2020-01-27T07:06:25Z
          linkId: 0
          remoteObdTestRecords:
          - o2Sensor: U
            pidCountValid: true
            minutesSinceCodesCleared: 3
            notReadyCount: 3
            fuel: U
            obdVinValid: true
            warmupsSinceCodesCleared: 3
            distanceTraveledSinceCodesClearedValid: true
            distanceTraveledWithMilOnValid: true
            permanentDtcs: P0151|P0300|P0301
            minutesSinceCodesClearedValid: true
            pcmId: 7E8
            milValid: true
            minutesSinceMilValid: true
            egr: U
            isoSaeReserved: U
            mil: "Y"
            calCvn: AaPl1io=
            obdVin: 1HGBH41JXMN109186
            permanentDtcsValid: true
            distanceTraveledSinceCodesCleared: 3
            compressionIgnitionMonitorSupported: "Y"
            calCvnValid: true
            compressionIgnitionMonitorSupportedValid: true
            dtcCount: 3
            pendingDtcs: P0151|P0300|P0301
            rpmValid: true
            heatedO2Sensor: U
            warmupsSinceCodesClearedValid: true
            calId: AVRCSUUzRDcuSEVYAAAAAAA=
            emissionRelatedDtcs: P0151|P0300|P0301
            rpm: 3
            heatedCatalyst: U
            permanentDtcCount: 3
            catalyst: U
            minutesSinceMil: 3
            misfire: U
            pendingDtcsValid: true
            obdMonitorStatusValid: true
            emissionRelatedDtcsValid: true
            pendingDtcCount: 3
            secondaryAir: U
            calIdValid: true
            distanceTraveledWithMilOn: 3
            comprehensive: U
            evapSystem: U
            pidCount: 3
          - o2Sensor: U
            pidCountValid: true
            minutesSinceCodesCleared: 3
            notReadyCount: 3
            fuel: U
            obdVinValid: true
            warmupsSinceCodesCleared: 3
            distanceTraveledSinceCodesClearedValid: true
            distanceTraveledWithMilOnValid: true
            permanentDtcs: P0151|P0300|P0301
            minutesSinceCodesClearedValid: true
            pcmId: 7E8
            milValid: true
            minutesSinceMilValid: true
            egr: U
            isoSaeReserved: U
            mil: "Y"
            calCvn: AaPl1io=
            obdVin: 1HGBH41JXMN109186
            permanentDtcsValid: true
            distanceTraveledSinceCodesCleared: 3
            compressionIgnitionMonitorSupported: "Y"
            calCvnValid: true
            compressionIgnitionMonitorSupportedValid: true
            dtcCount: 3
            pendingDtcs: P0151|P0300|P0301
            rpmValid: true
            heatedO2Sensor: U
            warmupsSinceCodesClearedValid: true
            calId: AVRCSUUzRDcuSEVYAAAAAAA=
            emissionRelatedDtcs: P0151|P0300|P0301
            rpm: 3
            heatedCatalyst: U
            permanentDtcCount: 3
            catalyst: U
            minutesSinceMil: 3
            misfire: U
            pendingDtcsValid: true
            obdMonitorStatusValid: true
            emissionRelatedDtcsValid: true
            pendingDtcCount: 3
            secondaryAir: U
            calIdValid: true
            distanceTraveledWithMilOn: 3
            comprehensive: U
            evapSystem: U
            pidCount: 3
          deviceFirmware: CTPv1
          commProtocol: V
          dlcPinVoltageMilliVolts: 12000
        engineStates:
        - time: 2020-01-27T07:06:25Z
          value: "On"
        - time: 2020-01-27T07:06:25Z
          value: "On"
        gpsDistanceMeters:
        - time: 2020-01-27T07:06:25Z
          value: 81029.591434899
        - time: 2020-01-27T07:06:25Z
          value: 81029.591434899
        gpsOdometerMeters:
        - time: 2020-01-27T07:06:25Z
          value: 14010293
        - time: 2020-01-27T07:06:25Z
          value: 14010293
        obdOdometerMeters:
        - time: 2020-01-27T07:06:25Z
          value: 14010293
        - time: 2020-01-27T07:06:25Z
          value: 14010293
        name: Truck A7
        id: "112"
      properties:
        ctpSmogTestData:
          description: Required data for one CTP smog test.
          items:
            $ref: '#/components/schemas/VehicleStatsCtpSmogTestData'
          type: array
        engineStates:
          description: A list of engine state events for the given vehicle.
          items:
            $ref: '#/components/schemas/VehicleStatsEngineState'
          type: array
        fuelPercent:
          description: A list of fuel percentage readings for the given vehicle.
          items:
            $ref: '#/components/schemas/VehicleStatsFuelPercent'
          type: array
        gpsDistanceMeters:
          description: A list of GPS distance events for the given vehicle.
          items:
            $ref: '#/components/schemas/VehicleStatsGpsDistanceMeters'
          type: array
        gpsOdometerMeters:
          description: A list of GPS odometer events for the given vehicle.
          items:
            $ref: '#/components/schemas/VehicleStatsGpsOdometerMeters'
          type: array
        id:
          description: The unique Samsara ID of the Vehicle. This is automatically
            generated when the Vehicle object is created. It cannot be changed.
          example: "112"
          type: string
        name:
          description: The human-readable name of the Vehicle. This is set by a fleet
            administrator and will appear in both Samsara’s cloud dashboard as well
            as the Samsara Driver mobile app. **By default**, this name is the serial
            number of the Samsara Vehicle Gateway. It can be set or updated through
            the Samsara Dashboard or through the API at any time.
          example: Truck A7
          type: string
        obdEngineSeconds:
          description: A list of OBD engine seconds readings for the given vehicle.
          items:
            $ref: '#/components/schemas/VehicleStatsObdEngineSeconds'
          type: array
        obdOdometerMeters:
          description: A list of OBD odometer readings for the given vehicle.
          items:
            $ref: '#/components/schemas/VehicleStatsObdOdometerMeters'
          type: array
      required:
      - id
      - name
    VehicleStatsResponse_data:
      description: A vehicle and its most recent stat.
      example:
        fuelPercent:
          time: 2020-01-27T07:06:25Z
          value: 54
        obdEngineSeconds:
          time: 2020-01-27T07:06:25Z
          value: 9723103
        engineState:
          time: 2020-01-27T07:06:25Z
          value: "On"
        gpsDistanceMeters:
          time: 2020-01-27T07:06:25Z
          value: 81029.591434899
        gpsOdometerMeters:
          time: 2020-01-27T07:06:25Z
          value: 14010293
        obdOdometerMeters:
          time: 2020-01-27T07:06:25Z
          value: 14010293
        name: Truck A7
        id: "112"
      properties:
        engineState:
          $ref: '#/components/schemas/VehicleStatsEngineState'
        fuelPercent:
          $ref: '#/components/schemas/VehicleStatsFuelPercent'
        gpsDistanceMeters:
          $ref: '#/components/schemas/VehicleStatsGpsDistanceMeters'
        gpsOdometerMeters:
          $ref: '#/components/schemas/VehicleStatsGpsOdometerMeters'
        id:
          description: The unique Samsara ID of the Vehicle. This is automatically
            generated when the Vehicle object is created. It cannot be changed.
          example: "112"
          type: string
        name:
          description: The human-readable name of the Vehicle. This is set by a fleet
            administrator and will appear in both Samsara’s cloud dashboard as well
            as the Samsara Driver mobile app. **By default**, this name is the serial
            number of the Samsara Vehicle Gateway. It can be set or updated through
            the Samsara Dashboard or through the API at any time.
          example: Truck A7
          type: string
        obdEngineSeconds:
          $ref: '#/components/schemas/VehicleStatsObdEngineSeconds'
        obdOdometerMeters:
          $ref: '#/components/schemas/VehicleStatsObdOdometerMeters'
      required:
      - id
      - name
    Webhook_allOf:
      properties:
        eventType:
          description: The eventType that will trigger this webhook.
          enum:
          - ping
          - alert
          example: alert
          type: string
        id:
          description: A unique identifier for the webhook.
          example: "81238238123"
          type: string
        name:
          description: The name of the webhook.
          example: Test Webhook
          type: string
        secret:
          description: The secret that this webhook is signed with.
          example: +iG5T4j+R74d5nHZKiJStRWMS2Y=
          type: string
        url:
          description: The URL of the webserver endpoint that the webhook payload
            should be sent to. Must be a https URL.
          example: https://www.mysite.com/webhooks
          type: string
      required:
      - eventType
      - id
      - name
      - secret
      - url
    WebhookCreate_allOf:
      properties:
        eventType:
          description: The eventType that will trigger this webhook.
          enum:
          - ping
          - alert
          example: alert
          type: string
        name:
          description: The name of the webhook.
          example: Test Webhook
          type: string
        url:
          description: The URL of the webserver endpoint that the webhook payload
            should be sent to. Must be a https URL.
          example: https://www.mysite.com/webhooks
          type: string
      required:
      - eventType
      - name
      - url
