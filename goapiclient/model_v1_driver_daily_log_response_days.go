/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1DriverDailyLogResponseDays struct for V1DriverDailyLogResponseDays
type V1DriverDailyLogResponseDays struct {
	// Hours spent on duty or driving, rounded to two decimal places.
	ActiveHours *float64 `json:"activeHours,omitempty"`
	// Milliseconds spent on duty or driving.
	ActiveMs *int64 `json:"activeMs,omitempty"`
	// Whether this HOS day chart was certified by the driver.
	Certified *bool `json:"certified,omitempty"`
	// Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.
	CertifiedAtMs *float32 `json:"certifiedAtMs,omitempty"`
	// Distance driven in miles, rounded to two decimal places.
	DistanceMiles *float64 `json:"distanceMiles,omitempty"`
	// End of the HOS day, specified in milliseconds UNIX time.
	EndMs *int32 `json:"endMs,omitempty"`
	// List of customer shipping document IDs associated with the driver for the day.
	ShippingDocIds *map[string]interface{} `json:"shippingDocIds,omitempty"`
	// End of the HOS day, specified in milliseconds UNIX time.
	StartMs *int32 `json:"startMs,omitempty"`
	// List of trailer ID's associated with the driver for the day.
	TrailerIds *map[string]interface{} `json:"trailerIds,omitempty"`
	// List of vehicle ID's associated with the driver for the day.
	VehicleIds *map[string]interface{} `json:"vehicleIds,omitempty"`
}

// GetActiveHours returns the ActiveHours field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetActiveHours() float64 {
	if o == nil || o.ActiveHours == nil {
		var ret float64
		return ret
	}
	return *o.ActiveHours
}

// GetActiveHoursOk returns a tuple with the ActiveHours field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetActiveHoursOk() (float64, bool) {
	if o == nil || o.ActiveHours == nil {
		var ret float64
		return ret, false
	}
	return *o.ActiveHours, true
}

// HasActiveHours returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasActiveHours() bool {
	if o != nil && o.ActiveHours != nil {
		return true
	}

	return false
}

// SetActiveHours gets a reference to the given float64 and assigns it to the ActiveHours field.
func (o *V1DriverDailyLogResponseDays) SetActiveHours(v float64) {
	o.ActiveHours = &v
}

// GetActiveMs returns the ActiveMs field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetActiveMs() int64 {
	if o == nil || o.ActiveMs == nil {
		var ret int64
		return ret
	}
	return *o.ActiveMs
}

// GetActiveMsOk returns a tuple with the ActiveMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetActiveMsOk() (int64, bool) {
	if o == nil || o.ActiveMs == nil {
		var ret int64
		return ret, false
	}
	return *o.ActiveMs, true
}

// HasActiveMs returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasActiveMs() bool {
	if o != nil && o.ActiveMs != nil {
		return true
	}

	return false
}

// SetActiveMs gets a reference to the given int64 and assigns it to the ActiveMs field.
func (o *V1DriverDailyLogResponseDays) SetActiveMs(v int64) {
	o.ActiveMs = &v
}

// GetCertified returns the Certified field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetCertified() bool {
	if o == nil || o.Certified == nil {
		var ret bool
		return ret
	}
	return *o.Certified
}

// GetCertifiedOk returns a tuple with the Certified field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetCertifiedOk() (bool, bool) {
	if o == nil || o.Certified == nil {
		var ret bool
		return ret, false
	}
	return *o.Certified, true
}

// HasCertified returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasCertified() bool {
	if o != nil && o.Certified != nil {
		return true
	}

	return false
}

// SetCertified gets a reference to the given bool and assigns it to the Certified field.
func (o *V1DriverDailyLogResponseDays) SetCertified(v bool) {
	o.Certified = &v
}

// GetCertifiedAtMs returns the CertifiedAtMs field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetCertifiedAtMs() float32 {
	if o == nil || o.CertifiedAtMs == nil {
		var ret float32
		return ret
	}
	return *o.CertifiedAtMs
}

// GetCertifiedAtMsOk returns a tuple with the CertifiedAtMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetCertifiedAtMsOk() (float32, bool) {
	if o == nil || o.CertifiedAtMs == nil {
		var ret float32
		return ret, false
	}
	return *o.CertifiedAtMs, true
}

// HasCertifiedAtMs returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasCertifiedAtMs() bool {
	if o != nil && o.CertifiedAtMs != nil {
		return true
	}

	return false
}

// SetCertifiedAtMs gets a reference to the given float32 and assigns it to the CertifiedAtMs field.
func (o *V1DriverDailyLogResponseDays) SetCertifiedAtMs(v float32) {
	o.CertifiedAtMs = &v
}

// GetDistanceMiles returns the DistanceMiles field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetDistanceMiles() float64 {
	if o == nil || o.DistanceMiles == nil {
		var ret float64
		return ret
	}
	return *o.DistanceMiles
}

// GetDistanceMilesOk returns a tuple with the DistanceMiles field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetDistanceMilesOk() (float64, bool) {
	if o == nil || o.DistanceMiles == nil {
		var ret float64
		return ret, false
	}
	return *o.DistanceMiles, true
}

// HasDistanceMiles returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasDistanceMiles() bool {
	if o != nil && o.DistanceMiles != nil {
		return true
	}

	return false
}

// SetDistanceMiles gets a reference to the given float64 and assigns it to the DistanceMiles field.
func (o *V1DriverDailyLogResponseDays) SetDistanceMiles(v float64) {
	o.DistanceMiles = &v
}

// GetEndMs returns the EndMs field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetEndMs() int32 {
	if o == nil || o.EndMs == nil {
		var ret int32
		return ret
	}
	return *o.EndMs
}

// GetEndMsOk returns a tuple with the EndMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetEndMsOk() (int32, bool) {
	if o == nil || o.EndMs == nil {
		var ret int32
		return ret, false
	}
	return *o.EndMs, true
}

// HasEndMs returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasEndMs() bool {
	if o != nil && o.EndMs != nil {
		return true
	}

	return false
}

// SetEndMs gets a reference to the given int32 and assigns it to the EndMs field.
func (o *V1DriverDailyLogResponseDays) SetEndMs(v int32) {
	o.EndMs = &v
}

// GetShippingDocIds returns the ShippingDocIds field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetShippingDocIds() map[string]interface{} {
	if o == nil || o.ShippingDocIds == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ShippingDocIds
}

// GetShippingDocIdsOk returns a tuple with the ShippingDocIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetShippingDocIdsOk() (map[string]interface{}, bool) {
	if o == nil || o.ShippingDocIds == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.ShippingDocIds, true
}

// HasShippingDocIds returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasShippingDocIds() bool {
	if o != nil && o.ShippingDocIds != nil {
		return true
	}

	return false
}

// SetShippingDocIds gets a reference to the given map[string]interface{} and assigns it to the ShippingDocIds field.
func (o *V1DriverDailyLogResponseDays) SetShippingDocIds(v map[string]interface{}) {
	o.ShippingDocIds = &v
}

// GetStartMs returns the StartMs field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetStartMs() int32 {
	if o == nil || o.StartMs == nil {
		var ret int32
		return ret
	}
	return *o.StartMs
}

// GetStartMsOk returns a tuple with the StartMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetStartMsOk() (int32, bool) {
	if o == nil || o.StartMs == nil {
		var ret int32
		return ret, false
	}
	return *o.StartMs, true
}

// HasStartMs returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasStartMs() bool {
	if o != nil && o.StartMs != nil {
		return true
	}

	return false
}

// SetStartMs gets a reference to the given int32 and assigns it to the StartMs field.
func (o *V1DriverDailyLogResponseDays) SetStartMs(v int32) {
	o.StartMs = &v
}

// GetTrailerIds returns the TrailerIds field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetTrailerIds() map[string]interface{} {
	if o == nil || o.TrailerIds == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.TrailerIds
}

// GetTrailerIdsOk returns a tuple with the TrailerIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetTrailerIdsOk() (map[string]interface{}, bool) {
	if o == nil || o.TrailerIds == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.TrailerIds, true
}

// HasTrailerIds returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasTrailerIds() bool {
	if o != nil && o.TrailerIds != nil {
		return true
	}

	return false
}

// SetTrailerIds gets a reference to the given map[string]interface{} and assigns it to the TrailerIds field.
func (o *V1DriverDailyLogResponseDays) SetTrailerIds(v map[string]interface{}) {
	o.TrailerIds = &v
}

// GetVehicleIds returns the VehicleIds field value if set, zero value otherwise.
func (o *V1DriverDailyLogResponseDays) GetVehicleIds() map[string]interface{} {
	if o == nil || o.VehicleIds == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.VehicleIds
}

// GetVehicleIdsOk returns a tuple with the VehicleIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DriverDailyLogResponseDays) GetVehicleIdsOk() (map[string]interface{}, bool) {
	if o == nil || o.VehicleIds == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.VehicleIds, true
}

// HasVehicleIds returns a boolean if a field has been set.
func (o *V1DriverDailyLogResponseDays) HasVehicleIds() bool {
	if o != nil && o.VehicleIds != nil {
		return true
	}

	return false
}

// SetVehicleIds gets a reference to the given map[string]interface{} and assigns it to the VehicleIds field.
func (o *V1DriverDailyLogResponseDays) SetVehicleIds(v map[string]interface{}) {
	o.VehicleIds = &v
}

type NullableV1DriverDailyLogResponseDays struct {
	Value        V1DriverDailyLogResponseDays
	ExplicitNull bool
}

func (v NullableV1DriverDailyLogResponseDays) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1DriverDailyLogResponseDays) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
