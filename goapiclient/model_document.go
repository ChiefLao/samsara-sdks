/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// Document Document
type Document struct {
	// Time the document was created in RFC 3339 format.
	CreatedAtTime *string                   `json:"createdAtTime,omitempty"`
	DocumentType  *DocumentTypeTinyResponse `json:"documentType,omitempty"`
	Driver        *DriverTinyResponse       `json:"driver,omitempty"`
	// The fields associated with this document.
	Fields *[]DocumentFields `json:"fields,omitempty"`
	// Unique Samsara UUID for the document
	Id *string `json:"id,omitempty"`
	// Notes on the document.
	Notes     *string                `json:"notes,omitempty"`
	RouteStop *RouteStopTinyResponse `json:"routeStop,omitempty"`
	// The condition of the document created for the driver. Can be either `required` or `submitted`, if no value is specified, `state` defaults to `required`. `required` documents are pre-populated documents for the Driver to fill out in the Driver App.
	State *string `json:"state,omitempty"`
	// Time the document was updated in RFC 3339 format.
	UpdatedAtTime *string              `json:"updatedAtTime,omitempty"`
	Vehicle       *VehicleTinyResponse `json:"vehicle,omitempty"`
}

// GetCreatedAtTime returns the CreatedAtTime field value if set, zero value otherwise.
func (o *Document) GetCreatedAtTime() string {
	if o == nil || o.CreatedAtTime == nil {
		var ret string
		return ret
	}
	return *o.CreatedAtTime
}

// GetCreatedAtTimeOk returns a tuple with the CreatedAtTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetCreatedAtTimeOk() (string, bool) {
	if o == nil || o.CreatedAtTime == nil {
		var ret string
		return ret, false
	}
	return *o.CreatedAtTime, true
}

// HasCreatedAtTime returns a boolean if a field has been set.
func (o *Document) HasCreatedAtTime() bool {
	if o != nil && o.CreatedAtTime != nil {
		return true
	}

	return false
}

// SetCreatedAtTime gets a reference to the given string and assigns it to the CreatedAtTime field.
func (o *Document) SetCreatedAtTime(v string) {
	o.CreatedAtTime = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *Document) GetDocumentType() DocumentTypeTinyResponse {
	if o == nil || o.DocumentType == nil {
		var ret DocumentTypeTinyResponse
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentTypeOk() (DocumentTypeTinyResponse, bool) {
	if o == nil || o.DocumentType == nil {
		var ret DocumentTypeTinyResponse
		return ret, false
	}
	return *o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *Document) HasDocumentType() bool {
	if o != nil && o.DocumentType != nil {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given DocumentTypeTinyResponse and assigns it to the DocumentType field.
func (o *Document) SetDocumentType(v DocumentTypeTinyResponse) {
	o.DocumentType = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *Document) GetDriver() DriverTinyResponse {
	if o == nil || o.Driver == nil {
		var ret DriverTinyResponse
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDriverOk() (DriverTinyResponse, bool) {
	if o == nil || o.Driver == nil {
		var ret DriverTinyResponse
		return ret, false
	}
	return *o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *Document) HasDriver() bool {
	if o != nil && o.Driver != nil {
		return true
	}

	return false
}

// SetDriver gets a reference to the given DriverTinyResponse and assigns it to the Driver field.
func (o *Document) SetDriver(v DriverTinyResponse) {
	o.Driver = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *Document) GetFields() []DocumentFields {
	if o == nil || o.Fields == nil {
		var ret []DocumentFields
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetFieldsOk() ([]DocumentFields, bool) {
	if o == nil || o.Fields == nil {
		var ret []DocumentFields
		return ret, false
	}
	return *o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *Document) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []DocumentFields and assigns it to the Fields field.
func (o *Document) SetFields(v []DocumentFields) {
	o.Fields = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Document) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Document) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Document) SetId(v string) {
	o.Id = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Document) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetNotesOk() (string, bool) {
	if o == nil || o.Notes == nil {
		var ret string
		return ret, false
	}
	return *o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Document) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Document) SetNotes(v string) {
	o.Notes = &v
}

// GetRouteStop returns the RouteStop field value if set, zero value otherwise.
func (o *Document) GetRouteStop() RouteStopTinyResponse {
	if o == nil || o.RouteStop == nil {
		var ret RouteStopTinyResponse
		return ret
	}
	return *o.RouteStop
}

// GetRouteStopOk returns a tuple with the RouteStop field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetRouteStopOk() (RouteStopTinyResponse, bool) {
	if o == nil || o.RouteStop == nil {
		var ret RouteStopTinyResponse
		return ret, false
	}
	return *o.RouteStop, true
}

// HasRouteStop returns a boolean if a field has been set.
func (o *Document) HasRouteStop() bool {
	if o != nil && o.RouteStop != nil {
		return true
	}

	return false
}

// SetRouteStop gets a reference to the given RouteStopTinyResponse and assigns it to the RouteStop field.
func (o *Document) SetRouteStop(v RouteStopTinyResponse) {
	o.RouteStop = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Document) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetStateOk() (string, bool) {
	if o == nil || o.State == nil {
		var ret string
		return ret, false
	}
	return *o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Document) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Document) SetState(v string) {
	o.State = &v
}

// GetUpdatedAtTime returns the UpdatedAtTime field value if set, zero value otherwise.
func (o *Document) GetUpdatedAtTime() string {
	if o == nil || o.UpdatedAtTime == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAtTime
}

// GetUpdatedAtTimeOk returns a tuple with the UpdatedAtTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetUpdatedAtTimeOk() (string, bool) {
	if o == nil || o.UpdatedAtTime == nil {
		var ret string
		return ret, false
	}
	return *o.UpdatedAtTime, true
}

// HasUpdatedAtTime returns a boolean if a field has been set.
func (o *Document) HasUpdatedAtTime() bool {
	if o != nil && o.UpdatedAtTime != nil {
		return true
	}

	return false
}

// SetUpdatedAtTime gets a reference to the given string and assigns it to the UpdatedAtTime field.
func (o *Document) SetUpdatedAtTime(v string) {
	o.UpdatedAtTime = &v
}

// GetVehicle returns the Vehicle field value if set, zero value otherwise.
func (o *Document) GetVehicle() VehicleTinyResponse {
	if o == nil || o.Vehicle == nil {
		var ret VehicleTinyResponse
		return ret
	}
	return *o.Vehicle
}

// GetVehicleOk returns a tuple with the Vehicle field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetVehicleOk() (VehicleTinyResponse, bool) {
	if o == nil || o.Vehicle == nil {
		var ret VehicleTinyResponse
		return ret, false
	}
	return *o.Vehicle, true
}

// HasVehicle returns a boolean if a field has been set.
func (o *Document) HasVehicle() bool {
	if o != nil && o.Vehicle != nil {
		return true
	}

	return false
}

// SetVehicle gets a reference to the given VehicleTinyResponse and assigns it to the Vehicle field.
func (o *Document) SetVehicle(v VehicleTinyResponse) {
	o.Vehicle = &v
}

type NullableDocument struct {
	Value        Document
	ExplicitNull bool
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
