/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1DvirBase struct for V1DvirBase
type V1DvirBase struct {
	AuthorSignature *V1DvirBaseAuthorSignature `json:"authorSignature,omitempty"`
	// Signifies if the defects on the vehicle corrected after the DVIR is done.
	DefectsCorrected *bool `json:"defectsCorrected,omitempty"`
	// Signifies if the defects on this vehicle can be ignored.
	DefectsNeedNotBeCorrected *bool `json:"defectsNeedNotBeCorrected,omitempty"`
	// The id of this DVIR record.
	Id *int64 `json:"id,omitempty"`
	// Inspection type of the DVIR.
	InspectionType *string `json:"inspectionType,omitempty"`
	// The mechanics notes on the DVIR.
	MechanicNotes            *string                             `json:"mechanicNotes,omitempty"`
	MechanicOrAgentSignature *V1DvirBaseMechanicOrAgentSignature `json:"mechanicOrAgentSignature,omitempty"`
	NextDriverSignature      *V1DvirBaseNextDriverSignature      `json:"nextDriverSignature,omitempty"`
	// The odometer reading in miles for the vehicle when the DVIR was done.
	OdometerMiles *int64 `json:"odometerMiles,omitempty"`
	// Timestamp when driver began filling out this DVIR, in UNIX milliseconds.
	StartedAtMs *int64 `json:"startedAtMs,omitempty"`
	// Timestamp of when this DVIR was signed & completed, in UNIX milliseconds.
	TimeMs *int64 `json:"timeMs,omitempty"`
	// Defects registered for the trailer which was part of the DVIR.
	TrailerDefects *[]V1DvirDefectBase `json:"trailerDefects,omitempty"`
	// The id of the trailer which was part of the DVIR.
	TrailerId *int32 `json:"trailerId,omitempty"`
	// The name of the trailer which was part of the DVIR.
	TrailerName *string            `json:"trailerName,omitempty"`
	Vehicle     *V1DvirBaseVehicle `json:"vehicle,omitempty"`
	// The condition of vechile on which DVIR was done.
	VehicleCondition *string `json:"vehicleCondition,omitempty"`
	// Defects registered for the vehicle which was part of the DVIR.
	VehicleDefects *[]V1DvirDefectBase `json:"vehicleDefects,omitempty"`
}

// GetAuthorSignature returns the AuthorSignature field value if set, zero value otherwise.
func (o *V1DvirBase) GetAuthorSignature() V1DvirBaseAuthorSignature {
	if o == nil || o.AuthorSignature == nil {
		var ret V1DvirBaseAuthorSignature
		return ret
	}
	return *o.AuthorSignature
}

// GetAuthorSignatureOk returns a tuple with the AuthorSignature field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetAuthorSignatureOk() (V1DvirBaseAuthorSignature, bool) {
	if o == nil || o.AuthorSignature == nil {
		var ret V1DvirBaseAuthorSignature
		return ret, false
	}
	return *o.AuthorSignature, true
}

// HasAuthorSignature returns a boolean if a field has been set.
func (o *V1DvirBase) HasAuthorSignature() bool {
	if o != nil && o.AuthorSignature != nil {
		return true
	}

	return false
}

// SetAuthorSignature gets a reference to the given V1DvirBaseAuthorSignature and assigns it to the AuthorSignature field.
func (o *V1DvirBase) SetAuthorSignature(v V1DvirBaseAuthorSignature) {
	o.AuthorSignature = &v
}

// GetDefectsCorrected returns the DefectsCorrected field value if set, zero value otherwise.
func (o *V1DvirBase) GetDefectsCorrected() bool {
	if o == nil || o.DefectsCorrected == nil {
		var ret bool
		return ret
	}
	return *o.DefectsCorrected
}

// GetDefectsCorrectedOk returns a tuple with the DefectsCorrected field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetDefectsCorrectedOk() (bool, bool) {
	if o == nil || o.DefectsCorrected == nil {
		var ret bool
		return ret, false
	}
	return *o.DefectsCorrected, true
}

// HasDefectsCorrected returns a boolean if a field has been set.
func (o *V1DvirBase) HasDefectsCorrected() bool {
	if o != nil && o.DefectsCorrected != nil {
		return true
	}

	return false
}

// SetDefectsCorrected gets a reference to the given bool and assigns it to the DefectsCorrected field.
func (o *V1DvirBase) SetDefectsCorrected(v bool) {
	o.DefectsCorrected = &v
}

// GetDefectsNeedNotBeCorrected returns the DefectsNeedNotBeCorrected field value if set, zero value otherwise.
func (o *V1DvirBase) GetDefectsNeedNotBeCorrected() bool {
	if o == nil || o.DefectsNeedNotBeCorrected == nil {
		var ret bool
		return ret
	}
	return *o.DefectsNeedNotBeCorrected
}

// GetDefectsNeedNotBeCorrectedOk returns a tuple with the DefectsNeedNotBeCorrected field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetDefectsNeedNotBeCorrectedOk() (bool, bool) {
	if o == nil || o.DefectsNeedNotBeCorrected == nil {
		var ret bool
		return ret, false
	}
	return *o.DefectsNeedNotBeCorrected, true
}

// HasDefectsNeedNotBeCorrected returns a boolean if a field has been set.
func (o *V1DvirBase) HasDefectsNeedNotBeCorrected() bool {
	if o != nil && o.DefectsNeedNotBeCorrected != nil {
		return true
	}

	return false
}

// SetDefectsNeedNotBeCorrected gets a reference to the given bool and assigns it to the DefectsNeedNotBeCorrected field.
func (o *V1DvirBase) SetDefectsNeedNotBeCorrected(v bool) {
	o.DefectsNeedNotBeCorrected = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1DvirBase) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetIdOk() (int64, bool) {
	if o == nil || o.Id == nil {
		var ret int64
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1DvirBase) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *V1DvirBase) SetId(v int64) {
	o.Id = &v
}

// GetInspectionType returns the InspectionType field value if set, zero value otherwise.
func (o *V1DvirBase) GetInspectionType() string {
	if o == nil || o.InspectionType == nil {
		var ret string
		return ret
	}
	return *o.InspectionType
}

// GetInspectionTypeOk returns a tuple with the InspectionType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetInspectionTypeOk() (string, bool) {
	if o == nil || o.InspectionType == nil {
		var ret string
		return ret, false
	}
	return *o.InspectionType, true
}

// HasInspectionType returns a boolean if a field has been set.
func (o *V1DvirBase) HasInspectionType() bool {
	if o != nil && o.InspectionType != nil {
		return true
	}

	return false
}

// SetInspectionType gets a reference to the given string and assigns it to the InspectionType field.
func (o *V1DvirBase) SetInspectionType(v string) {
	o.InspectionType = &v
}

// GetMechanicNotes returns the MechanicNotes field value if set, zero value otherwise.
func (o *V1DvirBase) GetMechanicNotes() string {
	if o == nil || o.MechanicNotes == nil {
		var ret string
		return ret
	}
	return *o.MechanicNotes
}

// GetMechanicNotesOk returns a tuple with the MechanicNotes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetMechanicNotesOk() (string, bool) {
	if o == nil || o.MechanicNotes == nil {
		var ret string
		return ret, false
	}
	return *o.MechanicNotes, true
}

// HasMechanicNotes returns a boolean if a field has been set.
func (o *V1DvirBase) HasMechanicNotes() bool {
	if o != nil && o.MechanicNotes != nil {
		return true
	}

	return false
}

// SetMechanicNotes gets a reference to the given string and assigns it to the MechanicNotes field.
func (o *V1DvirBase) SetMechanicNotes(v string) {
	o.MechanicNotes = &v
}

// GetMechanicOrAgentSignature returns the MechanicOrAgentSignature field value if set, zero value otherwise.
func (o *V1DvirBase) GetMechanicOrAgentSignature() V1DvirBaseMechanicOrAgentSignature {
	if o == nil || o.MechanicOrAgentSignature == nil {
		var ret V1DvirBaseMechanicOrAgentSignature
		return ret
	}
	return *o.MechanicOrAgentSignature
}

// GetMechanicOrAgentSignatureOk returns a tuple with the MechanicOrAgentSignature field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetMechanicOrAgentSignatureOk() (V1DvirBaseMechanicOrAgentSignature, bool) {
	if o == nil || o.MechanicOrAgentSignature == nil {
		var ret V1DvirBaseMechanicOrAgentSignature
		return ret, false
	}
	return *o.MechanicOrAgentSignature, true
}

// HasMechanicOrAgentSignature returns a boolean if a field has been set.
func (o *V1DvirBase) HasMechanicOrAgentSignature() bool {
	if o != nil && o.MechanicOrAgentSignature != nil {
		return true
	}

	return false
}

// SetMechanicOrAgentSignature gets a reference to the given V1DvirBaseMechanicOrAgentSignature and assigns it to the MechanicOrAgentSignature field.
func (o *V1DvirBase) SetMechanicOrAgentSignature(v V1DvirBaseMechanicOrAgentSignature) {
	o.MechanicOrAgentSignature = &v
}

// GetNextDriverSignature returns the NextDriverSignature field value if set, zero value otherwise.
func (o *V1DvirBase) GetNextDriverSignature() V1DvirBaseNextDriverSignature {
	if o == nil || o.NextDriverSignature == nil {
		var ret V1DvirBaseNextDriverSignature
		return ret
	}
	return *o.NextDriverSignature
}

// GetNextDriverSignatureOk returns a tuple with the NextDriverSignature field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetNextDriverSignatureOk() (V1DvirBaseNextDriverSignature, bool) {
	if o == nil || o.NextDriverSignature == nil {
		var ret V1DvirBaseNextDriverSignature
		return ret, false
	}
	return *o.NextDriverSignature, true
}

// HasNextDriverSignature returns a boolean if a field has been set.
func (o *V1DvirBase) HasNextDriverSignature() bool {
	if o != nil && o.NextDriverSignature != nil {
		return true
	}

	return false
}

// SetNextDriverSignature gets a reference to the given V1DvirBaseNextDriverSignature and assigns it to the NextDriverSignature field.
func (o *V1DvirBase) SetNextDriverSignature(v V1DvirBaseNextDriverSignature) {
	o.NextDriverSignature = &v
}

// GetOdometerMiles returns the OdometerMiles field value if set, zero value otherwise.
func (o *V1DvirBase) GetOdometerMiles() int64 {
	if o == nil || o.OdometerMiles == nil {
		var ret int64
		return ret
	}
	return *o.OdometerMiles
}

// GetOdometerMilesOk returns a tuple with the OdometerMiles field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetOdometerMilesOk() (int64, bool) {
	if o == nil || o.OdometerMiles == nil {
		var ret int64
		return ret, false
	}
	return *o.OdometerMiles, true
}

// HasOdometerMiles returns a boolean if a field has been set.
func (o *V1DvirBase) HasOdometerMiles() bool {
	if o != nil && o.OdometerMiles != nil {
		return true
	}

	return false
}

// SetOdometerMiles gets a reference to the given int64 and assigns it to the OdometerMiles field.
func (o *V1DvirBase) SetOdometerMiles(v int64) {
	o.OdometerMiles = &v
}

// GetStartedAtMs returns the StartedAtMs field value if set, zero value otherwise.
func (o *V1DvirBase) GetStartedAtMs() int64 {
	if o == nil || o.StartedAtMs == nil {
		var ret int64
		return ret
	}
	return *o.StartedAtMs
}

// GetStartedAtMsOk returns a tuple with the StartedAtMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetStartedAtMsOk() (int64, bool) {
	if o == nil || o.StartedAtMs == nil {
		var ret int64
		return ret, false
	}
	return *o.StartedAtMs, true
}

// HasStartedAtMs returns a boolean if a field has been set.
func (o *V1DvirBase) HasStartedAtMs() bool {
	if o != nil && o.StartedAtMs != nil {
		return true
	}

	return false
}

// SetStartedAtMs gets a reference to the given int64 and assigns it to the StartedAtMs field.
func (o *V1DvirBase) SetStartedAtMs(v int64) {
	o.StartedAtMs = &v
}

// GetTimeMs returns the TimeMs field value if set, zero value otherwise.
func (o *V1DvirBase) GetTimeMs() int64 {
	if o == nil || o.TimeMs == nil {
		var ret int64
		return ret
	}
	return *o.TimeMs
}

// GetTimeMsOk returns a tuple with the TimeMs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetTimeMsOk() (int64, bool) {
	if o == nil || o.TimeMs == nil {
		var ret int64
		return ret, false
	}
	return *o.TimeMs, true
}

// HasTimeMs returns a boolean if a field has been set.
func (o *V1DvirBase) HasTimeMs() bool {
	if o != nil && o.TimeMs != nil {
		return true
	}

	return false
}

// SetTimeMs gets a reference to the given int64 and assigns it to the TimeMs field.
func (o *V1DvirBase) SetTimeMs(v int64) {
	o.TimeMs = &v
}

// GetTrailerDefects returns the TrailerDefects field value if set, zero value otherwise.
func (o *V1DvirBase) GetTrailerDefects() []V1DvirDefectBase {
	if o == nil || o.TrailerDefects == nil {
		var ret []V1DvirDefectBase
		return ret
	}
	return *o.TrailerDefects
}

// GetTrailerDefectsOk returns a tuple with the TrailerDefects field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetTrailerDefectsOk() ([]V1DvirDefectBase, bool) {
	if o == nil || o.TrailerDefects == nil {
		var ret []V1DvirDefectBase
		return ret, false
	}
	return *o.TrailerDefects, true
}

// HasTrailerDefects returns a boolean if a field has been set.
func (o *V1DvirBase) HasTrailerDefects() bool {
	if o != nil && o.TrailerDefects != nil {
		return true
	}

	return false
}

// SetTrailerDefects gets a reference to the given []V1DvirDefectBase and assigns it to the TrailerDefects field.
func (o *V1DvirBase) SetTrailerDefects(v []V1DvirDefectBase) {
	o.TrailerDefects = &v
}

// GetTrailerId returns the TrailerId field value if set, zero value otherwise.
func (o *V1DvirBase) GetTrailerId() int32 {
	if o == nil || o.TrailerId == nil {
		var ret int32
		return ret
	}
	return *o.TrailerId
}

// GetTrailerIdOk returns a tuple with the TrailerId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetTrailerIdOk() (int32, bool) {
	if o == nil || o.TrailerId == nil {
		var ret int32
		return ret, false
	}
	return *o.TrailerId, true
}

// HasTrailerId returns a boolean if a field has been set.
func (o *V1DvirBase) HasTrailerId() bool {
	if o != nil && o.TrailerId != nil {
		return true
	}

	return false
}

// SetTrailerId gets a reference to the given int32 and assigns it to the TrailerId field.
func (o *V1DvirBase) SetTrailerId(v int32) {
	o.TrailerId = &v
}

// GetTrailerName returns the TrailerName field value if set, zero value otherwise.
func (o *V1DvirBase) GetTrailerName() string {
	if o == nil || o.TrailerName == nil {
		var ret string
		return ret
	}
	return *o.TrailerName
}

// GetTrailerNameOk returns a tuple with the TrailerName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetTrailerNameOk() (string, bool) {
	if o == nil || o.TrailerName == nil {
		var ret string
		return ret, false
	}
	return *o.TrailerName, true
}

// HasTrailerName returns a boolean if a field has been set.
func (o *V1DvirBase) HasTrailerName() bool {
	if o != nil && o.TrailerName != nil {
		return true
	}

	return false
}

// SetTrailerName gets a reference to the given string and assigns it to the TrailerName field.
func (o *V1DvirBase) SetTrailerName(v string) {
	o.TrailerName = &v
}

// GetVehicle returns the Vehicle field value if set, zero value otherwise.
func (o *V1DvirBase) GetVehicle() V1DvirBaseVehicle {
	if o == nil || o.Vehicle == nil {
		var ret V1DvirBaseVehicle
		return ret
	}
	return *o.Vehicle
}

// GetVehicleOk returns a tuple with the Vehicle field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetVehicleOk() (V1DvirBaseVehicle, bool) {
	if o == nil || o.Vehicle == nil {
		var ret V1DvirBaseVehicle
		return ret, false
	}
	return *o.Vehicle, true
}

// HasVehicle returns a boolean if a field has been set.
func (o *V1DvirBase) HasVehicle() bool {
	if o != nil && o.Vehicle != nil {
		return true
	}

	return false
}

// SetVehicle gets a reference to the given V1DvirBaseVehicle and assigns it to the Vehicle field.
func (o *V1DvirBase) SetVehicle(v V1DvirBaseVehicle) {
	o.Vehicle = &v
}

// GetVehicleCondition returns the VehicleCondition field value if set, zero value otherwise.
func (o *V1DvirBase) GetVehicleCondition() string {
	if o == nil || o.VehicleCondition == nil {
		var ret string
		return ret
	}
	return *o.VehicleCondition
}

// GetVehicleConditionOk returns a tuple with the VehicleCondition field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetVehicleConditionOk() (string, bool) {
	if o == nil || o.VehicleCondition == nil {
		var ret string
		return ret, false
	}
	return *o.VehicleCondition, true
}

// HasVehicleCondition returns a boolean if a field has been set.
func (o *V1DvirBase) HasVehicleCondition() bool {
	if o != nil && o.VehicleCondition != nil {
		return true
	}

	return false
}

// SetVehicleCondition gets a reference to the given string and assigns it to the VehicleCondition field.
func (o *V1DvirBase) SetVehicleCondition(v string) {
	o.VehicleCondition = &v
}

// GetVehicleDefects returns the VehicleDefects field value if set, zero value otherwise.
func (o *V1DvirBase) GetVehicleDefects() []V1DvirDefectBase {
	if o == nil || o.VehicleDefects == nil {
		var ret []V1DvirDefectBase
		return ret
	}
	return *o.VehicleDefects
}

// GetVehicleDefectsOk returns a tuple with the VehicleDefects field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *V1DvirBase) GetVehicleDefectsOk() ([]V1DvirDefectBase, bool) {
	if o == nil || o.VehicleDefects == nil {
		var ret []V1DvirDefectBase
		return ret, false
	}
	return *o.VehicleDefects, true
}

// HasVehicleDefects returns a boolean if a field has been set.
func (o *V1DvirBase) HasVehicleDefects() bool {
	if o != nil && o.VehicleDefects != nil {
		return true
	}

	return false
}

// SetVehicleDefects gets a reference to the given []V1DvirDefectBase and assigns it to the VehicleDefects field.
func (o *V1DvirBase) SetVehicleDefects(v []V1DvirDefectBase) {
	o.VehicleDefects = &v
}

type NullableV1DvirBase struct {
	Value        V1DvirBase
	ExplicitNull bool
}

func (v NullableV1DvirBase) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1DvirBase) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
