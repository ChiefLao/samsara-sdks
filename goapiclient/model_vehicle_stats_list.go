/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// VehicleStatsList struct for VehicleStatsList
type VehicleStatsList struct {
	// ID of the vehicle.
	Id *string `json:"id,omitempty"`
	// Name of the vehicle.
	Name              *string                     `json:"name,omitempty"`
	EngineStates      *[]VehicleEngineState       `json:"engineStates,omitempty"`
	FuelPercents      *[]VehicleFuelPercent       `json:"fuelPercents,omitempty"`
	ObdOdometerMeters *[]VehicleObdOdometerMeters `json:"obdOdometerMeters,omitempty"`
	GpsOdometerMeters *[]VehicleGpsOdometerMeters `json:"gpsOdometerMeters,omitempty"`
	ObdEngineSeconds  *[]VehicleObdEngineSeconds  `json:"obdEngineSeconds,omitempty"`
	GpsDistanceMeters *[]VehicleGpsDistanceMeters `json:"gpsDistanceMeters,omitempty"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VehicleStatsList) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsList) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VehicleStatsList) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VehicleStatsList) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VehicleStatsList) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsList) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VehicleStatsList) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VehicleStatsList) SetName(v string) {
	o.Name = &v
}

// GetEngineStates returns the EngineStates field value if set, zero value otherwise.
func (o *VehicleStatsList) GetEngineStates() []VehicleEngineState {
	if o == nil || o.EngineStates == nil {
		var ret []VehicleEngineState
		return ret
	}
	return *o.EngineStates
}

// GetEngineStatesOk returns a tuple with the EngineStates field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsList) GetEngineStatesOk() ([]VehicleEngineState, bool) {
	if o == nil || o.EngineStates == nil {
		var ret []VehicleEngineState
		return ret, false
	}
	return *o.EngineStates, true
}

// HasEngineStates returns a boolean if a field has been set.
func (o *VehicleStatsList) HasEngineStates() bool {
	if o != nil && o.EngineStates != nil {
		return true
	}

	return false
}

// SetEngineStates gets a reference to the given []VehicleEngineState and assigns it to the EngineStates field.
func (o *VehicleStatsList) SetEngineStates(v []VehicleEngineState) {
	o.EngineStates = &v
}

// GetFuelPercents returns the FuelPercents field value if set, zero value otherwise.
func (o *VehicleStatsList) GetFuelPercents() []VehicleFuelPercent {
	if o == nil || o.FuelPercents == nil {
		var ret []VehicleFuelPercent
		return ret
	}
	return *o.FuelPercents
}

// GetFuelPercentsOk returns a tuple with the FuelPercents field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsList) GetFuelPercentsOk() ([]VehicleFuelPercent, bool) {
	if o == nil || o.FuelPercents == nil {
		var ret []VehicleFuelPercent
		return ret, false
	}
	return *o.FuelPercents, true
}

// HasFuelPercents returns a boolean if a field has been set.
func (o *VehicleStatsList) HasFuelPercents() bool {
	if o != nil && o.FuelPercents != nil {
		return true
	}

	return false
}

// SetFuelPercents gets a reference to the given []VehicleFuelPercent and assigns it to the FuelPercents field.
func (o *VehicleStatsList) SetFuelPercents(v []VehicleFuelPercent) {
	o.FuelPercents = &v
}

// GetObdOdometerMeters returns the ObdOdometerMeters field value if set, zero value otherwise.
func (o *VehicleStatsList) GetObdOdometerMeters() []VehicleObdOdometerMeters {
	if o == nil || o.ObdOdometerMeters == nil {
		var ret []VehicleObdOdometerMeters
		return ret
	}
	return *o.ObdOdometerMeters
}

// GetObdOdometerMetersOk returns a tuple with the ObdOdometerMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsList) GetObdOdometerMetersOk() ([]VehicleObdOdometerMeters, bool) {
	if o == nil || o.ObdOdometerMeters == nil {
		var ret []VehicleObdOdometerMeters
		return ret, false
	}
	return *o.ObdOdometerMeters, true
}

// HasObdOdometerMeters returns a boolean if a field has been set.
func (o *VehicleStatsList) HasObdOdometerMeters() bool {
	if o != nil && o.ObdOdometerMeters != nil {
		return true
	}

	return false
}

// SetObdOdometerMeters gets a reference to the given []VehicleObdOdometerMeters and assigns it to the ObdOdometerMeters field.
func (o *VehicleStatsList) SetObdOdometerMeters(v []VehicleObdOdometerMeters) {
	o.ObdOdometerMeters = &v
}

// GetGpsOdometerMeters returns the GpsOdometerMeters field value if set, zero value otherwise.
func (o *VehicleStatsList) GetGpsOdometerMeters() []VehicleGpsOdometerMeters {
	if o == nil || o.GpsOdometerMeters == nil {
		var ret []VehicleGpsOdometerMeters
		return ret
	}
	return *o.GpsOdometerMeters
}

// GetGpsOdometerMetersOk returns a tuple with the GpsOdometerMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsList) GetGpsOdometerMetersOk() ([]VehicleGpsOdometerMeters, bool) {
	if o == nil || o.GpsOdometerMeters == nil {
		var ret []VehicleGpsOdometerMeters
		return ret, false
	}
	return *o.GpsOdometerMeters, true
}

// HasGpsOdometerMeters returns a boolean if a field has been set.
func (o *VehicleStatsList) HasGpsOdometerMeters() bool {
	if o != nil && o.GpsOdometerMeters != nil {
		return true
	}

	return false
}

// SetGpsOdometerMeters gets a reference to the given []VehicleGpsOdometerMeters and assigns it to the GpsOdometerMeters field.
func (o *VehicleStatsList) SetGpsOdometerMeters(v []VehicleGpsOdometerMeters) {
	o.GpsOdometerMeters = &v
}

// GetObdEngineSeconds returns the ObdEngineSeconds field value if set, zero value otherwise.
func (o *VehicleStatsList) GetObdEngineSeconds() []VehicleObdEngineSeconds {
	if o == nil || o.ObdEngineSeconds == nil {
		var ret []VehicleObdEngineSeconds
		return ret
	}
	return *o.ObdEngineSeconds
}

// GetObdEngineSecondsOk returns a tuple with the ObdEngineSeconds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsList) GetObdEngineSecondsOk() ([]VehicleObdEngineSeconds, bool) {
	if o == nil || o.ObdEngineSeconds == nil {
		var ret []VehicleObdEngineSeconds
		return ret, false
	}
	return *o.ObdEngineSeconds, true
}

// HasObdEngineSeconds returns a boolean if a field has been set.
func (o *VehicleStatsList) HasObdEngineSeconds() bool {
	if o != nil && o.ObdEngineSeconds != nil {
		return true
	}

	return false
}

// SetObdEngineSeconds gets a reference to the given []VehicleObdEngineSeconds and assigns it to the ObdEngineSeconds field.
func (o *VehicleStatsList) SetObdEngineSeconds(v []VehicleObdEngineSeconds) {
	o.ObdEngineSeconds = &v
}

// GetGpsDistanceMeters returns the GpsDistanceMeters field value if set, zero value otherwise.
func (o *VehicleStatsList) GetGpsDistanceMeters() []VehicleGpsDistanceMeters {
	if o == nil || o.GpsDistanceMeters == nil {
		var ret []VehicleGpsDistanceMeters
		return ret
	}
	return *o.GpsDistanceMeters
}

// GetGpsDistanceMetersOk returns a tuple with the GpsDistanceMeters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStatsList) GetGpsDistanceMetersOk() ([]VehicleGpsDistanceMeters, bool) {
	if o == nil || o.GpsDistanceMeters == nil {
		var ret []VehicleGpsDistanceMeters
		return ret, false
	}
	return *o.GpsDistanceMeters, true
}

// HasGpsDistanceMeters returns a boolean if a field has been set.
func (o *VehicleStatsList) HasGpsDistanceMeters() bool {
	if o != nil && o.GpsDistanceMeters != nil {
		return true
	}

	return false
}

// SetGpsDistanceMeters gets a reference to the given []VehicleGpsDistanceMeters and assigns it to the GpsDistanceMeters field.
func (o *VehicleStatsList) SetGpsDistanceMeters(v []VehicleGpsDistanceMeters) {
	o.GpsDistanceMeters = &v
}

type NullableVehicleStatsList struct {
	Value        VehicleStatsList
	ExplicitNull bool
}

func (v NullableVehicleStatsList) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableVehicleStatsList) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
