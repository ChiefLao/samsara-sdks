/*
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * API version: 2019-12-12
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package goapiclient

import (
	"bytes"
	"encoding/json"
)

// V1DocumentAllOf struct for V1DocumentAllOf
type V1DocumentAllOf struct {
	// Name of the document type.
	DocumentType string `json:"documentType"`
	// The time in Unix epoch milliseconds that the document was created in the driver app.
	DriverCreatedAtMs int64 `json:"driverCreatedAtMs"`
	// ID of the driver for whom the document is submitted.
	DriverId int64 `json:"driverId"`
	// The fields associated with this document.
	Fields []V1DocumentField `json:"fields"`
	// ID of the document.
	Id string `json:"id"`
	// Organization ID that the document belongs to.
	OrgId int64 `json:"orgId"`
	// The time in Unix epoch milliseconds that the document was received by the server.
	ServerCreatedAtMs int64 `json:"serverCreatedAtMs"`
	// The time in Unix epoch milliseconds that the document was updated on the server.
	ServerUpdatedAtMs int64 `json:"serverUpdatedAtMs"`
	// ID of the vehicle the driver was signed into when the document was submitted. Will be `null` if the document `state` is `Required`.
	VehicleId int64 `json:"vehicleId"`
}

// GetDocumentType returns the DocumentType field value
func (o *V1DocumentAllOf) GetDocumentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentType
}

// SetDocumentType sets field value
func (o *V1DocumentAllOf) SetDocumentType(v string) {
	o.DocumentType = v
}

// GetDriverCreatedAtMs returns the DriverCreatedAtMs field value
func (o *V1DocumentAllOf) GetDriverCreatedAtMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DriverCreatedAtMs
}

// SetDriverCreatedAtMs sets field value
func (o *V1DocumentAllOf) SetDriverCreatedAtMs(v int64) {
	o.DriverCreatedAtMs = v
}

// GetDriverId returns the DriverId field value
func (o *V1DocumentAllOf) GetDriverId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DriverId
}

// SetDriverId sets field value
func (o *V1DocumentAllOf) SetDriverId(v int64) {
	o.DriverId = v
}

// GetFields returns the Fields field value
func (o *V1DocumentAllOf) GetFields() []V1DocumentField {
	if o == nil {
		var ret []V1DocumentField
		return ret
	}

	return o.Fields
}

// SetFields sets field value
func (o *V1DocumentAllOf) SetFields(v []V1DocumentField) {
	o.Fields = v
}

// GetId returns the Id field value
func (o *V1DocumentAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *V1DocumentAllOf) SetId(v string) {
	o.Id = v
}

// GetOrgId returns the OrgId field value
func (o *V1DocumentAllOf) GetOrgId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OrgId
}

// SetOrgId sets field value
func (o *V1DocumentAllOf) SetOrgId(v int64) {
	o.OrgId = v
}

// GetServerCreatedAtMs returns the ServerCreatedAtMs field value
func (o *V1DocumentAllOf) GetServerCreatedAtMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServerCreatedAtMs
}

// SetServerCreatedAtMs sets field value
func (o *V1DocumentAllOf) SetServerCreatedAtMs(v int64) {
	o.ServerCreatedAtMs = v
}

// GetServerUpdatedAtMs returns the ServerUpdatedAtMs field value
func (o *V1DocumentAllOf) GetServerUpdatedAtMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServerUpdatedAtMs
}

// SetServerUpdatedAtMs sets field value
func (o *V1DocumentAllOf) SetServerUpdatedAtMs(v int64) {
	o.ServerUpdatedAtMs = v
}

// GetVehicleId returns the VehicleId field value
func (o *V1DocumentAllOf) GetVehicleId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.VehicleId
}

// SetVehicleId sets field value
func (o *V1DocumentAllOf) SetVehicleId(v int64) {
	o.VehicleId = v
}

type NullableV1DocumentAllOf struct {
	Value        V1DocumentAllOf
	ExplicitNull bool
}

func (v NullableV1DocumentAllOf) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableV1DocumentAllOf) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
