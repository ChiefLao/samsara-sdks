{
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "schemes": ["https"],
  "swagger": "2.0",
  "info": {
    "description": "Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.",
    "title": "Samsara API",
    "version": "2019-11-19"
  },
  "host": "api.samsara.com",
  "paths": {
    "/addresses": {
      "get": {
        "tags": ["Addresses"],
        "summary": "List all addresses",
        "description": "Returns a list of all addresses in the organization's Address Book.",
        "operationId": "listAddresses",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/tagIds"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all addresses in the organization's Address Book.",
            "schema": {
              "$ref": "#/definitions/AddressResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/DefaultError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "An address in the organization's Address Book.",
      "type": "object",
      "required": [
        "formattedAddress",
        "geofence",
        "id",
        "latitude",
        "longitude",
        "name"
      ],
      "properties": {
        "addressTypes": {
          "description": "Types associated with this address for ELD reporting purposes.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["yard", "shortHaul"]
          }
        },
        "contacts": {
          "description": "List of contacts associated with this address.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactTinyObject"
          }
        },
        "externalIds": {
          "$ref": "#/definitions/ExternalIds"
        },
        "formattedAddress": {
          "description": "Street address of this address.",
          "type": "string",
          "maxLength": 1024
        },
        "geofence": {
          "description": "The geofence of this address. This can either be a circle or a polygon.",
          "type": "object",
          "properties": {
            "circle": {
              "description": "Properties of a circular geofence. This field is only present if the geofence is circular.",
              "type": "object",
              "required": [
                "radiusMeters"
              ],
              "properties": {
                "latitude": {
                  "description": "The latitude of the center of the geofence.",
                  "type": "number",
                  "format": "double"
                },
                "longitude": {
                  "description": "The longitude of the center of the geofence.",
                  "type": "number",
                  "format": "double"
                },
                "radiusMeters": {
                  "description": "The radius of the circular geofence in meters.",
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "polygon": {
              "description": "Properties of a polygonal geofence. This field is only present if the geofence is polygonal.",
              "type": "object",
              "properties": {
                "vertices": {
                  "description": "The vertices of the geofence.",
                  "type": "array",
                  "items": {
                    "description": "Vertex of a polygonal geofence.",
                    "type": "object",
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "properties": {
                      "latitude": {
                        "description": "The latitude of the polygonal vertex.",
                        "type": "number",
                        "format": "double"
                      },
                      "longitude": {
                        "description": "The longitude of the polygonal vertex.",
                        "type": "number",
                        "format": "double"
                      }
                    }
                  },
                  "minItems": 3
                }
              }
            }
          }
        },
        "id": {
          "description": "Unique identifier for the address.",
          "type": "string"
        },
        "latitude": {
          "description": "Latitude of the address. Either geocoded from the `formattedAddress` or defined on address creation.",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "Longitude of the address. Either geocoded from the `formattedAddress` or defined on address creation.",
          "type": "number",
          "format": "double"
        },
        "name": {
          "description": "Name of the address.",
          "type": "string",
          "maxLength": 255
        },
        "notes": {
          "description": "Notes about the address.",
          "type": "string",
          "maxLength": 280
        },
        "tags": {
          "description": "List of tags this address is associated with.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagTinyObject"
          }
        }
      }
    },
    "AddressResponse": {
      "description": "List of all addresses in the organization's Address Book.",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "ContactTinyObject": {
      "description": "A tiny version of the Contact object.",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "First name of the contact.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the contact.",
          "type": "string"
        },
        "lastName": {
          "description": "Last name of the contact.",
          "type": "string"
        }
      }
    },
    "DefaultError": {
      "description": "Error response.",
      "type": "object",
      "required": [
        "message",
        "requestId"
      ],
      "properties": {
        "message": {
          "description": "The message of the error.",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the request.",
          "type": "string"
        }
      }
    },
    "ExternalIds": {
      "description": "User-defined dictionary of external IDs (key-value pairs). Both the keys and the values of the dictionary are of type string and **must be alphanumeric** (`_`'s, `-`', etc. are not allowed). Each organization can have at most 10 unique external ID keys. To delete an external ID, set its value to null or the empty string (`\"\"`). An external ID can be used as a path parameter to retrieve or update that resource.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Pagination": {
      "description": "Cursor and other information for pagination.",
      "type": "object",
      "required": [
        "endCursor",
        "hasNextPage"
      ],
      "properties": {
        "endCursor": {
          "description": "Cursor representing the last element in the response. Feed this value into an `after` parameter to get the next page of results. This will be an empty string if `hasNextPage` is `false`.",
          "type": "string"
        },
        "hasNextPage": {
          "description": "Indicates whether there are more pages of results for this query.",
          "type": "boolean"
        }
      }
    },
    "TagTinyObject": {
      "description": "A tiny version of the Tag object.",
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "description": "Unique identifier for the tag.",
          "type": "string"
        },
        "name": {
          "description": "Name of the tag.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "after": {
      "name": "after",
      "in": "query",
      "description": "If specified, this should be the `endCursor` value from the previous page of results. If specified, this request will return the next page of results that occur immediately after the previous page of results. See more details [here](https://developers.samsara.com/docs/common-structures#section-pagination).",
      "type": "string"
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects. If the provided `limit` is less than the total number of objects, the results will be [paginated](https://developers.samsara.com/docs/common-structures#section-pagination).",
      "type": "integer",
      "format": "int64",
      "default": 512,
      "maximum": 512,
      "minimum": 1
    },
    "tagIds": {
      "name": "tagIds",
      "in": "query",
      "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,1235`.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv"
    }
  },
  "tags": [
    {
      "description": "Address book entries in Samsara can be used to collect useful data about operations within a particular address's geofence area. Once an address book entry is established, this address can then subsequently be used in order to create routes, set geofence arrival alerts, or detect trips that begin or end within a given geofence area.",
      "name": "Addresses"
    },
    {
      "description": "Contacts are an easy way to manage which users receive alerts (via sms or email).",
      "name": "Contacts"
    },
    {
      "description": "The documents feature allows you to manage driver-submitted documents from the Samsara app. Submitted documents are grouped by document types, and back office users can create new types of documents. For more information on the driver workflow around documents, see this [KB article](https://kb.samsara.com/hc/en-us/articles/360006911551-Using-Documents-in-the-Dashboard).",
      "name": "Documents"
    },
    {
      "description": "Driver objects allow you to track your driver-vehicle assignments, manage driver profiles, and update mobile app credential logins. You can retrieve a list of all drivers, or you can fetch each driver object individually.\nDrivers can be either active or inactive. You should inactivate a driver if you wish to keep the driver's driving history and HOS logs. If your driver is inactive, you can still get information about a driver summary.",
      "name": "Drivers"
    },
    {
      "description": "Hours of Service refers to driver duty status logs.",
      "name": "Hours of Service"
    },
    {
      "description": "Maintenance refers to both DVIRs and reports on vehicle fault codes.",
      "name": "Maintenance"
    },
    {
      "description": "Fleet Admins can send direct free-form messages to drivers. This will send a message to the driver's Samsara driver app, in which you can track whether or not a message has been read by a given driver. For sending structured messages, see the Documents API.",
      "name": "Messages"
    },
    {
      "description": "Samsara's Routes feature allows you to build routes and track and share driver progress in real-time.",
      "name": "Routes"
    },
    {
      "description": "Samsara provides you with more visibility on whether or not your fleets are being safe. With the collection of safety endpoints, you can get aggregate metrics around the performance of a particular driver or vehicle, as well as detailed logs of all the harsh events that take place in an organization.",
      "name": "Safety"
    },
    {
      "description": "The sensor object describes a sensor's attributes and settings within Samsara. Samsara has many different types of sensors, such as temperature and humidity monitors, door monitors, and more.",
      "name": "Sensors"
    },
    {
      "description": "Tags are a simple way to organize vehicles, drivers, assets, and sensors into easily identifiable groups. You can add unlimited entities to each tag, and entities can have multiple different tags. You can also use tag hierarchies in order to create nested classes, such as parent tag 'Massachusetts' and child tag 'Boston'. For more information on tags functionality, see [this Knowledge Base article](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting).",
      "name": "Tags"
    },
    {
      "description": "Driving activity is segmented into trips (travel between a start and a stop). Vehicle movement is broken down into trips along the following lines: a trip begins when a previously inactive vehicle achieves a speed of 5mph; the trip ends when the vehicle's speed remains below 5mph for 5 minutes, or when a vehicle crosses a state or national boundary.",
      "name": "Trips"
    },
    {
      "description": "The users API allows you to manage access to the Samsara dashboard. This can be particularly useful if you are looking to set up a connection with your identity provider to manage roles and permissions for certain types of users within your system.",
      "name": "Users"
    },
    {
      "description": "The vehicle object describes a vehicle's attributes and settings within Samsara. A vehicle is generated in the Samsara platform when a vehicle gateway is installed. The gateway often auto-populates information such as the VIN, make, model, and year.\nThe vehicle object is often referenced in other objects. For these references, you will see a mini-object of the vehicle, rather than the full vehicle information. The mini-object encompasses a smaller subset of commonly-referenced field, such as the Samsara ID, name, and external ID.",
      "name": "Vehicles"
    },
    {
      "description": "Access to industrial data",
      "name": "Industrial"
    }
  ]
}
