# coding: utf-8

"""
    Samsara API

    <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).   # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1DriverDailyLogResponseDays(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_hours': 'float',
        'active_ms': 'int',
        'certified': 'bool',
        'certified_at_ms': 'float',
        'distance_miles': 'float',
        'end_ms': 'int',
        'shipping_doc_ids': 'object',
        'start_ms': 'int',
        'trailer_ids': 'object',
        'vehicle_ids': 'object'
    }

    attribute_map = {
        'active_hours': 'activeHours',
        'active_ms': 'activeMs',
        'certified': 'certified',
        'certified_at_ms': 'certifiedAtMs',
        'distance_miles': 'distanceMiles',
        'end_ms': 'endMs',
        'shipping_doc_ids': 'shippingDocIds',
        'start_ms': 'startMs',
        'trailer_ids': 'trailerIds',
        'vehicle_ids': 'vehicleIds'
    }

    def __init__(self, active_hours=None, active_ms=None, certified=None, certified_at_ms=None, distance_miles=None, end_ms=None, shipping_doc_ids=None, start_ms=None, trailer_ids=None, vehicle_ids=None, local_vars_configuration=None):  # noqa: E501
        """V1DriverDailyLogResponseDays - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active_hours = None
        self._active_ms = None
        self._certified = None
        self._certified_at_ms = None
        self._distance_miles = None
        self._end_ms = None
        self._shipping_doc_ids = None
        self._start_ms = None
        self._trailer_ids = None
        self._vehicle_ids = None
        self.discriminator = None

        if active_hours is not None:
            self.active_hours = active_hours
        if active_ms is not None:
            self.active_ms = active_ms
        if certified is not None:
            self.certified = certified
        if certified_at_ms is not None:
            self.certified_at_ms = certified_at_ms
        if distance_miles is not None:
            self.distance_miles = distance_miles
        if end_ms is not None:
            self.end_ms = end_ms
        if shipping_doc_ids is not None:
            self.shipping_doc_ids = shipping_doc_ids
        if start_ms is not None:
            self.start_ms = start_ms
        if trailer_ids is not None:
            self.trailer_ids = trailer_ids
        if vehicle_ids is not None:
            self.vehicle_ids = vehicle_ids

    @property
    def active_hours(self):
        """Gets the active_hours of this V1DriverDailyLogResponseDays.  # noqa: E501

        Hours spent on duty or driving, rounded to two decimal places.  # noqa: E501

        :return: The active_hours of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: float
        """
        return self._active_hours

    @active_hours.setter
    def active_hours(self, active_hours):
        """Sets the active_hours of this V1DriverDailyLogResponseDays.

        Hours spent on duty or driving, rounded to two decimal places.  # noqa: E501

        :param active_hours: The active_hours of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: float
        """

        self._active_hours = active_hours

    @property
    def active_ms(self):
        """Gets the active_ms of this V1DriverDailyLogResponseDays.  # noqa: E501

        Milliseconds spent on duty or driving.  # noqa: E501

        :return: The active_ms of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: int
        """
        return self._active_ms

    @active_ms.setter
    def active_ms(self, active_ms):
        """Sets the active_ms of this V1DriverDailyLogResponseDays.

        Milliseconds spent on duty or driving.  # noqa: E501

        :param active_ms: The active_ms of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: int
        """

        self._active_ms = active_ms

    @property
    def certified(self):
        """Gets the certified of this V1DriverDailyLogResponseDays.  # noqa: E501

        Whether this HOS day chart was certified by the driver.  # noqa: E501

        :return: The certified of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: bool
        """
        return self._certified

    @certified.setter
    def certified(self, certified):
        """Sets the certified of this V1DriverDailyLogResponseDays.

        Whether this HOS day chart was certified by the driver.  # noqa: E501

        :param certified: The certified of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: bool
        """

        self._certified = certified

    @property
    def certified_at_ms(self):
        """Gets the certified_at_ms of this V1DriverDailyLogResponseDays.  # noqa: E501

        Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.  # noqa: E501

        :return: The certified_at_ms of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: float
        """
        return self._certified_at_ms

    @certified_at_ms.setter
    def certified_at_ms(self, certified_at_ms):
        """Sets the certified_at_ms of this V1DriverDailyLogResponseDays.

        Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.  # noqa: E501

        :param certified_at_ms: The certified_at_ms of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: float
        """

        self._certified_at_ms = certified_at_ms

    @property
    def distance_miles(self):
        """Gets the distance_miles of this V1DriverDailyLogResponseDays.  # noqa: E501

        Distance driven in miles, rounded to two decimal places.  # noqa: E501

        :return: The distance_miles of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: float
        """
        return self._distance_miles

    @distance_miles.setter
    def distance_miles(self, distance_miles):
        """Sets the distance_miles of this V1DriverDailyLogResponseDays.

        Distance driven in miles, rounded to two decimal places.  # noqa: E501

        :param distance_miles: The distance_miles of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: float
        """

        self._distance_miles = distance_miles

    @property
    def end_ms(self):
        """Gets the end_ms of this V1DriverDailyLogResponseDays.  # noqa: E501

        End of the HOS day, specified in milliseconds UNIX time.  # noqa: E501

        :return: The end_ms of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: int
        """
        return self._end_ms

    @end_ms.setter
    def end_ms(self, end_ms):
        """Sets the end_ms of this V1DriverDailyLogResponseDays.

        End of the HOS day, specified in milliseconds UNIX time.  # noqa: E501

        :param end_ms: The end_ms of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: int
        """

        self._end_ms = end_ms

    @property
    def shipping_doc_ids(self):
        """Gets the shipping_doc_ids of this V1DriverDailyLogResponseDays.  # noqa: E501

        List of customer shipping document IDs associated with the driver for the day.  # noqa: E501

        :return: The shipping_doc_ids of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: object
        """
        return self._shipping_doc_ids

    @shipping_doc_ids.setter
    def shipping_doc_ids(self, shipping_doc_ids):
        """Sets the shipping_doc_ids of this V1DriverDailyLogResponseDays.

        List of customer shipping document IDs associated with the driver for the day.  # noqa: E501

        :param shipping_doc_ids: The shipping_doc_ids of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: object
        """

        self._shipping_doc_ids = shipping_doc_ids

    @property
    def start_ms(self):
        """Gets the start_ms of this V1DriverDailyLogResponseDays.  # noqa: E501

        End of the HOS day, specified in milliseconds UNIX time.  # noqa: E501

        :return: The start_ms of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: int
        """
        return self._start_ms

    @start_ms.setter
    def start_ms(self, start_ms):
        """Sets the start_ms of this V1DriverDailyLogResponseDays.

        End of the HOS day, specified in milliseconds UNIX time.  # noqa: E501

        :param start_ms: The start_ms of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: int
        """

        self._start_ms = start_ms

    @property
    def trailer_ids(self):
        """Gets the trailer_ids of this V1DriverDailyLogResponseDays.  # noqa: E501

        List of trailer ID's associated with the driver for the day.  # noqa: E501

        :return: The trailer_ids of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: object
        """
        return self._trailer_ids

    @trailer_ids.setter
    def trailer_ids(self, trailer_ids):
        """Sets the trailer_ids of this V1DriverDailyLogResponseDays.

        List of trailer ID's associated with the driver for the day.  # noqa: E501

        :param trailer_ids: The trailer_ids of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: object
        """

        self._trailer_ids = trailer_ids

    @property
    def vehicle_ids(self):
        """Gets the vehicle_ids of this V1DriverDailyLogResponseDays.  # noqa: E501

        List of vehicle ID's associated with the driver for the day.  # noqa: E501

        :return: The vehicle_ids of this V1DriverDailyLogResponseDays.  # noqa: E501
        :rtype: object
        """
        return self._vehicle_ids

    @vehicle_ids.setter
    def vehicle_ids(self, vehicle_ids):
        """Sets the vehicle_ids of this V1DriverDailyLogResponseDays.

        List of vehicle ID's associated with the driver for the day.  # noqa: E501

        :param vehicle_ids: The vehicle_ids of this V1DriverDailyLogResponseDays.  # noqa: E501
        :type: object
        """

        self._vehicle_ids = vehicle_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DriverDailyLogResponseDays):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1DriverDailyLogResponseDays):
            return True

        return self.to_dict() != other.to_dict()
