# coding: utf-8

"""
    Samsara API

    <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).   # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VehiclePatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aux_input_type1': 'str',
        'aux_input_type2': 'str',
        'engine_hours': 'int',
        'external_ids': 'dict(str, str)',
        'harsh_acceleration_setting_type': 'str',
        'license_plate': 'str',
        'name': 'str',
        'notes': 'str',
        'odometer_meters': 'int',
        'static_assigned_driver_id': 'str',
        'tag_ids': 'list[str]',
        'vin': 'str'
    }

    attribute_map = {
        'aux_input_type1': 'auxInputType1',
        'aux_input_type2': 'auxInputType2',
        'engine_hours': 'engineHours',
        'external_ids': 'externalIds',
        'harsh_acceleration_setting_type': 'harshAccelerationSettingType',
        'license_plate': 'licensePlate',
        'name': 'name',
        'notes': 'notes',
        'odometer_meters': 'odometerMeters',
        'static_assigned_driver_id': 'staticAssignedDriverId',
        'tag_ids': 'tagIds',
        'vin': 'vin'
    }

    def __init__(self, aux_input_type1=None, aux_input_type2=None, engine_hours=None, external_ids=None, harsh_acceleration_setting_type=None, license_plate=None, name=None, notes=None, odometer_meters=None, static_assigned_driver_id=None, tag_ids=None, vin=None, local_vars_configuration=None):  # noqa: E501
        """VehiclePatch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aux_input_type1 = None
        self._aux_input_type2 = None
        self._engine_hours = None
        self._external_ids = None
        self._harsh_acceleration_setting_type = None
        self._license_plate = None
        self._name = None
        self._notes = None
        self._odometer_meters = None
        self._static_assigned_driver_id = None
        self._tag_ids = None
        self._vin = None
        self.discriminator = None

        if aux_input_type1 is not None:
            self.aux_input_type1 = aux_input_type1
        if aux_input_type2 is not None:
            self.aux_input_type2 = aux_input_type2
        if engine_hours is not None:
            self.engine_hours = engine_hours
        if external_ids is not None:
            self.external_ids = external_ids
        if harsh_acceleration_setting_type is not None:
            self.harsh_acceleration_setting_type = harsh_acceleration_setting_type
        if license_plate is not None:
            self.license_plate = license_plate
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if odometer_meters is not None:
            self.odometer_meters = odometer_meters
        self.static_assigned_driver_id = static_assigned_driver_id
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if vin is not None:
            self.vin = vin

    @property
    def aux_input_type1(self):
        """Gets the aux_input_type1 of this VehiclePatch.  # noqa: E501

        The type of aux input that this vehicle has connected to port 1. Setting to \"none\" will remove the configured aux input.  # noqa: E501

        :return: The aux_input_type1 of this VehiclePatch.  # noqa: E501
        :rtype: str
        """
        return self._aux_input_type1

    @aux_input_type1.setter
    def aux_input_type1(self, aux_input_type1):
        """Sets the aux_input_type1 of this VehiclePatch.

        The type of aux input that this vehicle has connected to port 1. Setting to \"none\" will remove the configured aux input.  # noqa: E501

        :param aux_input_type1: The aux_input_type1 of this VehiclePatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "emergencyLights", "emergencyAlarm", "stopPaddle", "powerTakeOff", "plow", "sweeper", "salter", "reefer", "door", "boom", "auxiliaryEngine", "generator", "eightWayLights"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and aux_input_type1 not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `aux_input_type1` ({0}), must be one of {1}"  # noqa: E501
                .format(aux_input_type1, allowed_values)
            )

        self._aux_input_type1 = aux_input_type1

    @property
    def aux_input_type2(self):
        """Gets the aux_input_type2 of this VehiclePatch.  # noqa: E501

        The type of aux input that this vehicle has connected to port 2. Setting to \"none\" will remove the configured aux input.  # noqa: E501

        :return: The aux_input_type2 of this VehiclePatch.  # noqa: E501
        :rtype: str
        """
        return self._aux_input_type2

    @aux_input_type2.setter
    def aux_input_type2(self, aux_input_type2):
        """Sets the aux_input_type2 of this VehiclePatch.

        The type of aux input that this vehicle has connected to port 2. Setting to \"none\" will remove the configured aux input.  # noqa: E501

        :param aux_input_type2: The aux_input_type2 of this VehiclePatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "emergencyLights", "emergencyAlarm", "stopPaddle", "powerTakeOff", "plow", "sweeper", "salter", "reefer", "door", "boom", "auxiliaryEngine", "generator", "eightWayLights"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and aux_input_type2 not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `aux_input_type2` ({0}), must be one of {1}"  # noqa: E501
                .format(aux_input_type2, allowed_values)
            )

        self._aux_input_type2 = aux_input_type2

    @property
    def engine_hours(self):
        """Gets the engine_hours of this VehiclePatch.  # noqa: E501

        Current engine hours value of the vehicle. This is typically pulled automatically from the vehicle, but can be manually overridden when it's not read automatically.  # noqa: E501

        :return: The engine_hours of this VehiclePatch.  # noqa: E501
        :rtype: int
        """
        return self._engine_hours

    @engine_hours.setter
    def engine_hours(self, engine_hours):
        """Sets the engine_hours of this VehiclePatch.

        Current engine hours value of the vehicle. This is typically pulled automatically from the vehicle, but can be manually overridden when it's not read automatically.  # noqa: E501

        :param engine_hours: The engine_hours of this VehiclePatch.  # noqa: E501
        :type: int
        """

        self._engine_hours = engine_hours

    @property
    def external_ids(self):
        """Gets the external_ids of this VehiclePatch.  # noqa: E501

        User-defined dictionary of external IDs (key-value pairs). Both the keys and the values of the dictionary are of type string and must be alphanumeric. Each organization can have at most 10 unique external ID keys. To delete an external ID, set its value to null or the empty string (`\"\"`). An external ID can be used as a path parameter to retrieve or update that resource.  # noqa: E501

        :return: The external_ids of this VehiclePatch.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this VehiclePatch.

        User-defined dictionary of external IDs (key-value pairs). Both the keys and the values of the dictionary are of type string and must be alphanumeric. Each organization can have at most 10 unique external ID keys. To delete an external ID, set its value to null or the empty string (`\"\"`). An external ID can be used as a path parameter to retrieve or update that resource.  # noqa: E501

        :param external_ids: The external_ids of this VehiclePatch.  # noqa: E501
        :type: dict(str, str)
        """

        self._external_ids = external_ids

    @property
    def harsh_acceleration_setting_type(self):
        """Gets the harsh_acceleration_setting_type of this VehiclePatch.  # noqa: E501

        Enumeration of the harsh acceleration setting types. This setting influences the accelereation sensitivity from which a harsh event is triggered. If set to `off`, then no acceleration based harsh events are triggered for the vehicle.  # noqa: E501

        :return: The harsh_acceleration_setting_type of this VehiclePatch.  # noqa: E501
        :rtype: str
        """
        return self._harsh_acceleration_setting_type

    @harsh_acceleration_setting_type.setter
    def harsh_acceleration_setting_type(self, harsh_acceleration_setting_type):
        """Sets the harsh_acceleration_setting_type of this VehiclePatch.

        Enumeration of the harsh acceleration setting types. This setting influences the accelereation sensitivity from which a harsh event is triggered. If set to `off`, then no acceleration based harsh events are triggered for the vehicle.  # noqa: E501

        :param harsh_acceleration_setting_type: The harsh_acceleration_setting_type of this VehiclePatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["passengerCar", "lightTruck", "heavyDuty", "off", "automatic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and harsh_acceleration_setting_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `harsh_acceleration_setting_type` ({0}), must be one of {1}"  # noqa: E501
                .format(harsh_acceleration_setting_type, allowed_values)
            )

        self._harsh_acceleration_setting_type = harsh_acceleration_setting_type

    @property
    def license_plate(self):
        """Gets the license_plate of this VehiclePatch.  # noqa: E501

        License plate number for the vehicle.  # noqa: E501

        :return: The license_plate of this VehiclePatch.  # noqa: E501
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this VehiclePatch.

        License plate number for the vehicle.  # noqa: E501

        :param license_plate: The license_plate of this VehiclePatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                license_plate is not None and len(license_plate) > 12):
            raise ValueError("Invalid value for `license_plate`, length must be less than or equal to `12`")  # noqa: E501

        self._license_plate = license_plate

    @property
    def name(self):
        """Gets the name of this VehiclePatch.  # noqa: E501

        Name of the vehicle.  # noqa: E501

        :return: The name of this VehiclePatch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VehiclePatch.

        Name of the vehicle.  # noqa: E501

        :param name: The name of this VehiclePatch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this VehiclePatch.  # noqa: E501

        Notes about a vehicle with a maximum of 255 characters.  # noqa: E501

        :return: The notes of this VehiclePatch.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this VehiclePatch.

        Notes about a vehicle with a maximum of 255 characters.  # noqa: E501

        :param notes: The notes of this VehiclePatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                notes is not None and len(notes) > 255):
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `255`")  # noqa: E501

        self._notes = notes

    @property
    def odometer_meters(self):
        """Gets the odometer_meters of this VehiclePatch.  # noqa: E501

        Current odometer value of the vehicle. This is typically pulled automatically from the vehicle, but can be manually overridden when it's not read automatically.  # noqa: E501

        :return: The odometer_meters of this VehiclePatch.  # noqa: E501
        :rtype: int
        """
        return self._odometer_meters

    @odometer_meters.setter
    def odometer_meters(self, odometer_meters):
        """Sets the odometer_meters of this VehiclePatch.

        Current odometer value of the vehicle. This is typically pulled automatically from the vehicle, but can be manually overridden when it's not read automatically.  # noqa: E501

        :param odometer_meters: The odometer_meters of this VehiclePatch.  # noqa: E501
        :type: int
        """

        self._odometer_meters = odometer_meters

    @property
    def static_assigned_driver_id(self):
        """Gets the static_assigned_driver_id of this VehiclePatch.  # noqa: E501

        ID of driver assigned to the vehicle for static vehicle assignments. An empty string explicitly unsets the assignment. (uncommon).  # noqa: E501

        :return: The static_assigned_driver_id of this VehiclePatch.  # noqa: E501
        :rtype: str
        """
        return self._static_assigned_driver_id

    @static_assigned_driver_id.setter
    def static_assigned_driver_id(self, static_assigned_driver_id):
        """Sets the static_assigned_driver_id of this VehiclePatch.

        ID of driver assigned to the vehicle for static vehicle assignments. An empty string explicitly unsets the assignment. (uncommon).  # noqa: E501

        :param static_assigned_driver_id: The static_assigned_driver_id of this VehiclePatch.  # noqa: E501
        :type: str
        """

        self._static_assigned_driver_id = static_assigned_driver_id

    @property
    def tag_ids(self):
        """Gets the tag_ids of this VehiclePatch.  # noqa: E501

        An array of IDs of tags to associate with this vehicle.  # noqa: E501

        :return: The tag_ids of this VehiclePatch.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this VehiclePatch.

        An array of IDs of tags to associate with this vehicle.  # noqa: E501

        :param tag_ids: The tag_ids of this VehiclePatch.  # noqa: E501
        :type: list[str]
        """

        self._tag_ids = tag_ids

    @property
    def vin(self):
        """Gets the vin of this VehiclePatch.  # noqa: E501

        A vehicle identification number.  # noqa: E501

        :return: The vin of this VehiclePatch.  # noqa: E501
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """Sets the vin of this VehiclePatch.

        A vehicle identification number.  # noqa: E501

        :param vin: The vin of this VehiclePatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                vin is not None and len(vin) > 17):
            raise ValueError("Invalid value for `vin`, length must be less than or equal to `17`")  # noqa: E501

        self._vin = vin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehiclePatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VehiclePatch):
            return True

        return self.to_dict() != other.to_dict()
