# coding: utf-8

"""
    Samsara API

    <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).   # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1DvirBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'author_signature': 'V1DvirBaseAuthorSignature',
        'defects_corrected': 'bool',
        'defects_need_not_be_corrected': 'bool',
        'id': 'int',
        'inspection_type': 'str',
        'mechanic_notes': 'str',
        'mechanic_or_agent_signature': 'V1DvirBaseMechanicOrAgentSignature',
        'next_driver_signature': 'V1DvirBaseNextDriverSignature',
        'odometer_miles': 'int',
        'started_at_ms': 'int',
        'time_ms': 'int',
        'trailer_defects': 'list[V1DvirDefectBase]',
        'trailer_id': 'int',
        'trailer_name': 'str',
        'vehicle': 'V1DvirBaseVehicle',
        'vehicle_condition': 'str',
        'vehicle_defects': 'list[V1DvirDefectBase]'
    }

    attribute_map = {
        'author_signature': 'authorSignature',
        'defects_corrected': 'defectsCorrected',
        'defects_need_not_be_corrected': 'defectsNeedNotBeCorrected',
        'id': 'id',
        'inspection_type': 'inspectionType',
        'mechanic_notes': 'mechanicNotes',
        'mechanic_or_agent_signature': 'mechanicOrAgentSignature',
        'next_driver_signature': 'nextDriverSignature',
        'odometer_miles': 'odometerMiles',
        'started_at_ms': 'startedAtMs',
        'time_ms': 'timeMs',
        'trailer_defects': 'trailerDefects',
        'trailer_id': 'trailerId',
        'trailer_name': 'trailerName',
        'vehicle': 'vehicle',
        'vehicle_condition': 'vehicleCondition',
        'vehicle_defects': 'vehicleDefects'
    }

    def __init__(self, author_signature=None, defects_corrected=None, defects_need_not_be_corrected=None, id=None, inspection_type=None, mechanic_notes=None, mechanic_or_agent_signature=None, next_driver_signature=None, odometer_miles=None, started_at_ms=None, time_ms=None, trailer_defects=None, trailer_id=None, trailer_name=None, vehicle=None, vehicle_condition=None, vehicle_defects=None, local_vars_configuration=None):  # noqa: E501
        """V1DvirBase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._author_signature = None
        self._defects_corrected = None
        self._defects_need_not_be_corrected = None
        self._id = None
        self._inspection_type = None
        self._mechanic_notes = None
        self._mechanic_or_agent_signature = None
        self._next_driver_signature = None
        self._odometer_miles = None
        self._started_at_ms = None
        self._time_ms = None
        self._trailer_defects = None
        self._trailer_id = None
        self._trailer_name = None
        self._vehicle = None
        self._vehicle_condition = None
        self._vehicle_defects = None
        self.discriminator = None

        if author_signature is not None:
            self.author_signature = author_signature
        if defects_corrected is not None:
            self.defects_corrected = defects_corrected
        if defects_need_not_be_corrected is not None:
            self.defects_need_not_be_corrected = defects_need_not_be_corrected
        if id is not None:
            self.id = id
        if inspection_type is not None:
            self.inspection_type = inspection_type
        if mechanic_notes is not None:
            self.mechanic_notes = mechanic_notes
        if mechanic_or_agent_signature is not None:
            self.mechanic_or_agent_signature = mechanic_or_agent_signature
        if next_driver_signature is not None:
            self.next_driver_signature = next_driver_signature
        if odometer_miles is not None:
            self.odometer_miles = odometer_miles
        if started_at_ms is not None:
            self.started_at_ms = started_at_ms
        if time_ms is not None:
            self.time_ms = time_ms
        if trailer_defects is not None:
            self.trailer_defects = trailer_defects
        if trailer_id is not None:
            self.trailer_id = trailer_id
        if trailer_name is not None:
            self.trailer_name = trailer_name
        if vehicle is not None:
            self.vehicle = vehicle
        if vehicle_condition is not None:
            self.vehicle_condition = vehicle_condition
        if vehicle_defects is not None:
            self.vehicle_defects = vehicle_defects

    @property
    def author_signature(self):
        """Gets the author_signature of this V1DvirBase.  # noqa: E501


        :return: The author_signature of this V1DvirBase.  # noqa: E501
        :rtype: V1DvirBaseAuthorSignature
        """
        return self._author_signature

    @author_signature.setter
    def author_signature(self, author_signature):
        """Sets the author_signature of this V1DvirBase.


        :param author_signature: The author_signature of this V1DvirBase.  # noqa: E501
        :type: V1DvirBaseAuthorSignature
        """

        self._author_signature = author_signature

    @property
    def defects_corrected(self):
        """Gets the defects_corrected of this V1DvirBase.  # noqa: E501

        Signifies if the defects on the vehicle corrected after the DVIR is done.  # noqa: E501

        :return: The defects_corrected of this V1DvirBase.  # noqa: E501
        :rtype: bool
        """
        return self._defects_corrected

    @defects_corrected.setter
    def defects_corrected(self, defects_corrected):
        """Sets the defects_corrected of this V1DvirBase.

        Signifies if the defects on the vehicle corrected after the DVIR is done.  # noqa: E501

        :param defects_corrected: The defects_corrected of this V1DvirBase.  # noqa: E501
        :type: bool
        """

        self._defects_corrected = defects_corrected

    @property
    def defects_need_not_be_corrected(self):
        """Gets the defects_need_not_be_corrected of this V1DvirBase.  # noqa: E501

        Signifies if the defects on this vehicle can be ignored.  # noqa: E501

        :return: The defects_need_not_be_corrected of this V1DvirBase.  # noqa: E501
        :rtype: bool
        """
        return self._defects_need_not_be_corrected

    @defects_need_not_be_corrected.setter
    def defects_need_not_be_corrected(self, defects_need_not_be_corrected):
        """Sets the defects_need_not_be_corrected of this V1DvirBase.

        Signifies if the defects on this vehicle can be ignored.  # noqa: E501

        :param defects_need_not_be_corrected: The defects_need_not_be_corrected of this V1DvirBase.  # noqa: E501
        :type: bool
        """

        self._defects_need_not_be_corrected = defects_need_not_be_corrected

    @property
    def id(self):
        """Gets the id of this V1DvirBase.  # noqa: E501

        The id of this DVIR record.  # noqa: E501

        :return: The id of this V1DvirBase.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1DvirBase.

        The id of this DVIR record.  # noqa: E501

        :param id: The id of this V1DvirBase.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inspection_type(self):
        """Gets the inspection_type of this V1DvirBase.  # noqa: E501

        Inspection type of the DVIR.  # noqa: E501

        :return: The inspection_type of this V1DvirBase.  # noqa: E501
        :rtype: str
        """
        return self._inspection_type

    @inspection_type.setter
    def inspection_type(self, inspection_type):
        """Sets the inspection_type of this V1DvirBase.

        Inspection type of the DVIR.  # noqa: E501

        :param inspection_type: The inspection_type of this V1DvirBase.  # noqa: E501
        :type: str
        """

        self._inspection_type = inspection_type

    @property
    def mechanic_notes(self):
        """Gets the mechanic_notes of this V1DvirBase.  # noqa: E501

        The mechanics notes on the DVIR.  # noqa: E501

        :return: The mechanic_notes of this V1DvirBase.  # noqa: E501
        :rtype: str
        """
        return self._mechanic_notes

    @mechanic_notes.setter
    def mechanic_notes(self, mechanic_notes):
        """Sets the mechanic_notes of this V1DvirBase.

        The mechanics notes on the DVIR.  # noqa: E501

        :param mechanic_notes: The mechanic_notes of this V1DvirBase.  # noqa: E501
        :type: str
        """

        self._mechanic_notes = mechanic_notes

    @property
    def mechanic_or_agent_signature(self):
        """Gets the mechanic_or_agent_signature of this V1DvirBase.  # noqa: E501


        :return: The mechanic_or_agent_signature of this V1DvirBase.  # noqa: E501
        :rtype: V1DvirBaseMechanicOrAgentSignature
        """
        return self._mechanic_or_agent_signature

    @mechanic_or_agent_signature.setter
    def mechanic_or_agent_signature(self, mechanic_or_agent_signature):
        """Sets the mechanic_or_agent_signature of this V1DvirBase.


        :param mechanic_or_agent_signature: The mechanic_or_agent_signature of this V1DvirBase.  # noqa: E501
        :type: V1DvirBaseMechanicOrAgentSignature
        """

        self._mechanic_or_agent_signature = mechanic_or_agent_signature

    @property
    def next_driver_signature(self):
        """Gets the next_driver_signature of this V1DvirBase.  # noqa: E501


        :return: The next_driver_signature of this V1DvirBase.  # noqa: E501
        :rtype: V1DvirBaseNextDriverSignature
        """
        return self._next_driver_signature

    @next_driver_signature.setter
    def next_driver_signature(self, next_driver_signature):
        """Sets the next_driver_signature of this V1DvirBase.


        :param next_driver_signature: The next_driver_signature of this V1DvirBase.  # noqa: E501
        :type: V1DvirBaseNextDriverSignature
        """

        self._next_driver_signature = next_driver_signature

    @property
    def odometer_miles(self):
        """Gets the odometer_miles of this V1DvirBase.  # noqa: E501

        The odometer reading in miles for the vehicle when the DVIR was done.  # noqa: E501

        :return: The odometer_miles of this V1DvirBase.  # noqa: E501
        :rtype: int
        """
        return self._odometer_miles

    @odometer_miles.setter
    def odometer_miles(self, odometer_miles):
        """Sets the odometer_miles of this V1DvirBase.

        The odometer reading in miles for the vehicle when the DVIR was done.  # noqa: E501

        :param odometer_miles: The odometer_miles of this V1DvirBase.  # noqa: E501
        :type: int
        """

        self._odometer_miles = odometer_miles

    @property
    def started_at_ms(self):
        """Gets the started_at_ms of this V1DvirBase.  # noqa: E501

        Timestamp when driver began filling out this DVIR, in UNIX milliseconds.  # noqa: E501

        :return: The started_at_ms of this V1DvirBase.  # noqa: E501
        :rtype: int
        """
        return self._started_at_ms

    @started_at_ms.setter
    def started_at_ms(self, started_at_ms):
        """Sets the started_at_ms of this V1DvirBase.

        Timestamp when driver began filling out this DVIR, in UNIX milliseconds.  # noqa: E501

        :param started_at_ms: The started_at_ms of this V1DvirBase.  # noqa: E501
        :type: int
        """

        self._started_at_ms = started_at_ms

    @property
    def time_ms(self):
        """Gets the time_ms of this V1DvirBase.  # noqa: E501

        Timestamp of when this DVIR was signed & completed, in UNIX milliseconds.  # noqa: E501

        :return: The time_ms of this V1DvirBase.  # noqa: E501
        :rtype: int
        """
        return self._time_ms

    @time_ms.setter
    def time_ms(self, time_ms):
        """Sets the time_ms of this V1DvirBase.

        Timestamp of when this DVIR was signed & completed, in UNIX milliseconds.  # noqa: E501

        :param time_ms: The time_ms of this V1DvirBase.  # noqa: E501
        :type: int
        """

        self._time_ms = time_ms

    @property
    def trailer_defects(self):
        """Gets the trailer_defects of this V1DvirBase.  # noqa: E501

        Defects registered for the trailer which was part of the DVIR.  # noqa: E501

        :return: The trailer_defects of this V1DvirBase.  # noqa: E501
        :rtype: list[V1DvirDefectBase]
        """
        return self._trailer_defects

    @trailer_defects.setter
    def trailer_defects(self, trailer_defects):
        """Sets the trailer_defects of this V1DvirBase.

        Defects registered for the trailer which was part of the DVIR.  # noqa: E501

        :param trailer_defects: The trailer_defects of this V1DvirBase.  # noqa: E501
        :type: list[V1DvirDefectBase]
        """

        self._trailer_defects = trailer_defects

    @property
    def trailer_id(self):
        """Gets the trailer_id of this V1DvirBase.  # noqa: E501

        The id of the trailer which was part of the DVIR.  # noqa: E501

        :return: The trailer_id of this V1DvirBase.  # noqa: E501
        :rtype: int
        """
        return self._trailer_id

    @trailer_id.setter
    def trailer_id(self, trailer_id):
        """Sets the trailer_id of this V1DvirBase.

        The id of the trailer which was part of the DVIR.  # noqa: E501

        :param trailer_id: The trailer_id of this V1DvirBase.  # noqa: E501
        :type: int
        """

        self._trailer_id = trailer_id

    @property
    def trailer_name(self):
        """Gets the trailer_name of this V1DvirBase.  # noqa: E501

        The name of the trailer which was part of the DVIR.  # noqa: E501

        :return: The trailer_name of this V1DvirBase.  # noqa: E501
        :rtype: str
        """
        return self._trailer_name

    @trailer_name.setter
    def trailer_name(self, trailer_name):
        """Sets the trailer_name of this V1DvirBase.

        The name of the trailer which was part of the DVIR.  # noqa: E501

        :param trailer_name: The trailer_name of this V1DvirBase.  # noqa: E501
        :type: str
        """

        self._trailer_name = trailer_name

    @property
    def vehicle(self):
        """Gets the vehicle of this V1DvirBase.  # noqa: E501


        :return: The vehicle of this V1DvirBase.  # noqa: E501
        :rtype: V1DvirBaseVehicle
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this V1DvirBase.


        :param vehicle: The vehicle of this V1DvirBase.  # noqa: E501
        :type: V1DvirBaseVehicle
        """

        self._vehicle = vehicle

    @property
    def vehicle_condition(self):
        """Gets the vehicle_condition of this V1DvirBase.  # noqa: E501

        The condition of vechile on which DVIR was done.  # noqa: E501

        :return: The vehicle_condition of this V1DvirBase.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_condition

    @vehicle_condition.setter
    def vehicle_condition(self, vehicle_condition):
        """Sets the vehicle_condition of this V1DvirBase.

        The condition of vechile on which DVIR was done.  # noqa: E501

        :param vehicle_condition: The vehicle_condition of this V1DvirBase.  # noqa: E501
        :type: str
        """

        self._vehicle_condition = vehicle_condition

    @property
    def vehicle_defects(self):
        """Gets the vehicle_defects of this V1DvirBase.  # noqa: E501

        Defects registered for the vehicle which was part of the DVIR.  # noqa: E501

        :return: The vehicle_defects of this V1DvirBase.  # noqa: E501
        :rtype: list[V1DvirDefectBase]
        """
        return self._vehicle_defects

    @vehicle_defects.setter
    def vehicle_defects(self, vehicle_defects):
        """Sets the vehicle_defects of this V1DvirBase.

        Defects registered for the vehicle which was part of the DVIR.  # noqa: E501

        :param vehicle_defects: The vehicle_defects of this V1DvirBase.  # noqa: E501
        :type: list[V1DvirDefectBase]
        """

        self._vehicle_defects = vehicle_defects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DvirBase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1DvirBase):
            return True

        return self.to_dict() != other.to_dict()
